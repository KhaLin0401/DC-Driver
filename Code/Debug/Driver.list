
Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e8c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08006f9c  08006f9c  00007f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a0  080070a0  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080070a0  080070a0  00009060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080070a0  080070a0  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070a0  080070a0  000080a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070a4  080070a4  000080a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080070a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ea4  20000060  08007108  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f04  08007108  00009f04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9db  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d3  00000000  00000000  00023a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  00027338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012b0  00000000  00000000  00028b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003604  00000000  00000000  00029dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a868  00000000  00000000  0002d3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097577  00000000  00000000  00047c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df1a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f4  00000000  00000000  000df1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e59dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f84 	.word	0x08006f84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006f84 	.word	0x08006f84

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f001 fa1c 	bl	8001590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f84c 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 fa32 	bl	80005c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000160:	f000 f8b2 	bl	80002c8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000164:	f000 f980 	bl	8000468 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f9d8 	bl	800051c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800016c:	f000 fa00 	bl	8000570 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000170:	f000 f87c 	bl	800026c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000174:	f000 f92c 	bl	80003d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000178:	f004 f8d8 	bl	800432c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800017c:	4a11      	ldr	r2, [pc, #68]	@ (80001c4 <main+0x74>)
 800017e:	2100      	movs	r1, #0
 8000180:	4811      	ldr	r0, [pc, #68]	@ (80001c8 <main+0x78>)
 8000182:	f004 f91b 	bl	80043bc <osThreadNew>
 8000186:	4603      	mov	r3, r0
 8000188:	4a10      	ldr	r2, [pc, #64]	@ (80001cc <main+0x7c>)
 800018a:	6013      	str	r3, [r2, #0]

  /* creation of Motor1_Task */
  Motor1_TaskHandle = osThreadNew(StartTask02, NULL, &Motor1_Task_attributes);
 800018c:	4a10      	ldr	r2, [pc, #64]	@ (80001d0 <main+0x80>)
 800018e:	2100      	movs	r1, #0
 8000190:	4810      	ldr	r0, [pc, #64]	@ (80001d4 <main+0x84>)
 8000192:	f004 f913 	bl	80043bc <osThreadNew>
 8000196:	4603      	mov	r3, r0
 8000198:	4a0f      	ldr	r2, [pc, #60]	@ (80001d8 <main+0x88>)
 800019a:	6013      	str	r3, [r2, #0]

  /* creation of Motor2_Task */
  Motor2_TaskHandle = osThreadNew(StartTask03, NULL, &Motor2_Task_attributes);
 800019c:	4a0f      	ldr	r2, [pc, #60]	@ (80001dc <main+0x8c>)
 800019e:	2100      	movs	r1, #0
 80001a0:	480f      	ldr	r0, [pc, #60]	@ (80001e0 <main+0x90>)
 80001a2:	f004 f90b 	bl	80043bc <osThreadNew>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4a0e      	ldr	r2, [pc, #56]	@ (80001e4 <main+0x94>)
 80001aa:	6013      	str	r3, [r2, #0]

  /* creation of Modbus_Task */
  Modbus_TaskHandle = osThreadNew(StartTask04, NULL, &Modbus_Task_attributes);
 80001ac:	4a0e      	ldr	r2, [pc, #56]	@ (80001e8 <main+0x98>)
 80001ae:	2100      	movs	r1, #0
 80001b0:	480e      	ldr	r0, [pc, #56]	@ (80001ec <main+0x9c>)
 80001b2:	f004 f903 	bl	80043bc <osThreadNew>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a0d      	ldr	r2, [pc, #52]	@ (80001f0 <main+0xa0>)
 80001ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001bc:	f004 f8d8 	bl	8004370 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c0:	bf00      	nop
 80001c2:	e7fd      	b.n	80001c0 <main+0x70>
 80001c4:	08006fe4 	.word	0x08006fe4
 80001c8:	080006fd 	.word	0x080006fd
 80001cc:	20000238 	.word	0x20000238
 80001d0:	08007008 	.word	0x08007008
 80001d4:	0800070d 	.word	0x0800070d
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	0800702c 	.word	0x0800702c
 80001e0:	0800071d 	.word	0x0800071d
 80001e4:	20000240 	.word	0x20000240
 80001e8:	08007050 	.word	0x08007050
 80001ec:	0800072d 	.word	0x0800072d
 80001f0:	20000244 	.word	0x20000244

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	@ 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	@ 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f006 fdd0 	bl	8006da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2310      	movs	r3, #16
 8000220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000222:	2300      	movs	r3, #0
 8000224:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	4618      	mov	r0, r3
 800022c:	f001 fecc 	bl	8001fc8 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000236:	f000 fb3f 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023e:	2300      	movs	r3, #0
 8000240:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f002 f93a 	bl	80024cc <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800025e:	f000 fb2b 	bl	80008b8 <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3740      	adds	r7, #64	@ 0x40
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000270:	4b12      	ldr	r3, [pc, #72]	@ (80002bc <MX_I2C1_Init+0x50>)
 8000272:	4a13      	ldr	r2, [pc, #76]	@ (80002c0 <MX_I2C1_Init+0x54>)
 8000274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000276:	4b11      	ldr	r3, [pc, #68]	@ (80002bc <MX_I2C1_Init+0x50>)
 8000278:	4a12      	ldr	r2, [pc, #72]	@ (80002c4 <MX_I2C1_Init+0x58>)
 800027a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800027c:	4b0f      	ldr	r3, [pc, #60]	@ (80002bc <MX_I2C1_Init+0x50>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000282:	4b0e      	ldr	r3, [pc, #56]	@ (80002bc <MX_I2C1_Init+0x50>)
 8000284:	2200      	movs	r2, #0
 8000286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000288:	4b0c      	ldr	r3, [pc, #48]	@ (80002bc <MX_I2C1_Init+0x50>)
 800028a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800028e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000290:	4b0a      	ldr	r3, [pc, #40]	@ (80002bc <MX_I2C1_Init+0x50>)
 8000292:	2200      	movs	r2, #0
 8000294:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000296:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <MX_I2C1_Init+0x50>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800029c:	4b07      	ldr	r3, [pc, #28]	@ (80002bc <MX_I2C1_Init+0x50>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002a2:	4b06      	ldr	r3, [pc, #24]	@ (80002bc <MX_I2C1_Init+0x50>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002a8:	4804      	ldr	r0, [pc, #16]	@ (80002bc <MX_I2C1_Init+0x50>)
 80002aa:	f001 fd49 	bl	8001d40 <HAL_I2C_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002b4:	f000 fb00 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	2000007c 	.word	0x2000007c
 80002c0:	40005400 	.word	0x40005400
 80002c4:	000186a0 	.word	0x000186a0

080002c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b092      	sub	sp, #72	@ 0x48
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
 80002e8:	615a      	str	r2, [r3, #20]
 80002ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2220      	movs	r2, #32
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f006 fd58 	bl	8006da8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002f8:	4b33      	ldr	r3, [pc, #204]	@ (80003c8 <MX_TIM1_Init+0x100>)
 80002fa:	4a34      	ldr	r2, [pc, #208]	@ (80003cc <MX_TIM1_Init+0x104>)
 80002fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002fe:	4b32      	ldr	r3, [pc, #200]	@ (80003c8 <MX_TIM1_Init+0x100>)
 8000300:	2200      	movs	r2, #0
 8000302:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000304:	4b30      	ldr	r3, [pc, #192]	@ (80003c8 <MX_TIM1_Init+0x100>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800030a:	4b2f      	ldr	r3, [pc, #188]	@ (80003c8 <MX_TIM1_Init+0x100>)
 800030c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000310:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000312:	4b2d      	ldr	r3, [pc, #180]	@ (80003c8 <MX_TIM1_Init+0x100>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000318:	4b2b      	ldr	r3, [pc, #172]	@ (80003c8 <MX_TIM1_Init+0x100>)
 800031a:	2200      	movs	r2, #0
 800031c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800031e:	4b2a      	ldr	r3, [pc, #168]	@ (80003c8 <MX_TIM1_Init+0x100>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000324:	4828      	ldr	r0, [pc, #160]	@ (80003c8 <MX_TIM1_Init+0x100>)
 8000326:	f002 fb2f 	bl	8002988 <HAL_TIM_PWM_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000330:	f000 fac2 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000334:	2300      	movs	r3, #0
 8000336:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000338:	2300      	movs	r3, #0
 800033a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800033c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000340:	4619      	mov	r1, r3
 8000342:	4821      	ldr	r0, [pc, #132]	@ (80003c8 <MX_TIM1_Init+0x100>)
 8000344:	f003 f89a 	bl	800347c <HAL_TIMEx_MasterConfigSynchronization>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800034e:	f000 fab3 	bl	80008b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000352:	2360      	movs	r3, #96	@ 0x60
 8000354:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800035a:	2300      	movs	r3, #0
 800035c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800035e:	2300      	movs	r3, #0
 8000360:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000362:	2300      	movs	r3, #0
 8000364:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000366:	2300      	movs	r3, #0
 8000368:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800036a:	2300      	movs	r3, #0
 800036c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800036e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000372:	2200      	movs	r2, #0
 8000374:	4619      	mov	r1, r3
 8000376:	4814      	ldr	r0, [pc, #80]	@ (80003c8 <MX_TIM1_Init+0x100>)
 8000378:	f002 fc46 	bl	8002c08 <HAL_TIM_PWM_ConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000382:	f000 fa99 	bl	80008b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000386:	2300      	movs	r3, #0
 8000388:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800038a:	2300      	movs	r3, #0
 800038c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800039a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800039e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003a0:	2300      	movs	r3, #0
 80003a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	4619      	mov	r1, r3
 80003a8:	4807      	ldr	r0, [pc, #28]	@ (80003c8 <MX_TIM1_Init+0x100>)
 80003aa:	f003 f8c5 	bl	8003538 <HAL_TIMEx_ConfigBreakDeadTime>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80003b4:	f000 fa80 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003b8:	4803      	ldr	r0, [pc, #12]	@ (80003c8 <MX_TIM1_Init+0x100>)
 80003ba:	f000 ffdb 	bl	8001374 <HAL_TIM_MspPostInit>

}
 80003be:	bf00      	nop
 80003c0:	3748      	adds	r7, #72	@ 0x48
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	200000d0 	.word	0x200000d0
 80003cc:	40012c00 	.word	0x40012c00

080003d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d6:	f107 0308 	add.w	r3, r7, #8
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e4:	463b      	mov	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000464 <MX_TIM2_Init+0x94>)
 80003ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;  // FIXED: 72MHz/72 = 1MHz timer clock
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <MX_TIM2_Init+0x94>)
 80003f6:	2247      	movs	r2, #71	@ 0x47
 80003f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <MX_TIM2_Init+0x94>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;   // FIXED: 4ms timeout for Modbus (3.5 char time @ 9600 baud)
 8000400:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <MX_TIM2_Init+0x94>)
 8000402:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000406:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000408:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <MX_TIM2_Init+0x94>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800040e:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <MX_TIM2_Init+0x94>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000414:	4813      	ldr	r0, [pc, #76]	@ (8000464 <MX_TIM2_Init+0x94>)
 8000416:	f002 f9e7 	bl	80027e8 <HAL_TIM_Base_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000420:	f000 fa4a 	bl	80008b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000428:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	4619      	mov	r1, r3
 8000430:	480c      	ldr	r0, [pc, #48]	@ (8000464 <MX_TIM2_Init+0x94>)
 8000432:	f002 fcab 	bl	8002d8c <HAL_TIM_ConfigClockSource>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800043c:	f000 fa3c 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000440:	2300      	movs	r3, #0
 8000442:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000444:	2300      	movs	r3, #0
 8000446:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000448:	463b      	mov	r3, r7
 800044a:	4619      	mov	r1, r3
 800044c:	4805      	ldr	r0, [pc, #20]	@ (8000464 <MX_TIM2_Init+0x94>)
 800044e:	f003 f815 	bl	800347c <HAL_TIMEx_MasterConfigSynchronization>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000458:	f000 fa2e 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	3718      	adds	r7, #24
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000118 	.word	0x20000118

08000468 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08a      	sub	sp, #40	@ 0x28
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046e:	f107 0320 	add.w	r3, r7, #32
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]
 8000486:	615a      	str	r2, [r3, #20]
 8000488:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800048a:	4b22      	ldr	r3, [pc, #136]	@ (8000514 <MX_TIM3_Init+0xac>)
 800048c:	4a22      	ldr	r2, [pc, #136]	@ (8000518 <MX_TIM3_Init+0xb0>)
 800048e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000490:	4b20      	ldr	r3, [pc, #128]	@ (8000514 <MX_TIM3_Init+0xac>)
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000496:	4b1f      	ldr	r3, [pc, #124]	@ (8000514 <MX_TIM3_Init+0xac>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800049c:	4b1d      	ldr	r3, [pc, #116]	@ (8000514 <MX_TIM3_Init+0xac>)
 800049e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000514 <MX_TIM3_Init+0xac>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000514 <MX_TIM3_Init+0xac>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004b0:	4818      	ldr	r0, [pc, #96]	@ (8000514 <MX_TIM3_Init+0xac>)
 80004b2:	f002 fa69 	bl	8002988 <HAL_TIM_PWM_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80004bc:	f000 f9fc 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c0:	2300      	movs	r3, #0
 80004c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004c8:	f107 0320 	add.w	r3, r7, #32
 80004cc:	4619      	mov	r1, r3
 80004ce:	4811      	ldr	r0, [pc, #68]	@ (8000514 <MX_TIM3_Init+0xac>)
 80004d0:	f002 ffd4 	bl	800347c <HAL_TIMEx_MasterConfigSynchronization>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80004da:	f000 f9ed 	bl	80008b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004de:	2360      	movs	r3, #96	@ 0x60
 80004e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2208      	movs	r2, #8
 80004f2:	4619      	mov	r1, r3
 80004f4:	4807      	ldr	r0, [pc, #28]	@ (8000514 <MX_TIM3_Init+0xac>)
 80004f6:	f002 fb87 	bl	8002c08 <HAL_TIM_PWM_ConfigChannel>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000500:	f000 f9da 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000504:	4803      	ldr	r0, [pc, #12]	@ (8000514 <MX_TIM3_Init+0xac>)
 8000506:	f000 ff35 	bl	8001374 <HAL_TIM_MspPostInit>

}
 800050a:	bf00      	nop
 800050c:	3728      	adds	r7, #40	@ 0x28
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000160 	.word	0x20000160
 8000518:	40000400 	.word	0x40000400

0800051c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000520:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000522:	4a12      	ldr	r2, [pc, #72]	@ (800056c <MX_USART1_UART_Init+0x50>)
 8000524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000528:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800052c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000534:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000540:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000542:	220c      	movs	r2, #12
 8000544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000546:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	@ (8000568 <MX_USART1_UART_Init+0x4c>)
 8000554:	f003 f853 	bl	80035fe <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800055e:	f000 f9ab 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200001a8 	.word	0x200001a8
 800056c:	40013800 	.word	0x40013800

08000570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <MX_USART2_UART_Init+0x4c>)
 8000576:	4a12      	ldr	r2, [pc, #72]	@ (80005c0 <MX_USART2_UART_Init+0x50>)
 8000578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <MX_USART2_UART_Init+0x4c>)
 800057c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <MX_USART2_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <MX_USART2_UART_Init+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <MX_USART2_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000594:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <MX_USART2_UART_Init+0x4c>)
 8000596:	220c      	movs	r2, #12
 8000598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059a:	4b08      	ldr	r3, [pc, #32]	@ (80005bc <MX_USART2_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <MX_USART2_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005a6:	4805      	ldr	r0, [pc, #20]	@ (80005bc <MX_USART2_UART_Init+0x4c>)
 80005a8:	f003 f829 	bl	80035fe <HAL_UART_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005b2:	f000 f981 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200001f0 	.word	0x200001f0
 80005c0:	40004400 	.word	0x40004400

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d8:	4b44      	ldr	r3, [pc, #272]	@ (80006ec <MX_GPIO_Init+0x128>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a43      	ldr	r2, [pc, #268]	@ (80006ec <MX_GPIO_Init+0x128>)
 80005de:	f043 0310 	orr.w	r3, r3, #16
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b41      	ldr	r3, [pc, #260]	@ (80006ec <MX_GPIO_Init+0x128>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0310 	and.w	r3, r3, #16
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	4b3e      	ldr	r3, [pc, #248]	@ (80006ec <MX_GPIO_Init+0x128>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a3d      	ldr	r2, [pc, #244]	@ (80006ec <MX_GPIO_Init+0x128>)
 80005f6:	f043 0304 	orr.w	r3, r3, #4
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b3b      	ldr	r3, [pc, #236]	@ (80006ec <MX_GPIO_Init+0x128>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000608:	4b38      	ldr	r3, [pc, #224]	@ (80006ec <MX_GPIO_Init+0x128>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a37      	ldr	r2, [pc, #220]	@ (80006ec <MX_GPIO_Init+0x128>)
 800060e:	f043 0308 	orr.w	r3, r3, #8
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b35      	ldr	r3, [pc, #212]	@ (80006ec <MX_GPIO_Init+0x128>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0308 	and.w	r3, r3, #8
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000626:	4832      	ldr	r0, [pc, #200]	@ (80006f0 <MX_GPIO_Init+0x12c>)
 8000628:	f001 fb58 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|DIR2_Pin|DIR3_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f240 2112 	movw	r1, #530	@ 0x212
 8000632:	4830      	ldr	r0, [pc, #192]	@ (80006f4 <MX_GPIO_Init+0x130>)
 8000634:	f001 fb52 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR1_Pin|DIR4_Pin|OUT2_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f241 011a 	movw	r1, #4122	@ 0x101a
 800063e:	482e      	ldr	r0, [pc, #184]	@ (80006f8 <MX_GPIO_Init+0x134>)
 8000640:	f001 fb4c 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED4_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin;
 8000644:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2302      	movs	r3, #2
 8000654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	4619      	mov	r1, r3
 800065c:	4824      	ldr	r0, [pc, #144]	@ (80006f0 <MX_GPIO_Init+0x12c>)
 800065e:	f001 f9b9 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CUR_SENS_Pin */
  GPIO_InitStruct.Pin = CUR_SENS_Pin;
 8000662:	2301      	movs	r3, #1
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000666:	2303      	movs	r3, #3
 8000668:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CUR_SENS_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	4619      	mov	r1, r3
 8000670:	4820      	ldr	r0, [pc, #128]	@ (80006f4 <MX_GPIO_Init+0x130>)
 8000672:	f001 f9af 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DIR2_Pin DIR3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DIR2_Pin|DIR3_Pin;
 8000676:	f240 2312 	movw	r3, #530	@ 0x212
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2302      	movs	r3, #2
 8000686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4619      	mov	r1, r3
 800068e:	4819      	ldr	r0, [pc, #100]	@ (80006f4 <MX_GPIO_Init+0x130>)
 8000690:	f001 f9a0 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin;
 8000694:	23e0      	movs	r3, #224	@ 0xe0
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <MX_GPIO_Init+0x130>)
 80006a8:	f001 f994 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_Pin DIR4_Pin OUT2_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR4_Pin|OUT2_Pin|OUT1_Pin;
 80006ac:	f241 031a 	movw	r3, #4122	@ 0x101a
 80006b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <MX_GPIO_Init+0x134>)
 80006c6:	f001 f985 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN4_Pin */
  GPIO_InitStruct.Pin = IN4_Pin;
 80006ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN4_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_GPIO_Init+0x134>)
 80006e0:	f001 f978 	bl	80019d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40011000 	.word	0x40011000
 80006f4:	40010800 	.word	0x40010800
 80006f8:	40010c00 	.word	0x40010c00

080006fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f003 feeb 	bl	80044e0 <osDelay>
 800070a:	e7fb      	b.n	8000704 <StartDefaultTask+0x8>

0800070c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f003 fee3 	bl	80044e0 <osDelay>
 800071a:	e7fb      	b.n	8000714 <StartTask02+0x8>

0800071c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f003 fedb 	bl	80044e0 <osDelay>
 800072a:	e7fb      	b.n	8000724 <StartTask03+0x8>

0800072c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  
  // Initialize Modbus
  modbus_init();
 8000734:	f000 f8c6 	bl	80008c4 <modbus_init>
  
  // Debug: Blink LED1 to show modbus is initialized
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000738:	2102      	movs	r1, #2
 800073a:	4859      	ldr	r0, [pc, #356]	@ (80008a0 <StartTask04+0x174>)
 800073c:	f001 fae6 	bl	8001d0c <HAL_GPIO_TogglePin>
  osDelay(500);
 8000740:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000744:	f003 fecc 	bl	80044e0 <osDelay>
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000748:	2102      	movs	r1, #2
 800074a:	4855      	ldr	r0, [pc, #340]	@ (80008a0 <StartTask04+0x174>)
 800074c:	f001 fade 	bl	8001d0c <HAL_GPIO_TogglePin>
  
  // Debug: LED indicators for modbus status
  uint32_t modbus_heartbeat = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  uint32_t test_counter = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  
  /* Infinite loop */
  for(;;)
  {
    // Debug: Heartbeat LED every 1 second
    modbus_heartbeat++;
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	3301      	adds	r3, #1
 800075c:	61fb      	str	r3, [r7, #28]
    if (modbus_heartbeat >= 1000) { // 1000ms = 1 second
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000764:	d363      	bcc.n	800082e <StartTask04+0x102>
      HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); // Toggle LED2 for heartbeat
 8000766:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800076a:	484e      	ldr	r0, [pc, #312]	@ (80008a4 <StartTask04+0x178>)
 800076c:	f001 face 	bl	8001d0c <HAL_GPIO_TogglePin>
      modbus_heartbeat = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
      
      // Update test data every second
      test_counter++;
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	3301      	adds	r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
      modbus_write_register(0x0001, 45 + (test_counter % 10)); // Simulate motor speed change
 800077a:	69b9      	ldr	r1, [r7, #24]
 800077c:	4b4a      	ldr	r3, [pc, #296]	@ (80008a8 <StartTask04+0x17c>)
 800077e:	fba3 2301 	umull	r2, r3, r3, r1
 8000782:	08da      	lsrs	r2, r3, #3
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	1aca      	subs	r2, r1, r3
 800078e:	b293      	uxth	r3, r2
 8000790:	332d      	adds	r3, #45	@ 0x2d
 8000792:	b29b      	uxth	r3, r3
 8000794:	4619      	mov	r1, r3
 8000796:	2001      	movs	r0, #1
 8000798:	f000 f916 	bl	80009c8 <modbus_write_register>
      modbus_write_register(0x0011, 55 + (test_counter % 15)); // Simulate motor 2 speed change
 800079c:	69b9      	ldr	r1, [r7, #24]
 800079e:	4b43      	ldr	r3, [pc, #268]	@ (80008ac <StartTask04+0x180>)
 80007a0:	fba3 2301 	umull	r2, r3, r3, r1
 80007a4:	08da      	lsrs	r2, r3, #3
 80007a6:	4613      	mov	r3, r2
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	1aca      	subs	r2, r1, r3
 80007ae:	b293      	uxth	r3, r2
 80007b0:	3337      	adds	r3, #55	@ 0x37
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	4619      	mov	r1, r3
 80007b6:	2011      	movs	r0, #17
 80007b8:	f000 f906 	bl	80009c8 <modbus_write_register>
      
      // Update system status
      modbus_write_register(0x0022, 0x0001 | (test_counter & 0x000F)); // Status with counter
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	f003 030e 	and.w	r3, r3, #14
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	2022      	movs	r0, #34	@ 0x22
 80007d0:	f000 f8fa 	bl	80009c8 <modbus_write_register>
      
      // Debug: Print register values every 5 seconds
      if (test_counter % 5 == 0) {
 80007d4:	69b9      	ldr	r1, [r7, #24]
 80007d6:	4b34      	ldr	r3, [pc, #208]	@ (80008a8 <StartTask04+0x17c>)
 80007d8:	fba3 2301 	umull	r2, r3, r3, r1
 80007dc:	089a      	lsrs	r2, r3, #2
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	1aca      	subs	r2, r1, r3
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d121      	bne.n	800082e <StartTask04+0x102>
        // Read some registers to verify they're working
        uint16_t m1_target = modbus_read_register(0x0000);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f000 f8d6 	bl	800099c <modbus_read_register>
 80007f0:	4603      	mov	r3, r0
 80007f2:	82fb      	strh	r3, [r7, #22]
        uint16_t m1_current = modbus_read_register(0x0001);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f000 f8d1 	bl	800099c <modbus_read_register>
 80007fa:	4603      	mov	r3, r0
 80007fc:	82bb      	strh	r3, [r7, #20]
        uint16_t system_status = modbus_read_register(0x0022);
 80007fe:	2022      	movs	r0, #34	@ 0x22
 8000800:	f000 f8cc 	bl	800099c <modbus_read_register>
 8000804:	4603      	mov	r3, r0
 8000806:	827b      	strh	r3, [r7, #18]
        
        // If registers are readable, blink LED3 quickly
        if (m1_target == 50 && m1_current > 0) {
 8000808:	8afb      	ldrh	r3, [r7, #22]
 800080a:	2b32      	cmp	r3, #50	@ 0x32
 800080c:	d10f      	bne.n	800082e <StartTask04+0x102>
 800080e:	8abb      	ldrh	r3, [r7, #20]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00c      	beq.n	800082e <StartTask04+0x102>
          HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000814:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000818:	4822      	ldr	r0, [pc, #136]	@ (80008a4 <StartTask04+0x178>)
 800081a:	f001 fa77 	bl	8001d0c <HAL_GPIO_TogglePin>
          osDelay(50);
 800081e:	2032      	movs	r0, #50	@ 0x32
 8000820:	f003 fe5e 	bl	80044e0 <osDelay>
          HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000824:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000828:	481e      	ldr	r0, [pc, #120]	@ (80008a4 <StartTask04+0x178>)
 800082a:	f001 fa6f 	bl	8001d0c <HAL_GPIO_TogglePin>
    
    // Debug: Check if any modbus data was received (simple check)
    static uint16_t last_m1_target = 0;
    static uint16_t last_m2_target = 0;
    
    uint16_t current_m1_target = modbus_read_register(0x0000);
 800082e:	2000      	movs	r0, #0
 8000830:	f000 f8b4 	bl	800099c <modbus_read_register>
 8000834:	4603      	mov	r3, r0
 8000836:	823b      	strh	r3, [r7, #16]
    uint16_t current_m2_target = modbus_read_register(0x0010);
 8000838:	2010      	movs	r0, #16
 800083a:	f000 f8af 	bl	800099c <modbus_read_register>
 800083e:	4603      	mov	r3, r0
 8000840:	81fb      	strh	r3, [r7, #14]
    
    // If motor targets changed, blink LED3 to show modbus write worked
    if (current_m1_target != last_m1_target) {
 8000842:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <StartTask04+0x184>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	8a3a      	ldrh	r2, [r7, #16]
 8000848:	429a      	cmp	r2, r3
 800084a:	d00f      	beq.n	800086c <StartTask04+0x140>
      HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800084c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000850:	4814      	ldr	r0, [pc, #80]	@ (80008a4 <StartTask04+0x178>)
 8000852:	f001 fa5b 	bl	8001d0c <HAL_GPIO_TogglePin>
      osDelay(100);
 8000856:	2064      	movs	r0, #100	@ 0x64
 8000858:	f003 fe42 	bl	80044e0 <osDelay>
      HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800085c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000860:	4810      	ldr	r0, [pc, #64]	@ (80008a4 <StartTask04+0x178>)
 8000862:	f001 fa53 	bl	8001d0c <HAL_GPIO_TogglePin>
      last_m1_target = current_m1_target;
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <StartTask04+0x184>)
 8000868:	8a3b      	ldrh	r3, [r7, #16]
 800086a:	8013      	strh	r3, [r2, #0]
    }
    
    if (current_m2_target != last_m2_target) {
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <StartTask04+0x188>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	89fa      	ldrh	r2, [r7, #14]
 8000872:	429a      	cmp	r2, r3
 8000874:	d00f      	beq.n	8000896 <StartTask04+0x16a>
      HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000876:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087a:	480a      	ldr	r0, [pc, #40]	@ (80008a4 <StartTask04+0x178>)
 800087c:	f001 fa46 	bl	8001d0c <HAL_GPIO_TogglePin>
      osDelay(100);
 8000880:	2064      	movs	r0, #100	@ 0x64
 8000882:	f003 fe2d 	bl	80044e0 <osDelay>
      HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000886:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800088a:	4806      	ldr	r0, [pc, #24]	@ (80008a4 <StartTask04+0x178>)
 800088c:	f001 fa3e 	bl	8001d0c <HAL_GPIO_TogglePin>
      last_m2_target = current_m2_target;
 8000890:	4a08      	ldr	r2, [pc, #32]	@ (80008b4 <StartTask04+0x188>)
 8000892:	89fb      	ldrh	r3, [r7, #14]
 8000894:	8013      	strh	r3, [r2, #0]
    }
    
    osDelay(1);
 8000896:	2001      	movs	r0, #1
 8000898:	f003 fe22 	bl	80044e0 <osDelay>
  {
 800089c:	e75c      	b.n	8000758 <StartTask04+0x2c>
 800089e:	bf00      	nop
 80008a0:	40010800 	.word	0x40010800
 80008a4:	40011000 	.word	0x40011000
 80008a8:	cccccccd 	.word	0xcccccccd
 80008ac:	88888889 	.word	0x88888889
 80008b0:	20000248 	.word	0x20000248
 80008b4:	2000024a 	.word	0x2000024a

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <modbus_init>:
static void send_response(uint8_t *data, uint16_t len);
static void send_exception(uint8_t address, uint8_t function, uint8_t exception);
static bool validate_register_range(uint16_t start_addr, uint16_t quantity);
static void reset_rx_buffer(void);

void modbus_init(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
    // Initialize port layer
    modbus_port_init();
 80008c8:	f000 fb6e 	bl	8000fa8 <modbus_port_init>
    
    // Clear all registers
    memset(holding_registers, 0, sizeof(holding_registers));
 80008cc:	2280      	movs	r2, #128	@ 0x80
 80008ce:	2100      	movs	r1, #0
 80008d0:	4814      	ldr	r0, [pc, #80]	@ (8000924 <modbus_init+0x60>)
 80008d2:	f006 fa69 	bl	8006da8 <memset>
    
    // Reset state
    reset_rx_buffer();
 80008d6:	f000 f88f 	bl	80009f8 <reset_rx_buffer>
    status = MODBUS_OK;
 80008da:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <modbus_init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
    rx_count = 0;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <modbus_init+0x68>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	801a      	strh	r2, [r3, #0]
    tx_count = 0;
 80008e6:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <modbus_init+0x6c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	801a      	strh	r2, [r3, #0]
    
    // Set default values for testing
    holding_registers[0x0000] = 50;   // Motor 1 Target Speed
 80008ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <modbus_init+0x60>)
 80008ee:	2232      	movs	r2, #50	@ 0x32
 80008f0:	801a      	strh	r2, [r3, #0]
    holding_registers[0x0001] = 45;   // Motor 1 Current Speed
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <modbus_init+0x60>)
 80008f4:	222d      	movs	r2, #45	@ 0x2d
 80008f6:	805a      	strh	r2, [r3, #2]
    holding_registers[0x0002] = 1;    // Motor 1 Direction
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <modbus_init+0x60>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	809a      	strh	r2, [r3, #4]
    holding_registers[0x0010] = 60;   // Motor 2 Target Speed
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <modbus_init+0x60>)
 8000900:	223c      	movs	r2, #60	@ 0x3c
 8000902:	841a      	strh	r2, [r3, #32]
    holding_registers[0x0011] = 55;   // Motor 2 Current Speed
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <modbus_init+0x60>)
 8000906:	2237      	movs	r2, #55	@ 0x37
 8000908:	845a      	strh	r2, [r3, #34]	@ 0x22
    holding_registers[0x0020] = 0x1234; // Device ID
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <modbus_init+0x60>)
 800090c:	f241 2234 	movw	r2, #4660	@ 0x1234
 8000910:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    holding_registers[0x0021] = 0x0100; // Firmware Version
 8000914:	4b03      	ldr	r3, [pc, #12]	@ (8000924 <modbus_init+0x60>)
 8000916:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800091a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000350 	.word	0x20000350
 8000928:	200003d0 	.word	0x200003d0
 800092c:	200003d2 	.word	0x200003d2
 8000930:	200003d4 	.word	0x200003d4

08000934 <modbus_receive_byte>:

void modbus_receive_byte(uint8_t byte) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
    // Add byte to buffer
    if (rx_index < MODBUS_BUFFER_SIZE) {
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <modbus_receive_byte+0x40>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	2bff      	cmp	r3, #255	@ 0xff
 8000944:	d811      	bhi.n	800096a <modbus_receive_byte+0x36>
        rx_buffer[rx_index++] = byte;
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <modbus_receive_byte+0x40>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	b291      	uxth	r1, r2
 800094e:	4a09      	ldr	r2, [pc, #36]	@ (8000974 <modbus_receive_byte+0x40>)
 8000950:	8011      	strh	r1, [r2, #0]
 8000952:	4619      	mov	r1, r3
 8000954:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <modbus_receive_byte+0x44>)
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	5453      	strb	r3, [r2, r1]
        rx_count++;
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <modbus_receive_byte+0x48>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b29a      	uxth	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <modbus_receive_byte+0x48>)
 8000964:	801a      	strh	r2, [r3, #0]
        
        // Start/reset timeout timer
        modbus_port_start_timer();
 8000966:	f000 fb83 	bl	8001070 <modbus_port_start_timer>
    }
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000034c 	.word	0x2000034c
 8000978:	2000024c 	.word	0x2000024c
 800097c:	200003d2 	.word	0x200003d2

08000980 <modbus_handle_timeout>:

void modbus_handle_timeout(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    // Process frame if we have enough data
    if (rx_index >= 4) {
 8000984:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <modbus_handle_timeout+0x18>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d901      	bls.n	8000990 <modbus_handle_timeout+0x10>
        process_frame();
 800098c:	f000 f8c8 	bl	8000b20 <process_frame>
    }
    
    // Reset for next frame
    reset_rx_buffer();
 8000990:	f000 f832 	bl	80009f8 <reset_rx_buffer>
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000034c 	.word	0x2000034c

0800099c <modbus_read_register>:

uint16_t modbus_read_register(uint16_t address) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]
    if (address < MODBUS_MAX_REGISTERS) {
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80009aa:	d804      	bhi.n	80009b6 <modbus_read_register+0x1a>
        return holding_registers[address];
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <modbus_read_register+0x28>)
 80009b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009b4:	e000      	b.n	80009b8 <modbus_read_register+0x1c>
    }
    return 0;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000350 	.word	0x20000350

080009c8 <modbus_write_register>:

void modbus_write_register(uint16_t address, uint16_t value) {
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	460a      	mov	r2, r1
 80009d2:	80fb      	strh	r3, [r7, #6]
 80009d4:	4613      	mov	r3, r2
 80009d6:	80bb      	strh	r3, [r7, #4]
    if (address < MODBUS_MAX_REGISTERS) {
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	2b3f      	cmp	r3, #63	@ 0x3f
 80009dc:	d804      	bhi.n	80009e8 <modbus_write_register+0x20>
        holding_registers[address] = value;
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	4904      	ldr	r1, [pc, #16]	@ (80009f4 <modbus_write_register+0x2c>)
 80009e2:	88ba      	ldrh	r2, [r7, #4]
 80009e4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000350 	.word	0x20000350

080009f8 <reset_rx_buffer>:
uint16_t modbus_get_tx_count(void) {
    return tx_count;
}

// Internal functions
static void reset_rx_buffer(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
    rx_index = 0;
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <reset_rx_buffer+0x1c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, MODBUS_BUFFER_SIZE);
 8000a02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a06:	2100      	movs	r1, #0
 8000a08:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <reset_rx_buffer+0x20>)
 8000a0a:	f006 f9cd 	bl	8006da8 <memset>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000034c 	.word	0x2000034c
 8000a18:	2000024c 	.word	0x2000024c

08000a1c <validate_register_range>:

static bool validate_register_range(uint16_t start_addr, uint16_t quantity) {
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	460a      	mov	r2, r1
 8000a26:	80fb      	strh	r3, [r7, #6]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	80bb      	strh	r3, [r7, #4]
    // Check bounds
    if (start_addr >= MODBUS_MAX_REGISTERS || 
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a30:	d80a      	bhi.n	8000a48 <validate_register_range+0x2c>
 8000a32:	88bb      	ldrh	r3, [r7, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d007      	beq.n	8000a48 <validate_register_range+0x2c>
        quantity == 0 || 
 8000a38:	88bb      	ldrh	r3, [r7, #4]
 8000a3a:	2b40      	cmp	r3, #64	@ 0x40
 8000a3c:	d804      	bhi.n	8000a48 <validate_register_range+0x2c>
        quantity > MODBUS_MAX_REGISTERS ||
        start_addr + quantity > MODBUS_MAX_REGISTERS) {
 8000a3e:	88fa      	ldrh	r2, [r7, #6]
 8000a40:	88bb      	ldrh	r3, [r7, #4]
 8000a42:	4413      	add	r3, r2
        quantity > MODBUS_MAX_REGISTERS ||
 8000a44:	2b40      	cmp	r3, #64	@ 0x40
 8000a46:	dd01      	ble.n	8000a4c <validate_register_range+0x30>
        return false;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e015      	b.n	8000a78 <validate_register_range+0x5c>
    }
    
    // Check valid ranges
    if (start_addr >= 0x0000 && start_addr < 0x0010) {
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	2b0f      	cmp	r3, #15
 8000a50:	d801      	bhi.n	8000a56 <validate_register_range+0x3a>
        return true; // Motor 1 registers
 8000a52:	2301      	movs	r3, #1
 8000a54:	e010      	b.n	8000a78 <validate_register_range+0x5c>
    } else if (start_addr >= 0x0010 && start_addr < 0x0020) {
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d904      	bls.n	8000a66 <validate_register_range+0x4a>
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	2b1f      	cmp	r3, #31
 8000a60:	d801      	bhi.n	8000a66 <validate_register_range+0x4a>
        return true; // Motor 2 registers
 8000a62:	2301      	movs	r3, #1
 8000a64:	e008      	b.n	8000a78 <validate_register_range+0x5c>
    } else if (start_addr >= 0x0020 && start_addr < 0x0030) {
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	2b1f      	cmp	r3, #31
 8000a6a:	d904      	bls.n	8000a76 <validate_register_range+0x5a>
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a70:	d801      	bhi.n	8000a76 <validate_register_range+0x5a>
        return true; // System registers
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <validate_register_range+0x5c>
    }
    
    return false;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
	...

08000a84 <send_response>:

static void send_response(uint8_t *data, uint16_t len) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
    // Calculate CRC
    uint16_t crc = modbus_crc16(data, len);
 8000a90:	887b      	ldrh	r3, [r7, #2]
 8000a92:	4619      	mov	r1, r3
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 fa49 	bl	8000f2c <modbus_crc16>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	81fb      	strh	r3, [r7, #14]
    
    // Add CRC to response
    data[len++] = crc & 0xFF;        // CRC Low byte
 8000a9e:	887b      	ldrh	r3, [r7, #2]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	807a      	strh	r2, [r7, #2]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	89fa      	ldrh	r2, [r7, #14]
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	701a      	strb	r2, [r3, #0]
    data[len++] = (crc >> 8) & 0xFF; // CRC High byte
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	1c59      	adds	r1, r3, #1
 8000aba:	8079      	strh	r1, [r7, #2]
 8000abc:	4619      	mov	r1, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	440b      	add	r3, r1
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	701a      	strb	r2, [r3, #0]
    
    // Send via port layer
    modbus_port_send(data, len);
 8000ac6:	887b      	ldrh	r3, [r7, #2]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 fa98 	bl	8001000 <modbus_port_send>
    tx_count++;
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <send_response+0x60>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	4b02      	ldr	r3, [pc, #8]	@ (8000ae4 <send_response+0x60>)
 8000ada:	801a      	strh	r2, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200003d4 	.word	0x200003d4

08000ae8 <send_exception>:

static void send_exception(uint8_t address, uint8_t function, uint8_t exception) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	460b      	mov	r3, r1
 8000af4:	71bb      	strb	r3, [r7, #6]
 8000af6:	4613      	mov	r3, r2
 8000af8:	717b      	strb	r3, [r7, #5]
    uint8_t response[5];
    response[0] = address;
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	723b      	strb	r3, [r7, #8]
    response[1] = function | 0x80;  // Set MSB for exception
 8000afe:	79bb      	ldrb	r3, [r7, #6]
 8000b00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	727b      	strb	r3, [r7, #9]
    response[2] = exception;
 8000b08:	797b      	ldrb	r3, [r7, #5]
 8000b0a:	72bb      	strb	r3, [r7, #10]
    
    send_response(response, 3);
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	2103      	movs	r1, #3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ffb6 	bl	8000a84 <send_response>
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <process_frame>:

static void process_frame(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0ca      	sub	sp, #296	@ 0x128
 8000b24:	af00      	add	r7, sp, #0
    // Check minimum frame length
    if (rx_index < 4) {
 8000b26:	4bb4      	ldr	r3, [pc, #720]	@ (8000df8 <process_frame+0x2d8>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d803      	bhi.n	8000b36 <process_frame+0x16>
        status = MODBUS_ERROR_FRAME;
 8000b2e:	4bb3      	ldr	r3, [pc, #716]	@ (8000dfc <process_frame+0x2dc>)
 8000b30:	2203      	movs	r2, #3
 8000b32:	701a      	strb	r2, [r3, #0]
        return;
 8000b34:	e1f2      	b.n	8000f1c <process_frame+0x3fc>
    }
    
    // Extract address and function
    uint8_t address = rx_buffer[0];
 8000b36:	4bb2      	ldr	r3, [pc, #712]	@ (8000e00 <process_frame+0x2e0>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
    uint8_t function = rx_buffer[1];
 8000b3e:	4bb0      	ldr	r3, [pc, #704]	@ (8000e00 <process_frame+0x2e0>)
 8000b40:	785b      	ldrb	r3, [r3, #1]
 8000b42:	f887 3122 	strb.w	r3, [r7, #290]	@ 0x122
    
    // Check slave address
    if (address != MODBUS_SLAVE_ADDRESS) {
 8000b46:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d003      	beq.n	8000b56 <process_frame+0x36>
        status = MODBUS_ERROR_ADDRESS;
 8000b4e:	4bab      	ldr	r3, [pc, #684]	@ (8000dfc <process_frame+0x2dc>)
 8000b50:	2204      	movs	r2, #4
 8000b52:	701a      	strb	r2, [r3, #0]
        return;
 8000b54:	e1e2      	b.n	8000f1c <process_frame+0x3fc>
    }
    
    // Verify CRC
    uint16_t received_crc = rx_buffer[rx_index - 2] | (rx_buffer[rx_index - 1] << 8);
 8000b56:	4ba8      	ldr	r3, [pc, #672]	@ (8000df8 <process_frame+0x2d8>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	3b02      	subs	r3, #2
 8000b5c:	4aa8      	ldr	r2, [pc, #672]	@ (8000e00 <process_frame+0x2e0>)
 8000b5e:	5cd3      	ldrb	r3, [r2, r3]
 8000b60:	b21a      	sxth	r2, r3
 8000b62:	4ba5      	ldr	r3, [pc, #660]	@ (8000df8 <process_frame+0x2d8>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	49a5      	ldr	r1, [pc, #660]	@ (8000e00 <process_frame+0x2e0>)
 8000b6a:	5ccb      	ldrb	r3, [r1, r3]
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	021b      	lsls	r3, r3, #8
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
    uint16_t calculated_crc = modbus_crc16(rx_buffer, rx_index - 2);
 8000b7a:	4b9f      	ldr	r3, [pc, #636]	@ (8000df8 <process_frame+0x2d8>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	3b02      	subs	r3, #2
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	4619      	mov	r1, r3
 8000b84:	489e      	ldr	r0, [pc, #632]	@ (8000e00 <process_frame+0x2e0>)
 8000b86:	f000 f9d1 	bl	8000f2c <modbus_crc16>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
    
    if (received_crc != calculated_crc) {
 8000b90:	f8b7 2120 	ldrh.w	r2, [r7, #288]	@ 0x120
 8000b94:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d003      	beq.n	8000ba4 <process_frame+0x84>
        status = MODBUS_ERROR_CRC;
 8000b9c:	4b97      	ldr	r3, [pc, #604]	@ (8000dfc <process_frame+0x2dc>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	701a      	strb	r2, [r3, #0]
        return;
 8000ba2:	e1bb      	b.n	8000f1c <process_frame+0x3fc>
    }
    
    // Process by function code
    switch (function) {
 8000ba4:	f897 3122 	ldrb.w	r3, [r7, #290]	@ 0x122
 8000ba8:	2b10      	cmp	r3, #16
 8000baa:	f000 80eb 	beq.w	8000d84 <process_frame+0x264>
 8000bae:	2b10      	cmp	r3, #16
 8000bb0:	f300 81a8 	bgt.w	8000f04 <process_frame+0x3e4>
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d003      	beq.n	8000bc0 <process_frame+0xa0>
 8000bb8:	2b06      	cmp	r3, #6
 8000bba:	f000 8099 	beq.w	8000cf0 <process_frame+0x1d0>
 8000bbe:	e1a1      	b.n	8000f04 <process_frame+0x3e4>
        case MODBUS_FC_READ_HOLDING_REGISTERS: {
            if (rx_index < 8) {
 8000bc0:	4b8d      	ldr	r3, [pc, #564]	@ (8000df8 <process_frame+0x2d8>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	2b07      	cmp	r3, #7
 8000bc6:	d808      	bhi.n	8000bda <process_frame+0xba>
                send_exception(address, function, MODBUS_EX_ILLEGAL_DATA_VALUE);
 8000bc8:	f897 1122 	ldrb.w	r1, [r7, #290]	@ 0x122
 8000bcc:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff88 	bl	8000ae8 <send_exception>
                return;
 8000bd8:	e1a0      	b.n	8000f1c <process_frame+0x3fc>
            }
            
            uint16_t start_addr = (rx_buffer[2] << 8) | rx_buffer[3];
 8000bda:	4b89      	ldr	r3, [pc, #548]	@ (8000e00 <process_frame+0x2e0>)
 8000bdc:	789b      	ldrb	r3, [r3, #2]
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	4b86      	ldr	r3, [pc, #536]	@ (8000e00 <process_frame+0x2e0>)
 8000be6:	78db      	ldrb	r3, [r3, #3]
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            uint16_t quantity = (rx_buffer[4] << 8) | rx_buffer[5];
 8000bf2:	4b83      	ldr	r3, [pc, #524]	@ (8000e00 <process_frame+0x2e0>)
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b21a      	sxth	r2, r3
 8000bfc:	4b80      	ldr	r3, [pc, #512]	@ (8000e00 <process_frame+0x2e0>)
 8000bfe:	795b      	ldrb	r3, [r3, #5]
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
            
            if (!validate_register_range(start_addr, quantity)) {
 8000c0a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8000c0e:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff01 	bl	8000a1c <validate_register_range>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	f083 0301 	eor.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d008      	beq.n	8000c38 <process_frame+0x118>
                send_exception(address, function, MODBUS_EX_ILLEGAL_DATA_ADDRESS);
 8000c26:	f897 1122 	ldrb.w	r1, [r7, #290]	@ 0x122
 8000c2a:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8000c2e:	2202      	movs	r2, #2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff59 	bl	8000ae8 <send_exception>
                return;
 8000c36:	e171      	b.n	8000f1c <process_frame+0x3fc>
            }
            
            // Prepare response
            uint8_t response[MODBUS_BUFFER_SIZE];
            response[0] = address;
 8000c38:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000c3c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000c40:	f897 2123 	ldrb.w	r2, [r7, #291]	@ 0x123
 8000c44:	701a      	strb	r2, [r3, #0]
            response[1] = function;
 8000c46:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000c4a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000c4e:	f897 2122 	ldrb.w	r2, [r7, #290]	@ 0x122
 8000c52:	705a      	strb	r2, [r3, #1]
            response[2] = quantity * 2;  // Byte count
 8000c54:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000c62:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000c66:	709a      	strb	r2, [r3, #2]
            
            // Add register values
            for (uint16_t i = 0; i < quantity; i++) {
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
 8000c6e:	e02a      	b.n	8000cc6 <process_frame+0x1a6>
                uint16_t value = modbus_read_register(start_addr + i);
 8000c70:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8000c74:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8000c78:	4413      	add	r3, r2
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fe8d 	bl	800099c <modbus_read_register>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
                response[3 + i * 2] = value >> 8;     // High byte
 8000c88:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	3303      	adds	r3, #3
 8000c98:	b2d1      	uxtb	r1, r2
 8000c9a:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000c9e:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8000ca2:	54d1      	strb	r1, [r2, r3]
                response[4 + i * 2] = value & 0xFF;   // Low byte
 8000ca4:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8000ca8:	3302      	adds	r3, #2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	f8b7 210c 	ldrh.w	r2, [r7, #268]	@ 0x10c
 8000cb0:	b2d1      	uxtb	r1, r2
 8000cb2:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000cb6:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8000cba:	54d1      	strb	r1, [r2, r3]
            for (uint16_t i = 0; i < quantity; i++) {
 8000cbc:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
 8000cc6:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8000cca:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d3ce      	bcc.n	8000c70 <process_frame+0x150>
            }
            
            send_response(response, 3 + quantity * 2);
 8000cd2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	3303      	adds	r3, #3
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fece 	bl	8000a84 <send_response>
            status = MODBUS_OK;
 8000ce8:	4b44      	ldr	r3, [pc, #272]	@ (8000dfc <process_frame+0x2dc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e115      	b.n	8000f1c <process_frame+0x3fc>
            break;
        }
        
        case MODBUS_FC_WRITE_SINGLE_REGISTER: {
            if (rx_index < 8) {
 8000cf0:	4b41      	ldr	r3, [pc, #260]	@ (8000df8 <process_frame+0x2d8>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	2b07      	cmp	r3, #7
 8000cf6:	d808      	bhi.n	8000d0a <process_frame+0x1ea>
                send_exception(address, function, MODBUS_EX_ILLEGAL_DATA_VALUE);
 8000cf8:	f897 1122 	ldrb.w	r1, [r7, #290]	@ 0x122
 8000cfc:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8000d00:	2203      	movs	r2, #3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fef0 	bl	8000ae8 <send_exception>
                return;
 8000d08:	e108      	b.n	8000f1c <process_frame+0x3fc>
            }
            
            uint16_t reg_addr = (rx_buffer[2] << 8) | rx_buffer[3];
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e00 <process_frame+0x2e0>)
 8000d0c:	789b      	ldrb	r3, [r3, #2]
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	b21a      	sxth	r2, r3
 8000d14:	4b3a      	ldr	r3, [pc, #232]	@ (8000e00 <process_frame+0x2e0>)
 8000d16:	78db      	ldrb	r3, [r3, #3]
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            uint16_t value = (rx_buffer[4] << 8) | rx_buffer[5];
 8000d22:	4b37      	ldr	r3, [pc, #220]	@ (8000e00 <process_frame+0x2e0>)
 8000d24:	791b      	ldrb	r3, [r3, #4]
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	4b34      	ldr	r3, [pc, #208]	@ (8000e00 <process_frame+0x2e0>)
 8000d2e:	795b      	ldrb	r3, [r3, #5]
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
            
            if (!validate_register_range(reg_addr, 1)) {
 8000d3a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 8000d3e:	2101      	movs	r1, #1
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fe6b 	bl	8000a1c <validate_register_range>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f083 0301 	eor.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d008      	beq.n	8000d64 <process_frame+0x244>
                send_exception(address, function, MODBUS_EX_ILLEGAL_DATA_ADDRESS);
 8000d52:	f897 1122 	ldrb.w	r1, [r7, #290]	@ 0x122
 8000d56:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fec3 	bl	8000ae8 <send_exception>
                return;
 8000d62:	e0db      	b.n	8000f1c <process_frame+0x3fc>
            }
            
            // Write register
            modbus_write_register(reg_addr, value);
 8000d64:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 8000d68:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fe2a 	bl	80009c8 <modbus_write_register>
            
            // Echo the request as response
            send_response(rx_buffer, 6);
 8000d74:	2106      	movs	r1, #6
 8000d76:	4822      	ldr	r0, [pc, #136]	@ (8000e00 <process_frame+0x2e0>)
 8000d78:	f7ff fe84 	bl	8000a84 <send_response>
            status = MODBUS_OK;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <process_frame+0x2dc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
            break;
 8000d82:	e0cb      	b.n	8000f1c <process_frame+0x3fc>
        }
        
        case MODBUS_FC_WRITE_MULTIPLE_REGISTERS: {
            if (rx_index < 9) {
 8000d84:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <process_frame+0x2d8>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d808      	bhi.n	8000d9e <process_frame+0x27e>
                send_exception(address, function, MODBUS_EX_ILLEGAL_DATA_VALUE);
 8000d8c:	f897 1122 	ldrb.w	r1, [r7, #290]	@ 0x122
 8000d90:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8000d94:	2203      	movs	r2, #3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fea6 	bl	8000ae8 <send_exception>
                return;
 8000d9c:	e0be      	b.n	8000f1c <process_frame+0x3fc>
            }
            
            uint16_t start_addr = (rx_buffer[2] << 8) | rx_buffer[3];
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <process_frame+0x2e0>)
 8000da0:	789b      	ldrb	r3, [r3, #2]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <process_frame+0x2e0>)
 8000daa:	78db      	ldrb	r3, [r3, #3]
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
            uint16_t quantity = (rx_buffer[4] << 8) | rx_buffer[5];
 8000db6:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <process_frame+0x2e0>)
 8000db8:	791b      	ldrb	r3, [r3, #4]
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <process_frame+0x2e0>)
 8000dc2:	795b      	ldrb	r3, [r3, #5]
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
            uint8_t byte_count = rx_buffer[6];
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <process_frame+0x2e0>)
 8000dd0:	799b      	ldrb	r3, [r3, #6]
 8000dd2:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
            
            // Validate frame length
            if (rx_index != 9 + byte_count) {
 8000dd6:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <process_frame+0x2d8>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8000de0:	3309      	adds	r3, #9
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d00e      	beq.n	8000e04 <process_frame+0x2e4>
                send_exception(address, function, MODBUS_EX_ILLEGAL_DATA_VALUE);
 8000de6:	f897 1122 	ldrb.w	r1, [r7, #290]	@ 0x122
 8000dea:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8000dee:	2203      	movs	r2, #3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fe79 	bl	8000ae8 <send_exception>
                return;
 8000df6:	e091      	b.n	8000f1c <process_frame+0x3fc>
 8000df8:	2000034c 	.word	0x2000034c
 8000dfc:	200003d0 	.word	0x200003d0
 8000e00:	2000024c 	.word	0x2000024c
            }
            
            // Validate register range
            if (!validate_register_range(start_addr, quantity)) {
 8000e04:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8000e08:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fe04 	bl	8000a1c <validate_register_range>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f083 0301 	eor.w	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d008      	beq.n	8000e32 <process_frame+0x312>
                send_exception(address, function, MODBUS_EX_ILLEGAL_DATA_ADDRESS);
 8000e20:	f897 1122 	ldrb.w	r1, [r7, #290]	@ 0x122
 8000e24:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8000e28:	2202      	movs	r2, #2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fe5c 	bl	8000ae8 <send_exception>
                return;
 8000e30:	e074      	b.n	8000f1c <process_frame+0x3fc>
            }
            
            // Validate byte count
            if (byte_count != quantity * 2) {
 8000e32:	f897 2119 	ldrb.w	r2, [r7, #281]	@ 0x119
 8000e36:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d008      	beq.n	8000e52 <process_frame+0x332>
                send_exception(address, function, MODBUS_EX_ILLEGAL_DATA_VALUE);
 8000e40:	f897 1122 	ldrb.w	r1, [r7, #290]	@ 0x122
 8000e44:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8000e48:	2203      	movs	r2, #3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fe4c 	bl	8000ae8 <send_exception>
                return;
 8000e50:	e064      	b.n	8000f1c <process_frame+0x3fc>
            }
            
            // Write registers
            for (uint16_t i = 0; i < quantity; i++) {
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
 8000e58:	e024      	b.n	8000ea4 <process_frame+0x384>
                uint16_t value = (rx_buffer[7 + i * 2] << 8) | rx_buffer[8 + i * 2];
 8000e5a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	3307      	adds	r3, #7
 8000e62:	4a30      	ldr	r2, [pc, #192]	@ (8000f24 <process_frame+0x404>)
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8000e70:	3304      	adds	r3, #4
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	492b      	ldr	r1, [pc, #172]	@ (8000f24 <process_frame+0x404>)
 8000e76:	5ccb      	ldrb	r3, [r1, r3]
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
                modbus_write_register(start_addr + i, value);
 8000e82:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 8000e86:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fd97 	bl	80009c8 <modbus_write_register>
            for (uint16_t i = 0; i < quantity; i++) {
 8000e9a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
 8000ea4:	f8b7 2124 	ldrh.w	r2, [r7, #292]	@ 0x124
 8000ea8:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d3d4      	bcc.n	8000e5a <process_frame+0x33a>
            }
            
            // Send response
            uint8_t response[6];
            response[0] = address;
 8000eb0:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8000eb4:	f887 3104 	strb.w	r3, [r7, #260]	@ 0x104
            response[1] = function;
 8000eb8:	f897 3122 	ldrb.w	r3, [r7, #290]	@ 0x122
 8000ebc:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
            response[2] = start_addr >> 8;
 8000ec0:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
            response[3] = start_addr & 0xFF;
 8000ece:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            response[4] = quantity >> 8;
 8000ed8:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f887 3108 	strb.w	r3, [r7, #264]	@ 0x108
            response[5] = quantity & 0xFF;
 8000ee6:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
            
            send_response(response, 6);
 8000ef0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000ef4:	2106      	movs	r1, #6
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fdc4 	bl	8000a84 <send_response>
            status = MODBUS_OK;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <process_frame+0x408>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	e00b      	b.n	8000f1c <process_frame+0x3fc>
            break;
        }
        
        default:
            send_exception(address, function, MODBUS_EX_ILLEGAL_FUNCTION);
 8000f04:	f897 1122 	ldrb.w	r1, [r7, #290]	@ 0x122
 8000f08:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fdea 	bl	8000ae8 <send_exception>
            status = MODBUS_ERROR_FRAME;
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <process_frame+0x408>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	701a      	strb	r2, [r3, #0]
            break;
 8000f1a:	bf00      	nop
    }
 8000f1c:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000024c 	.word	0x2000024c
 8000f28:	200003d0 	.word	0x200003d0

08000f2c <modbus_crc16>:

#include "modbus_crc.h"

// CRC-16 Modbus (poly: 0xA001, init: 0xFFFF)
uint16_t modbus_crc16(const uint8_t *data, uint16_t length)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000f38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f3c:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < length; i++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	81bb      	strh	r3, [r7, #12]
 8000f42:	e026      	b.n	8000f92 <modbus_crc16+0x66>
        crc ^= data[i];
 8000f44:	89bb      	ldrh	r3, [r7, #12]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	89fb      	ldrh	r3, [r7, #14]
 8000f50:	4053      	eors	r3, r2
 8000f52:	81fb      	strh	r3, [r7, #14]

        for (uint8_t j = 0; j < 8; j++) {
 8000f54:	2300      	movs	r3, #0
 8000f56:	72fb      	strb	r3, [r7, #11]
 8000f58:	e015      	b.n	8000f86 <modbus_crc16+0x5a>
            if (crc & 0x0001) {
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00a      	beq.n	8000f7a <modbus_crc16+0x4e>
                crc >>= 1;
 8000f64:	89fb      	ldrh	r3, [r7, #14]
 8000f66:	085b      	lsrs	r3, r3, #1
 8000f68:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 8000f6a:	89fb      	ldrh	r3, [r7, #14]
 8000f6c:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8000f70:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8000f74:	43db      	mvns	r3, r3
 8000f76:	81fb      	strh	r3, [r7, #14]
 8000f78:	e002      	b.n	8000f80 <modbus_crc16+0x54>
            } else {
                crc >>= 1;
 8000f7a:	89fb      	ldrh	r3, [r7, #14]
 8000f7c:	085b      	lsrs	r3, r3, #1
 8000f7e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000f80:	7afb      	ldrb	r3, [r7, #11]
 8000f82:	3301      	adds	r3, #1
 8000f84:	72fb      	strb	r3, [r7, #11]
 8000f86:	7afb      	ldrb	r3, [r7, #11]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	d9e6      	bls.n	8000f5a <modbus_crc16+0x2e>
    for (uint16_t i = 0; i < length; i++) {
 8000f8c:	89bb      	ldrh	r3, [r7, #12]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	81bb      	strh	r3, [r7, #12]
 8000f92:	89ba      	ldrh	r2, [r7, #12]
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d3d4      	bcc.n	8000f44 <modbus_crc16+0x18>
            }
        }
    }

    return crc;
 8000f9a:	89fb      	ldrh	r3, [r7, #14]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
	...

08000fa8 <modbus_port_init>:
static bool timer_running = false;
static uint8_t uart_rx_byte = 0;

// MODBUS PORT LAYER IMPLEMENTATION

void modbus_port_init(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
    // Clear timer counter
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <modbus_port_init+0x48>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	@ 0x24
    
    // Start UART receive interrupt
    HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	490e      	ldr	r1, [pc, #56]	@ (8000ff4 <modbus_port_init+0x4c>)
 8000fba:	480f      	ldr	r0, [pc, #60]	@ (8000ff8 <modbus_port_init+0x50>)
 8000fbc:	f002 fbfa 	bl	80037b4 <HAL_UART_Receive_IT>
    
    // Debug: Blink LED1 to show initialization
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	480e      	ldr	r0, [pc, #56]	@ (8000ffc <modbus_port_init+0x54>)
 8000fc4:	f000 fea2 	bl	8001d0c <HAL_GPIO_TogglePin>
    for(volatile int i = 0; i < 10000; i++);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	e002      	b.n	8000fd4 <modbus_port_init+0x2c>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	ddf7      	ble.n	8000fce <modbus_port_init+0x26>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <modbus_port_init+0x54>)
 8000fe2:	f000 fe93 	bl	8001d0c <HAL_GPIO_TogglePin>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000118 	.word	0x20000118
 8000ff4:	200003d7 	.word	0x200003d7
 8000ff8:	200001f0 	.word	0x200001f0
 8000ffc:	40010800 	.word	0x40010800

08001000 <modbus_port_send>:

void modbus_port_send(uint8_t *data, uint16_t len) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
    // Stop timer during transmission
    modbus_port_stop_timer();
 800100c:	f000 f84a 	bl	80010a4 <modbus_port_stop_timer>
    
    // Send data via UART
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, data, len, 50);
 8001010:	887a      	ldrh	r2, [r7, #2]
 8001012:	2332      	movs	r3, #50	@ 0x32
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4813      	ldr	r0, [pc, #76]	@ (8001064 <modbus_port_send+0x64>)
 8001018:	f002 fb41 	bl	800369e <HAL_UART_Transmit>
 800101c:	4603      	mov	r3, r0
 800101e:	73fb      	strb	r3, [r7, #15]
    
    // Restart UART receive
    HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8001020:	2201      	movs	r2, #1
 8001022:	4911      	ldr	r1, [pc, #68]	@ (8001068 <modbus_port_send+0x68>)
 8001024:	480f      	ldr	r0, [pc, #60]	@ (8001064 <modbus_port_send+0x64>)
 8001026:	f002 fbc5 	bl	80037b4 <HAL_UART_Receive_IT>
    
    // Debug: Blink LED2 on successful transmission
    if (status == HAL_OK) {
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d114      	bne.n	800105a <modbus_port_send+0x5a>
        HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001030:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001034:	480d      	ldr	r0, [pc, #52]	@ (800106c <modbus_port_send+0x6c>)
 8001036:	f000 fe69 	bl	8001d0c <HAL_GPIO_TogglePin>
        for(volatile int i = 0; i < 5000; i++);
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	e002      	b.n	8001046 <modbus_port_send+0x46>
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3301      	adds	r3, #1
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	f241 3287 	movw	r2, #4999	@ 0x1387
 800104c:	4293      	cmp	r3, r2
 800104e:	ddf7      	ble.n	8001040 <modbus_port_send+0x40>
        HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001050:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001054:	4805      	ldr	r0, [pc, #20]	@ (800106c <modbus_port_send+0x6c>)
 8001056:	f000 fe59 	bl	8001d0c <HAL_GPIO_TogglePin>
    }
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200001f0 	.word	0x200001f0
 8001068:	200003d7 	.word	0x200003d7
 800106c:	40011000 	.word	0x40011000

08001070 <modbus_port_start_timer>:

void modbus_port_start_timer(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
    // Always reset timer counter
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001074:	4b09      	ldr	r3, [pc, #36]	@ (800109c <modbus_port_start_timer+0x2c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24
    
    // Start timer if not running
    if (!timer_running) {
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <modbus_port_start_timer+0x30>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	f083 0301 	eor.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d005      	beq.n	8001096 <modbus_port_start_timer+0x26>
        HAL_TIM_Base_Start_IT(&htim2);
 800108a:	4804      	ldr	r0, [pc, #16]	@ (800109c <modbus_port_start_timer+0x2c>)
 800108c:	f001 fbfc 	bl	8002888 <HAL_TIM_Base_Start_IT>
        timer_running = true;
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <modbus_port_start_timer+0x30>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
    }
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000118 	.word	0x20000118
 80010a0:	200003d6 	.word	0x200003d6

080010a4 <modbus_port_stop_timer>:

void modbus_port_stop_timer(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    if (timer_running) {
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <modbus_port_stop_timer+0x1c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <modbus_port_stop_timer+0x18>
        HAL_TIM_Base_Stop_IT(&htim2);
 80010b0:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <modbus_port_stop_timer+0x20>)
 80010b2:	f001 fc3b 	bl	800292c <HAL_TIM_Base_Stop_IT>
        timer_running = false;
 80010b6:	4b02      	ldr	r3, [pc, #8]	@ (80010c0 <modbus_port_stop_timer+0x1c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
    }
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200003d6 	.word	0x200003d6
 80010c4:	20000118 	.word	0x20000118

080010c8 <modbus_port_on_byte_received>:

void modbus_port_on_byte_received(uint8_t byte) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    // Forward byte to modbus core
    modbus_receive_byte(byte);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fc2d 	bl	8000934 <modbus_receive_byte>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <modbus_port_on_frame_timeout>:

void modbus_port_on_frame_timeout(void) {
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
    // Forward timeout to modbus core
    modbus_handle_timeout();
 80010e6:	f7ff fc4b 	bl	8000980 <modbus_handle_timeout>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_UART_RxCpltCallback>:

// STM32 HAL CALLBACKS

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <HAL_UART_RxCpltCallback+0x38>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d10e      	bne.n	8001120 <HAL_UART_RxCpltCallback+0x30>
        // Debug: Blink LED3 for each received byte
        HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001102:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001106:	4809      	ldr	r0, [pc, #36]	@ (800112c <HAL_UART_RxCpltCallback+0x3c>)
 8001108:	f000 fe00 	bl	8001d0c <HAL_GPIO_TogglePin>
        
        // Process received byte
        modbus_port_on_byte_received(uart_rx_byte);
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <HAL_UART_RxCpltCallback+0x40>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ffd9 	bl	80010c8 <modbus_port_on_byte_received>
        
        // Continue receiving
        HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8001116:	2201      	movs	r2, #1
 8001118:	4905      	ldr	r1, [pc, #20]	@ (8001130 <HAL_UART_RxCpltCallback+0x40>)
 800111a:	4806      	ldr	r0, [pc, #24]	@ (8001134 <HAL_UART_RxCpltCallback+0x44>)
 800111c:	f002 fb4a 	bl	80037b4 <HAL_UART_Receive_IT>
    }
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40004400 	.word	0x40004400
 800112c:	40011000 	.word	0x40011000
 8001130:	200003d7 	.word	0x200003d7
 8001134:	200001f0 	.word	0x200001f0

08001138 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a05      	ldr	r2, [pc, #20]	@ (800115c <HAL_UART_ErrorCallback+0x24>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d104      	bne.n	8001154 <HAL_UART_ErrorCallback+0x1c>
        // Restart receive on error
        HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 800114a:	2201      	movs	r2, #1
 800114c:	4904      	ldr	r1, [pc, #16]	@ (8001160 <HAL_UART_ErrorCallback+0x28>)
 800114e:	4805      	ldr	r0, [pc, #20]	@ (8001164 <HAL_UART_ErrorCallback+0x2c>)
 8001150:	f002 fb30 	bl	80037b4 <HAL_UART_Receive_IT>
    }
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40004400 	.word	0x40004400
 8001160:	200003d7 	.word	0x200003d7
 8001164:	200001f0 	.word	0x200001f0

08001168 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001178:	d108      	bne.n	800118c <HAL_TIM_PeriodElapsedCallback+0x24>
        // Debug: Blink LED4 on timeout
        HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800117a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800117e:	4805      	ldr	r0, [pc, #20]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001180:	f000 fdc4 	bl	8001d0c <HAL_GPIO_TogglePin>
        
        // Handle frame timeout
        modbus_port_on_frame_timeout();
 8001184:	f7ff ffad 	bl	80010e2 <modbus_port_on_frame_timeout>
        
        // Stop timer
        modbus_port_stop_timer();
 8001188:	f7ff ff8c 	bl	80010a4 <modbus_port_stop_timer>
    }
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40011000 	.word	0x40011000

08001198 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <HAL_MspInit+0x68>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <HAL_MspInit+0x68>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6193      	str	r3, [r2, #24]
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <HAL_MspInit+0x68>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_MspInit+0x68>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a11      	ldr	r2, [pc, #68]	@ (8001200 <HAL_MspInit+0x68>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <HAL_MspInit+0x68>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	210f      	movs	r1, #15
 80011d2:	f06f 0001 	mvn.w	r0, #1
 80011d6:	f000 fb14 	bl	8001802 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <HAL_MspInit+0x6c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <HAL_MspInit+0x6c>)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	40010000 	.word	0x40010000

08001208 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a15      	ldr	r2, [pc, #84]	@ (8001278 <HAL_I2C_MspInit+0x70>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d123      	bne.n	8001270 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <HAL_I2C_MspInit+0x74>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a13      	ldr	r2, [pc, #76]	@ (800127c <HAL_I2C_MspInit+0x74>)
 800122e:	f043 0308 	orr.w	r3, r3, #8
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_I2C_MspInit+0x74>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001240:	23c0      	movs	r3, #192	@ 0xc0
 8001242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001244:	2312      	movs	r3, #18
 8001246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	4619      	mov	r1, r3
 8001252:	480b      	ldr	r0, [pc, #44]	@ (8001280 <HAL_I2C_MspInit+0x78>)
 8001254:	f000 fbbe 	bl	80019d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	@ (800127c <HAL_I2C_MspInit+0x74>)
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	4a07      	ldr	r2, [pc, #28]	@ (800127c <HAL_I2C_MspInit+0x74>)
 800125e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001262:	61d3      	str	r3, [r2, #28]
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <HAL_I2C_MspInit+0x74>)
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001270:	bf00      	nop
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40005400 	.word	0x40005400
 800127c:	40021000 	.word	0x40021000
 8001280:	40010c00 	.word	0x40010c00

08001284 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a1f      	ldr	r2, [pc, #124]	@ (800131c <HAL_TIM_PWM_MspInit+0x98>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d125      	bne.n	80012f0 <HAL_TIM_PWM_MspInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <HAL_TIM_PWM_MspInit+0x9c>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001320 <HAL_TIM_PWM_MspInit+0x9c>)
 80012aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <HAL_TIM_PWM_MspInit+0x9c>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_TIM_PWM_MspInit+0x9c>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a17      	ldr	r2, [pc, #92]	@ (8001320 <HAL_TIM_PWM_MspInit+0x9c>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_TIM_PWM_MspInit+0x9c>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM3_Pin;
 80012d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2302      	movs	r3, #2
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM3_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0318 	add.w	r3, r7, #24
 80012e6:	4619      	mov	r1, r3
 80012e8:	480e      	ldr	r0, [pc, #56]	@ (8001324 <HAL_TIM_PWM_MspInit+0xa0>)
 80012ea:	f000 fb73 	bl	80019d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012ee:	e010      	b.n	8001312 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM3)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001328 <HAL_TIM_PWM_MspInit+0xa4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d10b      	bne.n	8001312 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <HAL_TIM_PWM_MspInit+0x9c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a08      	ldr	r2, [pc, #32]	@ (8001320 <HAL_TIM_PWM_MspInit+0x9c>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_TIM_PWM_MspInit+0x9c>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	@ 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40012c00 	.word	0x40012c00
 8001320:	40021000 	.word	0x40021000
 8001324:	40010800 	.word	0x40010800
 8001328:	40000400 	.word	0x40000400

0800132c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800133c:	d113      	bne.n	8001366 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133e:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <HAL_TIM_Base_MspInit+0x44>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a0b      	ldr	r2, [pc, #44]	@ (8001370 <HAL_TIM_Base_MspInit+0x44>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	61d3      	str	r3, [r2, #28]
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <HAL_TIM_Base_MspInit+0x44>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2105      	movs	r1, #5
 800135a:	201c      	movs	r0, #28
 800135c:	f000 fa51 	bl	8001802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001360:	201c      	movs	r0, #28
 8001362:	f000 fa6a 	bl	800183a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000

08001374 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a1f      	ldr	r2, [pc, #124]	@ (800140c <HAL_TIM_MspPostInit+0x98>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d119      	bne.n	80013c8 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <HAL_TIM_MspPostInit+0x9c>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a1d      	ldr	r2, [pc, #116]	@ (8001410 <HAL_TIM_MspPostInit+0x9c>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <HAL_TIM_MspPostInit+0x9c>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4619      	mov	r1, r3
 80013c0:	4814      	ldr	r0, [pc, #80]	@ (8001414 <HAL_TIM_MspPostInit+0xa0>)
 80013c2:	f000 fb07 	bl	80019d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013c6:	e01c      	b.n	8001402 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <HAL_TIM_MspPostInit+0xa4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d117      	bne.n	8001402 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <HAL_TIM_MspPostInit+0x9c>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001410 <HAL_TIM_MspPostInit+0x9c>)
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	6193      	str	r3, [r2, #24]
 80013de:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <HAL_TIM_MspPostInit+0x9c>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM1_Pin;
 80013ea:	2301      	movs	r3, #1
 80013ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	@ (8001414 <HAL_TIM_MspPostInit+0xa0>)
 80013fe:	f000 fae9 	bl	80019d4 <HAL_GPIO_Init>
}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40012c00 	.word	0x40012c00
 8001410:	40021000 	.word	0x40021000
 8001414:	40010c00 	.word	0x40010c00
 8001418:	40000400 	.word	0x40000400

0800141c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a1f      	ldr	r2, [pc, #124]	@ (80014b4 <HAL_UART_MspInit+0x98>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d137      	bne.n	80014ac <HAL_UART_MspInit+0x90>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800143c:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <HAL_UART_MspInit+0x9c>)
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	4a1d      	ldr	r2, [pc, #116]	@ (80014b8 <HAL_UART_MspInit+0x9c>)
 8001442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001446:	61d3      	str	r3, [r2, #28]
 8001448:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <HAL_UART_MspInit+0x9c>)
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <HAL_UART_MspInit+0x9c>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a17      	ldr	r2, [pc, #92]	@ (80014b8 <HAL_UART_MspInit+0x9c>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <HAL_UART_MspInit+0x9c>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800146c:	2304      	movs	r3, #4
 800146e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	480f      	ldr	r0, [pc, #60]	@ (80014bc <HAL_UART_MspInit+0xa0>)
 8001480:	f000 faa8 	bl	80019d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001484:	2308      	movs	r3, #8
 8001486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	4619      	mov	r1, r3
 8001496:	4809      	ldr	r0, [pc, #36]	@ (80014bc <HAL_UART_MspInit+0xa0>)
 8001498:	f000 fa9c 	bl	80019d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	2105      	movs	r1, #5
 80014a0:	2026      	movs	r0, #38	@ 0x26
 80014a2:	f000 f9ae 	bl	8001802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014a6:	2026      	movs	r0, #38	@ 0x26
 80014a8:	f000 f9c7 	bl	800183a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40004400 	.word	0x40004400
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010800 	.word	0x40010800

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <NMI_Handler+0x4>

080014c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <MemManage_Handler+0x4>

080014d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f8:	f000 f890 	bl	800161c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014fc:	f004 fc3a 	bl	8005d74 <xTaskGetSchedulerState>
 8001500:	4603      	mov	r3, r0
 8001502:	2b01      	cmp	r3, #1
 8001504:	d001      	beq.n	800150a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001506:	f005 f9df 	bl	80068c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001514:	4802      	ldr	r0, [pc, #8]	@ (8001520 <TIM2_IRQHandler+0x10>)
 8001516:	f001 fa86 	bl	8002a26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000118 	.word	0x20000118

08001524 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <USART2_IRQHandler+0x10>)
 800152a:	f002 f969 	bl	8003800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200001f0 	.word	0x200001f0

08001538 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001544:	f7ff fff8 	bl	8001538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001548:	480b      	ldr	r0, [pc, #44]	@ (8001578 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800154a:	490c      	ldr	r1, [pc, #48]	@ (800157c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800154c:	4a0c      	ldr	r2, [pc, #48]	@ (8001580 <LoopFillZerobss+0x16>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a09      	ldr	r2, [pc, #36]	@ (8001584 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001560:	4c09      	ldr	r4, [pc, #36]	@ (8001588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800156e:	f005 fc81 	bl	8006e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001572:	f7fe fded 	bl	8000150 <main>
  bx lr
 8001576:	4770      	bx	lr
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001580:	080070a8 	.word	0x080070a8
  ldr r2, =_sbss
 8001584:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001588:	20001f04 	.word	0x20001f04

0800158c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC1_2_IRQHandler>
	...

08001590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001594:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <HAL_Init+0x28>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a07      	ldr	r2, [pc, #28]	@ (80015b8 <HAL_Init+0x28>)
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f000 f923 	bl	80017ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a6:	200f      	movs	r0, #15
 80015a8:	f000 f808 	bl	80015bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ac:	f7ff fdf4 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40022000 	.word	0x40022000

080015bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <HAL_InitTick+0x54>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <HAL_InitTick+0x58>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f93b 	bl	8001856 <HAL_SYSTICK_Config>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00e      	b.n	8001608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d80a      	bhi.n	8001606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f000 f903 	bl	8001802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015fc:	4a06      	ldr	r2, [pc, #24]	@ (8001618 <HAL_InitTick+0x5c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000000 	.word	0x20000000
 8001614:	20000008 	.word	0x20000008
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <HAL_IncTick+0x1c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b05      	ldr	r3, [pc, #20]	@ (800163c <HAL_IncTick+0x20>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4413      	add	r3, r2
 800162c:	4a03      	ldr	r2, [pc, #12]	@ (800163c <HAL_IncTick+0x20>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	20000008 	.word	0x20000008
 800163c:	200003d8 	.word	0x200003d8

08001640 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b02      	ldr	r3, [pc, #8]	@ (8001650 <HAL_GetTick+0x10>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	200003d8 	.word	0x200003d8

08001654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800167c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001686:	4a04      	ldr	r2, [pc, #16]	@ (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60d3      	str	r3, [r2, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0b      	blt.n	80016e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4906      	ldr	r1, [pc, #24]	@ (80016ec <__NVIC_EnableIRQ+0x34>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	@ (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	@ (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	@ 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	@ 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017b8:	d301      	bcc.n	80017be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00f      	b.n	80017de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017be:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <SysTick_Config+0x40>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c6:	210f      	movs	r1, #15
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f7ff ff90 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <SysTick_Config+0x40>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d6:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <SysTick_Config+0x40>)
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000e010 	.word	0xe000e010

080017ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff2d 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001814:	f7ff ff42 	bl	800169c <__NVIC_GetPriorityGrouping>
 8001818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7ff ff90 	bl	8001744 <NVIC_EncodePriority>
 8001824:	4602      	mov	r2, r0
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff5f 	bl	80016f0 <__NVIC_SetPriority>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff35 	bl	80016b8 <__NVIC_EnableIRQ>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffa2 	bl	80017a8 <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d008      	beq.n	8001898 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2204      	movs	r2, #4
 800188a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e020      	b.n	80018da <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 020e 	bic.w	r2, r2, #14
 80018a6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c0:	2101      	movs	r1, #1
 80018c2:	fa01 f202 	lsl.w	r2, r1, r2
 80018c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d005      	beq.n	8001908 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2204      	movs	r2, #4
 8001900:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e051      	b.n	80019ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 020e 	bic.w	r2, r2, #14
 8001916:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a22      	ldr	r2, [pc, #136]	@ (80019b8 <HAL_DMA_Abort_IT+0xd4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d029      	beq.n	8001986 <HAL_DMA_Abort_IT+0xa2>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_DMA_Abort_IT+0xd8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d022      	beq.n	8001982 <HAL_DMA_Abort_IT+0x9e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a1f      	ldr	r2, [pc, #124]	@ (80019c0 <HAL_DMA_Abort_IT+0xdc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d01a      	beq.n	800197c <HAL_DMA_Abort_IT+0x98>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a1e      	ldr	r2, [pc, #120]	@ (80019c4 <HAL_DMA_Abort_IT+0xe0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d012      	beq.n	8001976 <HAL_DMA_Abort_IT+0x92>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1c      	ldr	r2, [pc, #112]	@ (80019c8 <HAL_DMA_Abort_IT+0xe4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00a      	beq.n	8001970 <HAL_DMA_Abort_IT+0x8c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <HAL_DMA_Abort_IT+0xe8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d102      	bne.n	800196a <HAL_DMA_Abort_IT+0x86>
 8001964:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001968:	e00e      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 800196a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800196e:	e00b      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 8001970:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001974:	e008      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 8001976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197a:	e005      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 800197c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001980:	e002      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 8001982:	2310      	movs	r3, #16
 8001984:	e000      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 8001986:	2301      	movs	r3, #1
 8001988:	4a11      	ldr	r2, [pc, #68]	@ (80019d0 <HAL_DMA_Abort_IT+0xec>)
 800198a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
    } 
  }
  return status;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40020008 	.word	0x40020008
 80019bc:	4002001c 	.word	0x4002001c
 80019c0:	40020030 	.word	0x40020030
 80019c4:	40020044 	.word	0x40020044
 80019c8:	40020058 	.word	0x40020058
 80019cc:	4002006c 	.word	0x4002006c
 80019d0:	40020000 	.word	0x40020000

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b08b      	sub	sp, #44	@ 0x2c
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e6:	e169      	b.n	8001cbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019e8:	2201      	movs	r2, #1
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f040 8158 	bne.w	8001cb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4a9a      	ldr	r2, [pc, #616]	@ (8001c74 <HAL_GPIO_Init+0x2a0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d05e      	beq.n	8001ace <HAL_GPIO_Init+0xfa>
 8001a10:	4a98      	ldr	r2, [pc, #608]	@ (8001c74 <HAL_GPIO_Init+0x2a0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d875      	bhi.n	8001b02 <HAL_GPIO_Init+0x12e>
 8001a16:	4a98      	ldr	r2, [pc, #608]	@ (8001c78 <HAL_GPIO_Init+0x2a4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d058      	beq.n	8001ace <HAL_GPIO_Init+0xfa>
 8001a1c:	4a96      	ldr	r2, [pc, #600]	@ (8001c78 <HAL_GPIO_Init+0x2a4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d86f      	bhi.n	8001b02 <HAL_GPIO_Init+0x12e>
 8001a22:	4a96      	ldr	r2, [pc, #600]	@ (8001c7c <HAL_GPIO_Init+0x2a8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d052      	beq.n	8001ace <HAL_GPIO_Init+0xfa>
 8001a28:	4a94      	ldr	r2, [pc, #592]	@ (8001c7c <HAL_GPIO_Init+0x2a8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d869      	bhi.n	8001b02 <HAL_GPIO_Init+0x12e>
 8001a2e:	4a94      	ldr	r2, [pc, #592]	@ (8001c80 <HAL_GPIO_Init+0x2ac>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d04c      	beq.n	8001ace <HAL_GPIO_Init+0xfa>
 8001a34:	4a92      	ldr	r2, [pc, #584]	@ (8001c80 <HAL_GPIO_Init+0x2ac>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d863      	bhi.n	8001b02 <HAL_GPIO_Init+0x12e>
 8001a3a:	4a92      	ldr	r2, [pc, #584]	@ (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d046      	beq.n	8001ace <HAL_GPIO_Init+0xfa>
 8001a40:	4a90      	ldr	r2, [pc, #576]	@ (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d85d      	bhi.n	8001b02 <HAL_GPIO_Init+0x12e>
 8001a46:	2b12      	cmp	r3, #18
 8001a48:	d82a      	bhi.n	8001aa0 <HAL_GPIO_Init+0xcc>
 8001a4a:	2b12      	cmp	r3, #18
 8001a4c:	d859      	bhi.n	8001b02 <HAL_GPIO_Init+0x12e>
 8001a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a54 <HAL_GPIO_Init+0x80>)
 8001a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a54:	08001acf 	.word	0x08001acf
 8001a58:	08001aa9 	.word	0x08001aa9
 8001a5c:	08001abb 	.word	0x08001abb
 8001a60:	08001afd 	.word	0x08001afd
 8001a64:	08001b03 	.word	0x08001b03
 8001a68:	08001b03 	.word	0x08001b03
 8001a6c:	08001b03 	.word	0x08001b03
 8001a70:	08001b03 	.word	0x08001b03
 8001a74:	08001b03 	.word	0x08001b03
 8001a78:	08001b03 	.word	0x08001b03
 8001a7c:	08001b03 	.word	0x08001b03
 8001a80:	08001b03 	.word	0x08001b03
 8001a84:	08001b03 	.word	0x08001b03
 8001a88:	08001b03 	.word	0x08001b03
 8001a8c:	08001b03 	.word	0x08001b03
 8001a90:	08001b03 	.word	0x08001b03
 8001a94:	08001b03 	.word	0x08001b03
 8001a98:	08001ab1 	.word	0x08001ab1
 8001a9c:	08001ac5 	.word	0x08001ac5
 8001aa0:	4a79      	ldr	r2, [pc, #484]	@ (8001c88 <HAL_GPIO_Init+0x2b4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aa6:	e02c      	b.n	8001b02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e029      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	623b      	str	r3, [r7, #32]
          break;
 8001ab8:	e024      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	3308      	adds	r3, #8
 8001ac0:	623b      	str	r3, [r7, #32]
          break;
 8001ac2:	e01f      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	330c      	adds	r3, #12
 8001aca:	623b      	str	r3, [r7, #32]
          break;
 8001acc:	e01a      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d102      	bne.n	8001adc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	623b      	str	r3, [r7, #32]
          break;
 8001ada:	e013      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d105      	bne.n	8001af0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	611a      	str	r2, [r3, #16]
          break;
 8001aee:	e009      	b.n	8001b04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af0:	2308      	movs	r3, #8
 8001af2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	615a      	str	r2, [r3, #20]
          break;
 8001afa:	e003      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
          break;
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x130>
          break;
 8001b02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2bff      	cmp	r3, #255	@ 0xff
 8001b08:	d801      	bhi.n	8001b0e <HAL_GPIO_Init+0x13a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	e001      	b.n	8001b12 <HAL_GPIO_Init+0x13e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3304      	adds	r3, #4
 8001b12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2bff      	cmp	r3, #255	@ 0xff
 8001b18:	d802      	bhi.n	8001b20 <HAL_GPIO_Init+0x14c>
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	e002      	b.n	8001b26 <HAL_GPIO_Init+0x152>
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	3b08      	subs	r3, #8
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	210f      	movs	r1, #15
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	401a      	ands	r2, r3
 8001b38:	6a39      	ldr	r1, [r7, #32]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	431a      	orrs	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80b1 	beq.w	8001cb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b54:	4b4d      	ldr	r3, [pc, #308]	@ (8001c8c <HAL_GPIO_Init+0x2b8>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	4a4c      	ldr	r2, [pc, #304]	@ (8001c8c <HAL_GPIO_Init+0x2b8>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6193      	str	r3, [r2, #24]
 8001b60:	4b4a      	ldr	r3, [pc, #296]	@ (8001c8c <HAL_GPIO_Init+0x2b8>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b6c:	4a48      	ldr	r2, [pc, #288]	@ (8001c90 <HAL_GPIO_Init+0x2bc>)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a40      	ldr	r2, [pc, #256]	@ (8001c94 <HAL_GPIO_Init+0x2c0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d013      	beq.n	8001bc0 <HAL_GPIO_Init+0x1ec>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c98 <HAL_GPIO_Init+0x2c4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d00d      	beq.n	8001bbc <HAL_GPIO_Init+0x1e8>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8001c9c <HAL_GPIO_Init+0x2c8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d007      	beq.n	8001bb8 <HAL_GPIO_Init+0x1e4>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a3d      	ldr	r2, [pc, #244]	@ (8001ca0 <HAL_GPIO_Init+0x2cc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d101      	bne.n	8001bb4 <HAL_GPIO_Init+0x1e0>
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e006      	b.n	8001bc2 <HAL_GPIO_Init+0x1ee>
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	e004      	b.n	8001bc2 <HAL_GPIO_Init+0x1ee>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e002      	b.n	8001bc2 <HAL_GPIO_Init+0x1ee>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <HAL_GPIO_Init+0x1ee>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc4:	f002 0203 	and.w	r2, r2, #3
 8001bc8:	0092      	lsls	r2, r2, #2
 8001bca:	4093      	lsls	r3, r2
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bd2:	492f      	ldr	r1, [pc, #188]	@ (8001c90 <HAL_GPIO_Init+0x2bc>)
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	492c      	ldr	r1, [pc, #176]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4928      	ldr	r1, [pc, #160]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c14:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	4922      	ldr	r1, [pc, #136]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60cb      	str	r3, [r1, #12]
 8001c20:	e006      	b.n	8001c30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c22:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	491e      	ldr	r1, [pc, #120]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4918      	ldr	r1, [pc, #96]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4914      	ldr	r1, [pc, #80]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d021      	beq.n	8001ca8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	490e      	ldr	r1, [pc, #56]	@ (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
 8001c70:	e021      	b.n	8001cb6 <HAL_GPIO_Init+0x2e2>
 8001c72:	bf00      	nop
 8001c74:	10320000 	.word	0x10320000
 8001c78:	10310000 	.word	0x10310000
 8001c7c:	10220000 	.word	0x10220000
 8001c80:	10210000 	.word	0x10210000
 8001c84:	10120000 	.word	0x10120000
 8001c88:	10110000 	.word	0x10110000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40010000 	.word	0x40010000
 8001c94:	40010800 	.word	0x40010800
 8001c98:	40010c00 	.word	0x40010c00
 8001c9c:	40011000 	.word	0x40011000
 8001ca0:	40011400 	.word	0x40011400
 8001ca4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <HAL_GPIO_Init+0x304>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	4909      	ldr	r1, [pc, #36]	@ (8001cd8 <HAL_GPIO_Init+0x304>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	3301      	adds	r3, #1
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f47f ae8e 	bne.w	80019e8 <HAL_GPIO_Init+0x14>
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	372c      	adds	r7, #44	@ 0x2c
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	40010400 	.word	0x40010400

08001cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cf8:	e003      	b.n	8001d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	611a      	str	r2, [r3, #16]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4013      	ands	r3, r2
 8001d24:	041a      	lsls	r2, r3, #16
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43d9      	mvns	r1, r3
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	400b      	ands	r3, r1
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	611a      	str	r2, [r3, #16]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e12b      	b.n	8001faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff fa4e 	bl	8001208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	@ 0x24
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001da4:	f000 fcda 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 8001da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a81      	ldr	r2, [pc, #516]	@ (8001fb4 <HAL_I2C_Init+0x274>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d807      	bhi.n	8001dc4 <HAL_I2C_Init+0x84>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4a80      	ldr	r2, [pc, #512]	@ (8001fb8 <HAL_I2C_Init+0x278>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	bf94      	ite	ls
 8001dbc:	2301      	movls	r3, #1
 8001dbe:	2300      	movhi	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e006      	b.n	8001dd2 <HAL_I2C_Init+0x92>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a7d      	ldr	r2, [pc, #500]	@ (8001fbc <HAL_I2C_Init+0x27c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	bf94      	ite	ls
 8001dcc:	2301      	movls	r3, #1
 8001dce:	2300      	movhi	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0e7      	b.n	8001faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4a78      	ldr	r2, [pc, #480]	@ (8001fc0 <HAL_I2C_Init+0x280>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0c9b      	lsrs	r3, r3, #18
 8001de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a6a      	ldr	r2, [pc, #424]	@ (8001fb4 <HAL_I2C_Init+0x274>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d802      	bhi.n	8001e14 <HAL_I2C_Init+0xd4>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	3301      	adds	r3, #1
 8001e12:	e009      	b.n	8001e28 <HAL_I2C_Init+0xe8>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e1a:	fb02 f303 	mul.w	r3, r2, r3
 8001e1e:	4a69      	ldr	r2, [pc, #420]	@ (8001fc4 <HAL_I2C_Init+0x284>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	3301      	adds	r3, #1
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	495c      	ldr	r1, [pc, #368]	@ (8001fb4 <HAL_I2C_Init+0x274>)
 8001e44:	428b      	cmp	r3, r1
 8001e46:	d819      	bhi.n	8001e7c <HAL_I2C_Init+0x13c>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e59      	subs	r1, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e56:	1c59      	adds	r1, r3, #1
 8001e58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e5c:	400b      	ands	r3, r1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_I2C_Init+0x138>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1e59      	subs	r1, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e76:	e051      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001e78:	2304      	movs	r3, #4
 8001e7a:	e04f      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <HAL_I2C_Init+0x168>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1e58      	subs	r0, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	440b      	add	r3, r1
 8001e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	e012      	b.n	8001ece <HAL_I2C_Init+0x18e>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	0099      	lsls	r1, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Init+0x196>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e022      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10e      	bne.n	8001efc <HAL_I2C_Init+0x1bc>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1e58      	subs	r0, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	440b      	add	r3, r1
 8001eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001efa:	e00f      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1e58      	subs	r0, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	0099      	lsls	r1, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	6809      	ldr	r1, [r1, #0]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6911      	ldr	r1, [r2, #16]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68d2      	ldr	r2, [r2, #12]
 8001f56:	4311      	orrs	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	000186a0 	.word	0x000186a0
 8001fb8:	001e847f 	.word	0x001e847f
 8001fbc:	003d08ff 	.word	0x003d08ff
 8001fc0:	431bde83 	.word	0x431bde83
 8001fc4:	10624dd3 	.word	0x10624dd3

08001fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e272      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8087 	beq.w	80020f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe8:	4b92      	ldr	r3, [pc, #584]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d00c      	beq.n	800200e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff4:	4b8f      	ldr	r3, [pc, #572]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d112      	bne.n	8002026 <HAL_RCC_OscConfig+0x5e>
 8002000:	4b8c      	ldr	r3, [pc, #560]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800200c:	d10b      	bne.n	8002026 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200e:	4b89      	ldr	r3, [pc, #548]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d06c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x12c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d168      	bne.n	80020f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e24c      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x76>
 8002030:	4b80      	ldr	r3, [pc, #512]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a7f      	ldr	r2, [pc, #508]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e02e      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0x98>
 8002046:	4b7b      	ldr	r3, [pc, #492]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a7a      	ldr	r2, [pc, #488]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800204c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b78      	ldr	r3, [pc, #480]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a77      	ldr	r2, [pc, #476]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002058:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e01d      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0xbc>
 800206a:	4b72      	ldr	r3, [pc, #456]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a71      	ldr	r2, [pc, #452]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b6f      	ldr	r3, [pc, #444]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6e      	ldr	r2, [pc, #440]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 8002084:	4b6b      	ldr	r3, [pc, #428]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6a      	ldr	r2, [pc, #424]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800208a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b68      	ldr	r3, [pc, #416]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a67      	ldr	r2, [pc, #412]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800209a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff facc 	bl	8001640 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff fac8 	bl	8001640 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	@ 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e200      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b5d      	ldr	r3, [pc, #372]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0xe4>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff fab8 	bl	8001640 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff fab4 	bl	8001640 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	@ 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1ec      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	4b53      	ldr	r3, [pc, #332]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x10c>
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d063      	beq.n	80021ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002102:	4b4c      	ldr	r3, [pc, #304]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800210e:	4b49      	ldr	r3, [pc, #292]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b08      	cmp	r3, #8
 8002118:	d11c      	bne.n	8002154 <HAL_RCC_OscConfig+0x18c>
 800211a:	4b46      	ldr	r3, [pc, #280]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	4b43      	ldr	r3, [pc, #268]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x176>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e1c0      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213e:	4b3d      	ldr	r3, [pc, #244]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4939      	ldr	r1, [pc, #228]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	e03a      	b.n	80021ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215c:	4b36      	ldr	r3, [pc, #216]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7ff fa6d 	bl	8001640 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216a:	f7ff fa69 	bl	8001640 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e1a1      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	4b2a      	ldr	r3, [pc, #168]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4927      	ldr	r1, [pc, #156]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]
 800219c:	e015      	b.n	80021ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219e:	4b26      	ldr	r3, [pc, #152]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff fa4c 	bl	8001640 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ac:	f7ff fa48 	bl	8001640 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e180      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d03a      	beq.n	800224c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d019      	beq.n	8002212 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021de:	4b17      	ldr	r3, [pc, #92]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7ff fa2c 	bl	8001640 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ec:	f7ff fa28 	bl	8001640 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e160      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800220a:	2001      	movs	r0, #1
 800220c:	f000 face 	bl	80027ac <RCC_Delay>
 8002210:	e01c      	b.n	800224c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002212:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002218:	f7ff fa12 	bl	8001640 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221e:	e00f      	b.n	8002240 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002220:	f7ff fa0e 	bl	8001640 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d908      	bls.n	8002240 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e146      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	42420000 	.word	0x42420000
 800223c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	4b92      	ldr	r3, [pc, #584]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e9      	bne.n	8002220 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a6 	beq.w	80023a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225e:	4b8b      	ldr	r3, [pc, #556]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10d      	bne.n	8002286 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4b88      	ldr	r3, [pc, #544]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a87      	ldr	r2, [pc, #540]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002274:	61d3      	str	r3, [r2, #28]
 8002276:	4b85      	ldr	r3, [pc, #532]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002282:	2301      	movs	r3, #1
 8002284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b82      	ldr	r3, [pc, #520]	@ (8002490 <HAL_RCC_OscConfig+0x4c8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d118      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002292:	4b7f      	ldr	r3, [pc, #508]	@ (8002490 <HAL_RCC_OscConfig+0x4c8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7e      	ldr	r2, [pc, #504]	@ (8002490 <HAL_RCC_OscConfig+0x4c8>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800229c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229e:	f7ff f9cf 	bl	8001640 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a6:	f7ff f9cb 	bl	8001640 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b64      	cmp	r3, #100	@ 0x64
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e103      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	4b75      	ldr	r3, [pc, #468]	@ (8002490 <HAL_RCC_OscConfig+0x4c8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x312>
 80022cc:	4b6f      	ldr	r3, [pc, #444]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a6e      	ldr	r2, [pc, #440]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	e02d      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x334>
 80022e2:	4b6a      	ldr	r3, [pc, #424]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4a69      	ldr	r2, [pc, #420]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6213      	str	r3, [r2, #32]
 80022ee:	4b67      	ldr	r3, [pc, #412]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a66      	ldr	r2, [pc, #408]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	e01c      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b05      	cmp	r3, #5
 8002302:	d10c      	bne.n	800231e <HAL_RCC_OscConfig+0x356>
 8002304:	4b61      	ldr	r3, [pc, #388]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4a60      	ldr	r2, [pc, #384]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6213      	str	r3, [r2, #32]
 8002310:	4b5e      	ldr	r3, [pc, #376]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a5d      	ldr	r2, [pc, #372]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	e00b      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 800231e:	4b5b      	ldr	r3, [pc, #364]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4a5a      	ldr	r2, [pc, #360]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	4b58      	ldr	r3, [pc, #352]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a57      	ldr	r2, [pc, #348]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d015      	beq.n	800236a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7ff f97f 	bl	8001640 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7ff f97b 	bl	8001640 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0b1      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	4b4b      	ldr	r3, [pc, #300]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0ee      	beq.n	8002346 <HAL_RCC_OscConfig+0x37e>
 8002368:	e014      	b.n	8002394 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7ff f969 	bl	8001640 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	e00a      	b.n	8002388 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7ff f965 	bl	8001640 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e09b      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002388:	4b40      	ldr	r3, [pc, #256]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1ee      	bne.n	8002372 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b3c      	ldr	r3, [pc, #240]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a3b      	ldr	r2, [pc, #236]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8087 	beq.w	80024be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b0:	4b36      	ldr	r3, [pc, #216]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d061      	beq.n	8002480 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d146      	bne.n	8002452 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c4:	4b33      	ldr	r3, [pc, #204]	@ (8002494 <HAL_RCC_OscConfig+0x4cc>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7ff f939 	bl	8001640 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7ff f935 	bl	8001640 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e06d      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e4:	4b29      	ldr	r3, [pc, #164]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f8:	d108      	bne.n	800240c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023fa:	4b24      	ldr	r3, [pc, #144]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	4921      	ldr	r1, [pc, #132]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800240c:	4b1f      	ldr	r3, [pc, #124]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a19      	ldr	r1, [r3, #32]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	430b      	orrs	r3, r1
 800241e:	491b      	ldr	r1, [pc, #108]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b1b      	ldr	r3, [pc, #108]	@ (8002494 <HAL_RCC_OscConfig+0x4cc>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff f909 	bl	8001640 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7ff f905 	bl	8001640 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e03d      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x46a>
 8002450:	e035      	b.n	80024be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <HAL_RCC_OscConfig+0x4cc>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff f8f2 	bl	8001640 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7ff f8ee 	bl	8001640 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e026      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x498>
 800247e:	e01e      	b.n	80024be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e019      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
 800248c:	40021000 	.word	0x40021000
 8002490:	40007000 	.word	0x40007000
 8002494:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HAL_RCC_OscConfig+0x500>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000

080024cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0d0      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b6a      	ldr	r3, [pc, #424]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b67      	ldr	r3, [pc, #412]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 0207 	bic.w	r2, r3, #7
 80024f6:	4965      	ldr	r1, [pc, #404]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b63      	ldr	r3, [pc, #396]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0b8      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d020      	beq.n	800255e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002528:	4b59      	ldr	r3, [pc, #356]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a58      	ldr	r2, [pc, #352]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002532:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002540:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4a52      	ldr	r2, [pc, #328]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800254a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b50      	ldr	r3, [pc, #320]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	494d      	ldr	r1, [pc, #308]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d040      	beq.n	80025ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d115      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e07f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	4b41      	ldr	r3, [pc, #260]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e073      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	4b3d      	ldr	r3, [pc, #244]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06b      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025aa:	4b39      	ldr	r3, [pc, #228]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4936      	ldr	r1, [pc, #216]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025bc:	f7ff f840 	bl	8001640 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7ff f83c 	bl	8001640 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e053      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	4b2d      	ldr	r3, [pc, #180]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 020c 	and.w	r2, r3, #12
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1eb      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b27      	ldr	r3, [pc, #156]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d210      	bcs.n	800261c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b24      	ldr	r3, [pc, #144]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 0207 	bic.w	r2, r3, #7
 8002602:	4922      	ldr	r1, [pc, #136]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b20      	ldr	r3, [pc, #128]	@ (800268c <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e032      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4916      	ldr	r1, [pc, #88]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002646:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	490e      	ldr	r1, [pc, #56]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800265a:	f000 f821 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 800265e:	4602      	mov	r2, r0
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	490a      	ldr	r1, [pc, #40]	@ (8002694 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	5ccb      	ldrb	r3, [r1, r3]
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	4a09      	ldr	r2, [pc, #36]	@ (8002698 <HAL_RCC_ClockConfig+0x1cc>)
 8002674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_RCC_ClockConfig+0x1d0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe ff9e 	bl	80015bc <HAL_InitTick>

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40022000 	.word	0x40022000
 8002690:	40021000 	.word	0x40021000
 8002694:	08007074 	.word	0x08007074
 8002698:	20000000 	.word	0x20000000
 800269c:	20000004 	.word	0x20000004

080026a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x94>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d002      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x30>
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d003      	beq.n	80026d6 <HAL_RCC_GetSysClockFreq+0x36>
 80026ce:	e027      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026d0:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x98>)
 80026d2:	613b      	str	r3, [r7, #16]
      break;
 80026d4:	e027      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	0c9b      	lsrs	r3, r3, #18
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	4a17      	ldr	r2, [pc, #92]	@ (800273c <HAL_RCC_GetSysClockFreq+0x9c>)
 80026e0:	5cd3      	ldrb	r3, [r2, r3]
 80026e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d010      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ee:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x94>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	0c5b      	lsrs	r3, r3, #17
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	4a11      	ldr	r2, [pc, #68]	@ (8002740 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a0d      	ldr	r2, [pc, #52]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x98>)
 8002702:	fb03 f202 	mul.w	r2, r3, r2
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e004      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a0c      	ldr	r2, [pc, #48]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	613b      	str	r3, [r7, #16]
      break;
 800271e:	e002      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x98>)
 8002722:	613b      	str	r3, [r7, #16]
      break;
 8002724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002726:	693b      	ldr	r3, [r7, #16]
}
 8002728:	4618      	mov	r0, r3
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	007a1200 	.word	0x007a1200
 800273c:	0800708c 	.word	0x0800708c
 8002740:	0800709c 	.word	0x0800709c
 8002744:	003d0900 	.word	0x003d0900

08002748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b02      	ldr	r3, [pc, #8]	@ (8002758 <HAL_RCC_GetHCLKFreq+0x10>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	20000000 	.word	0x20000000

0800275c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002760:	f7ff fff2 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002764:	4602      	mov	r2, r0
 8002766:	4b05      	ldr	r3, [pc, #20]	@ (800277c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	4903      	ldr	r1, [pc, #12]	@ (8002780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	08007084 	.word	0x08007084

08002784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002788:	f7ff ffde 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0adb      	lsrs	r3, r3, #11
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4903      	ldr	r1, [pc, #12]	@ (80027a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08007084 	.word	0x08007084

080027ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027b4:	4b0a      	ldr	r3, [pc, #40]	@ (80027e0 <RCC_Delay+0x34>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <RCC_Delay+0x38>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0a5b      	lsrs	r3, r3, #9
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	fb02 f303 	mul.w	r3, r2, r3
 80027c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027c8:	bf00      	nop
  }
  while (Delay --);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1e5a      	subs	r2, r3, #1
 80027ce:	60fa      	str	r2, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f9      	bne.n	80027c8 <RCC_Delay+0x1c>
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20000000 	.word	0x20000000
 80027e4:	10624dd3 	.word	0x10624dd3

080027e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e041      	b.n	800287e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fd8c 	bl	800132c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f000 fb9c 	bl	8002f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d001      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e03a      	b.n	8002916 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a18      	ldr	r2, [pc, #96]	@ (8002920 <HAL_TIM_Base_Start_IT+0x98>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00e      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x58>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ca:	d009      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x58>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a14      	ldr	r2, [pc, #80]	@ (8002924 <HAL_TIM_Base_Start_IT+0x9c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d004      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x58>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a13      	ldr	r2, [pc, #76]	@ (8002928 <HAL_TIM_Base_Start_IT+0xa0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d111      	bne.n	8002904 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d010      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002902:	e007      	b.n	8002914 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40000400 	.word	0x40000400
 8002928:	40000800 	.word	0x40000800

0800292c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6a1a      	ldr	r2, [r3, #32]
 800294a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10f      	bne.n	8002974 <HAL_TIM_Base_Stop_IT+0x48>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6a1a      	ldr	r2, [r3, #32]
 800295a:	f240 4344 	movw	r3, #1092	@ 0x444
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <HAL_TIM_Base_Stop_IT+0x48>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e041      	b.n	8002a1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe fc68 	bl	8001284 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3304      	adds	r3, #4
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f000 facc 	bl	8002f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d020      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01b      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f06f 0202 	mvn.w	r2, #2
 8002a5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fa5b 	bl	8002f2c <HAL_TIM_IC_CaptureCallback>
 8002a76:	e005      	b.n	8002a84 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fa4e 	bl	8002f1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fa5d 	bl	8002f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01b      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f06f 0204 	mvn.w	r2, #4
 8002aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fa35 	bl	8002f2c <HAL_TIM_IC_CaptureCallback>
 8002ac2:	e005      	b.n	8002ad0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fa28 	bl	8002f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fa37 	bl	8002f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d020      	beq.n	8002b22 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01b      	beq.n	8002b22 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f06f 0208 	mvn.w	r2, #8
 8002af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2204      	movs	r2, #4
 8002af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fa0f 	bl	8002f2c <HAL_TIM_IC_CaptureCallback>
 8002b0e:	e005      	b.n	8002b1c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fa02 	bl	8002f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fa11 	bl	8002f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01b      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f06f 0210 	mvn.w	r2, #16
 8002b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2208      	movs	r2, #8
 8002b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f9e9 	bl	8002f2c <HAL_TIM_IC_CaptureCallback>
 8002b5a:	e005      	b.n	8002b68 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f9dc 	bl	8002f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f9eb 	bl	8002f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00c      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f06f 0201 	mvn.w	r2, #1
 8002b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7fe faeb 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00c      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fd1b 	bl	80035ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00c      	beq.n	8002bda <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f9bb 	bl	8002f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00c      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0220 	mvn.w	r2, #32
 8002bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fcee 	bl	80035da <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0ae      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	f200 809f 	bhi.w	8002d74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c36:	a201      	add	r2, pc, #4	@ (adr r2, 8002c3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002c71 	.word	0x08002c71
 8002c40:	08002d75 	.word	0x08002d75
 8002c44:	08002d75 	.word	0x08002d75
 8002c48:	08002d75 	.word	0x08002d75
 8002c4c:	08002cb1 	.word	0x08002cb1
 8002c50:	08002d75 	.word	0x08002d75
 8002c54:	08002d75 	.word	0x08002d75
 8002c58:	08002d75 	.word	0x08002d75
 8002c5c:	08002cf3 	.word	0x08002cf3
 8002c60:	08002d75 	.word	0x08002d75
 8002c64:	08002d75 	.word	0x08002d75
 8002c68:	08002d75 	.word	0x08002d75
 8002c6c:	08002d33 	.word	0x08002d33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f9e2 	bl	8003040 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0208 	orr.w	r2, r2, #8
 8002c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0204 	bic.w	r2, r2, #4
 8002c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6999      	ldr	r1, [r3, #24]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	619a      	str	r2, [r3, #24]
      break;
 8002cae:	e064      	b.n	8002d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fa28 	bl	800310c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6999      	ldr	r1, [r3, #24]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	021a      	lsls	r2, r3, #8
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	619a      	str	r2, [r3, #24]
      break;
 8002cf0:	e043      	b.n	8002d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fa71 	bl	80031e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69da      	ldr	r2, [r3, #28]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0208 	orr.w	r2, r2, #8
 8002d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0204 	bic.w	r2, r2, #4
 8002d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69d9      	ldr	r1, [r3, #28]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	61da      	str	r2, [r3, #28]
      break;
 8002d30:	e023      	b.n	8002d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fabb 	bl	80032b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69d9      	ldr	r1, [r3, #28]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	021a      	lsls	r2, r3, #8
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	61da      	str	r2, [r3, #28]
      break;
 8002d72:	e002      	b.n	8002d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	75fb      	strb	r3, [r7, #23]
      break;
 8002d78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_TIM_ConfigClockSource+0x1c>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e0b4      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x186>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002de0:	d03e      	beq.n	8002e60 <HAL_TIM_ConfigClockSource+0xd4>
 8002de2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002de6:	f200 8087 	bhi.w	8002ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dee:	f000 8086 	beq.w	8002efe <HAL_TIM_ConfigClockSource+0x172>
 8002df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002df6:	d87f      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8002df8:	2b70      	cmp	r3, #112	@ 0x70
 8002dfa:	d01a      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0xa6>
 8002dfc:	2b70      	cmp	r3, #112	@ 0x70
 8002dfe:	d87b      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8002e00:	2b60      	cmp	r3, #96	@ 0x60
 8002e02:	d050      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x11a>
 8002e04:	2b60      	cmp	r3, #96	@ 0x60
 8002e06:	d877      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8002e08:	2b50      	cmp	r3, #80	@ 0x50
 8002e0a:	d03c      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0xfa>
 8002e0c:	2b50      	cmp	r3, #80	@ 0x50
 8002e0e:	d873      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8002e10:	2b40      	cmp	r3, #64	@ 0x40
 8002e12:	d058      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x13a>
 8002e14:	2b40      	cmp	r3, #64	@ 0x40
 8002e16:	d86f      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8002e18:	2b30      	cmp	r3, #48	@ 0x30
 8002e1a:	d064      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8002e1c:	2b30      	cmp	r3, #48	@ 0x30
 8002e1e:	d86b      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d060      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d867      	bhi.n	8002ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d05c      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d05a      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8002e30:	e062      	b.n	8002ef8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e42:	f000 fafc 	bl	800343e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	609a      	str	r2, [r3, #8]
      break;
 8002e5e:	e04f      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e70:	f000 fae5 	bl	800343e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e82:	609a      	str	r2, [r3, #8]
      break;
 8002e84:	e03c      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e92:	461a      	mov	r2, r3
 8002e94:	f000 fa5c 	bl	8003350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2150      	movs	r1, #80	@ 0x50
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fab3 	bl	800340a <TIM_ITRx_SetConfig>
      break;
 8002ea4:	e02c      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f000 fa7a 	bl	80033ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2160      	movs	r1, #96	@ 0x60
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 faa3 	bl	800340a <TIM_ITRx_SetConfig>
      break;
 8002ec4:	e01c      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f000 fa3c 	bl	8003350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2140      	movs	r1, #64	@ 0x40
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fa93 	bl	800340a <TIM_ITRx_SetConfig>
      break;
 8002ee4:	e00c      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	f000 fa8a 	bl	800340a <TIM_ITRx_SetConfig>
      break;
 8002ef6:	e003      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      break;
 8002efc:	e000      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
	...

08002f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a2f      	ldr	r2, [pc, #188]	@ (8003034 <TIM_Base_SetConfig+0xd0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <TIM_Base_SetConfig+0x30>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f82:	d007      	beq.n	8002f94 <TIM_Base_SetConfig+0x30>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a2c      	ldr	r2, [pc, #176]	@ (8003038 <TIM_Base_SetConfig+0xd4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_Base_SetConfig+0x30>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800303c <TIM_Base_SetConfig+0xd8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d108      	bne.n	8002fa6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a22      	ldr	r2, [pc, #136]	@ (8003034 <TIM_Base_SetConfig+0xd0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00b      	beq.n	8002fc6 <TIM_Base_SetConfig+0x62>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb4:	d007      	beq.n	8002fc6 <TIM_Base_SetConfig+0x62>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <TIM_Base_SetConfig+0xd4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <TIM_Base_SetConfig+0x62>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <TIM_Base_SetConfig+0xd8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d108      	bne.n	8002fd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8003034 <TIM_Base_SetConfig+0xd0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d103      	bne.n	800300c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f023 0201 	bic.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	611a      	str	r2, [r3, #16]
  }
}
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40000400 	.word	0x40000400
 800303c:	40000800 	.word	0x40000800

08003040 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f023 0201 	bic.w	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800306e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0303 	bic.w	r3, r3, #3
 8003076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f023 0302 	bic.w	r3, r3, #2
 8003088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a1c      	ldr	r2, [pc, #112]	@ (8003108 <TIM_OC1_SetConfig+0xc8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d10c      	bne.n	80030b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f023 0308 	bic.w	r3, r3, #8
 80030a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f023 0304 	bic.w	r3, r3, #4
 80030b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a13      	ldr	r2, [pc, #76]	@ (8003108 <TIM_OC1_SetConfig+0xc8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d111      	bne.n	80030e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	621a      	str	r2, [r3, #32]
}
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40012c00 	.word	0x40012c00

0800310c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f023 0210 	bic.w	r2, r3, #16
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800313a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f023 0320 	bic.w	r3, r3, #32
 8003156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a1d      	ldr	r2, [pc, #116]	@ (80031dc <TIM_OC2_SetConfig+0xd0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d10d      	bne.n	8003188 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003186:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a14      	ldr	r2, [pc, #80]	@ (80031dc <TIM_OC2_SetConfig+0xd0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d113      	bne.n	80031b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800319e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	621a      	str	r2, [r3, #32]
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr
 80031dc:	40012c00 	.word	0x40012c00

080031e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0303 	bic.w	r3, r3, #3
 8003216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a1d      	ldr	r2, [pc, #116]	@ (80032b0 <TIM_OC3_SetConfig+0xd0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10d      	bne.n	800325a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a14      	ldr	r2, [pc, #80]	@ (80032b0 <TIM_OC3_SetConfig+0xd0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d113      	bne.n	800328a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	621a      	str	r2, [r3, #32]
}
 80032a4:	bf00      	nop
 80032a6:	371c      	adds	r7, #28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40012c00 	.word	0x40012c00

080032b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	031b      	lsls	r3, r3, #12
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a0f      	ldr	r2, [pc, #60]	@ (800334c <TIM_OC4_SetConfig+0x98>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d109      	bne.n	8003328 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800331a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	40012c00 	.word	0x40012c00

08003350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800337a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f023 030a 	bic.w	r3, r3, #10
 800338c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	621a      	str	r2, [r3, #32]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f023 0210 	bic.w	r2, r3, #16
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	031b      	lsls	r3, r3, #12
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	621a      	str	r2, [r3, #32]
}
 8003400:	bf00      	nop
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	f043 0307 	orr.w	r3, r3, #7
 800342c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	609a      	str	r2, [r3, #8]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr

0800343e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800343e:	b480      	push	{r7}
 8003440:	b087      	sub	sp, #28
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003458:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	021a      	lsls	r2, r3, #8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	431a      	orrs	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4313      	orrs	r3, r2
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	609a      	str	r2, [r3, #8]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003490:	2302      	movs	r3, #2
 8003492:	e046      	b.n	8003522 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a16      	ldr	r2, [pc, #88]	@ (800352c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00e      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034e0:	d009      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a12      	ldr	r2, [pc, #72]	@ (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a10      	ldr	r2, [pc, #64]	@ (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10c      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	4313      	orrs	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800

08003538 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003550:	2302      	movs	r3, #2
 8003552:	e03d      	b.n	80035d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr

080035ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e042      	b.n	8003696 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d106      	bne.n	800362a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7fd fef9 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2224      	movs	r2, #36	@ 0x24
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003640:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fdb0 	bl	80041a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003656:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003666:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003676:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b08a      	sub	sp, #40	@ 0x28
 80036a2:	af02      	add	r7, sp, #8
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d175      	bne.n	80037aa <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_UART_Transmit+0x2c>
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e06e      	b.n	80037ac <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2221      	movs	r2, #33	@ 0x21
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036dc:	f7fd ffb0 	bl	8001640 <HAL_GetTick>
 80036e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	88fa      	ldrh	r2, [r7, #6]
 80036e6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f6:	d108      	bne.n	800370a <HAL_UART_Transmit+0x6c>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d104      	bne.n	800370a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	e003      	b.n	8003712 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003712:	e02e      	b.n	8003772 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2200      	movs	r2, #0
 800371c:	2180      	movs	r1, #128	@ 0x80
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fb14 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e03a      	b.n	80037ac <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10b      	bne.n	8003754 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800374a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	3302      	adds	r3, #2
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	e007      	b.n	8003764 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	781a      	ldrb	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3301      	adds	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1cb      	bne.n	8003714 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2200      	movs	r2, #0
 8003784:	2140      	movs	r1, #64	@ 0x40
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fae0 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e006      	b.n	80037ac <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e000      	b.n	80037ac <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037aa:	2302      	movs	r3, #2
  }
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3720      	adds	r7, #32
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d112      	bne.n	80037f4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_UART_Receive_IT+0x26>
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e00b      	b.n	80037f6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	461a      	mov	r2, r3
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fb07 	bl	8003dfe <UART_Start_Receive_IT>
 80037f0:	4603      	mov	r3, r0
 80037f2:	e000      	b.n	80037f6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b0ba      	sub	sp, #232	@ 0xe8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800382c:	2300      	movs	r3, #0
 800382e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800383e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_UART_IRQHandler+0x66>
 8003852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fbe3 	bl	800402a <UART_Receive_IT>
      return;
 8003864:	e25b      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80de 	beq.w	8003a2c <HAL_UART_IRQHandler+0x22c>
 8003870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800387c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003880:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80d1 	beq.w	8003a2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_UART_IRQHandler+0xae>
 8003896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800389a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	f043 0201 	orr.w	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00b      	beq.n	80038d2 <HAL_UART_IRQHandler+0xd2>
 80038ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ca:	f043 0202 	orr.w	r2, r3, #2
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_UART_IRQHandler+0xf6>
 80038de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	f043 0204 	orr.w	r2, r3, #4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d011      	beq.n	8003926 <HAL_UART_IRQHandler+0x126>
 8003902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800390e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	f043 0208 	orr.w	r2, r3, #8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 81f2 	beq.w	8003d14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_UART_IRQHandler+0x14e>
 800393c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fb6e 	bl	800402a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <HAL_UART_IRQHandler+0x17a>
 8003972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d04f      	beq.n	8003a1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fa78 	bl	8003e70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d041      	beq.n	8003a12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3314      	adds	r3, #20
 8003994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3314      	adds	r3, #20
 80039b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1d9      	bne.n	800398e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d013      	beq.n	8003a0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e6:	4a7e      	ldr	r2, [pc, #504]	@ (8003be0 <HAL_UART_IRQHandler+0x3e0>)
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd ff78 	bl	80018e4 <HAL_DMA_Abort_IT>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d016      	beq.n	8003a28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a04:	4610      	mov	r0, r2
 8003a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	e00e      	b.n	8003a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd fb94 	bl	8001138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a10:	e00a      	b.n	8003a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd fb90 	bl	8001138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	e006      	b.n	8003a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd fb8c 	bl	8001138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a26:	e175      	b.n	8003d14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	bf00      	nop
    return;
 8003a2a:	e173      	b.n	8003d14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	f040 814f 	bne.w	8003cd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8148 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8141 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80b6 	beq.w	8003be4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8145 	beq.w	8003d18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a96:	429a      	cmp	r2, r3
 8003a98:	f080 813e 	bcs.w	8003d18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aa2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	f000 8088 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003aca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ace:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003adc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ae0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ae8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1d9      	bne.n	8003ab0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3314      	adds	r3, #20
 8003b02:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3314      	adds	r3, #20
 8003b1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b20:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b24:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e1      	bne.n	8003afc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3314      	adds	r3, #20
 8003b3e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3314      	adds	r3, #20
 8003b58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b5c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e3      	bne.n	8003b38 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b90:	f023 0310 	bic.w	r3, r3, #16
 8003b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ba2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ba4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ba8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e3      	bne.n	8003b7e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fd fe57 	bl	800186e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f8ad 	bl	8003d36 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bdc:	e09c      	b.n	8003d18 <HAL_UART_IRQHandler+0x518>
 8003bde:	bf00      	nop
 8003be0:	08003f35 	.word	0x08003f35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 808e 	beq.w	8003d1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8089 	beq.w	8003d1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	330c      	adds	r3, #12
 8003c10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e3      	bne.n	8003c0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3314      	adds	r3, #20
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	623b      	str	r3, [r7, #32]
   return(result);
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3314      	adds	r3, #20
 8003c62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c66:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e3      	bne.n	8003c42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0310 	bic.w	r3, r3, #16
 8003c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cac:	61fa      	str	r2, [r7, #28]
 8003cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	69b9      	ldr	r1, [r7, #24]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e3      	bne.n	8003c88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f832 	bl	8003d36 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cd2:	e023      	b.n	8003d1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d009      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x4f4>
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f935 	bl	8003f5c <UART_Transmit_IT>
    return;
 8003cf2:	e014      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00e      	beq.n	8003d1e <HAL_UART_IRQHandler+0x51e>
 8003d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f974 	bl	8003ffa <UART_EndTransmit_IT>
    return;
 8003d12:	e004      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
    return;
 8003d14:	bf00      	nop
 8003d16:	e002      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d18:	bf00      	nop
 8003d1a:	e000      	b.n	8003d1e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d1c:	bf00      	nop
  }
}
 8003d1e:	37e8      	adds	r7, #232	@ 0xe8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr

08003d36 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5c:	e03b      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d037      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d66:	f7fd fc6b 	bl	8001640 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	6a3a      	ldr	r2, [r7, #32]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e03a      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d023      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b80      	cmp	r3, #128	@ 0x80
 8003d92:	d020      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b40      	cmp	r3, #64	@ 0x40
 8003d98:	d01d      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d116      	bne.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f856 	bl	8003e70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e00f      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4013      	ands	r3, r2
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	bf0c      	ite	eq
 8003de6:	2301      	moveq	r3, #1
 8003de8:	2300      	movne	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d0b4      	beq.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	88fa      	ldrh	r2, [r7, #6]
 8003e16:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	88fa      	ldrh	r2, [r7, #6]
 8003e1c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2222      	movs	r2, #34	@ 0x22
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e42:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0220 	orr.w	r2, r2, #32
 8003e62:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b095      	sub	sp, #84	@ 0x54
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e98:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e5      	bne.n	8003e78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3314      	adds	r3, #20
 8003eca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ecc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ece:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e5      	bne.n	8003eac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d119      	bne.n	8003f1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f023 0310 	bic.w	r3, r3, #16
 8003efe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	330c      	adds	r3, #12
 8003f06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f08:	61ba      	str	r2, [r7, #24]
 8003f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	6979      	ldr	r1, [r7, #20]
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	613b      	str	r3, [r7, #16]
   return(result);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e5      	bne.n	8003ee8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f2a:	bf00      	nop
 8003f2c:	3754      	adds	r7, #84	@ 0x54
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f7fd f8f2 	bl	8001138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b21      	cmp	r3, #33	@ 0x21
 8003f6e:	d13e      	bne.n	8003fee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f78:	d114      	bne.n	8003fa4 <UART_Transmit_IT+0x48>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d110      	bne.n	8003fa4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	1c9a      	adds	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	621a      	str	r2, [r3, #32]
 8003fa2:	e008      	b.n	8003fb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	1c59      	adds	r1, r3, #1
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6211      	str	r1, [r2, #32]
 8003fae:	781a      	ldrb	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10f      	bne.n	8003fea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fe8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004010:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fe82 	bl	8003d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b08c      	sub	sp, #48	@ 0x30
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b22      	cmp	r3, #34	@ 0x22
 800403c:	f040 80ae 	bne.w	800419c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004048:	d117      	bne.n	800407a <UART_Receive_IT+0x50>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d113      	bne.n	800407a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004068:	b29a      	uxth	r2, r3
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004072:	1c9a      	adds	r2, r3, #2
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	629a      	str	r2, [r3, #40]	@ 0x28
 8004078:	e026      	b.n	80040c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004080:	2300      	movs	r3, #0
 8004082:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408c:	d007      	beq.n	800409e <UART_Receive_IT+0x74>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <UART_Receive_IT+0x82>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e008      	b.n	80040be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4619      	mov	r1, r3
 80040d6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d15d      	bne.n	8004198 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0220 	bic.w	r2, r2, #32
 80040ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	2b01      	cmp	r3, #1
 8004120:	d135      	bne.n	800418e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	613b      	str	r3, [r7, #16]
   return(result);
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f023 0310 	bic.w	r3, r3, #16
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004148:	623a      	str	r2, [r7, #32]
 800414a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	69f9      	ldr	r1, [r7, #28]
 800414e:	6a3a      	ldr	r2, [r7, #32]
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	61bb      	str	r3, [r7, #24]
   return(result);
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e5      	bne.n	8004128 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b10      	cmp	r3, #16
 8004168:	d10a      	bne.n	8004180 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004184:	4619      	mov	r1, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fdd5 	bl	8003d36 <HAL_UARTEx_RxEventCallback>
 800418c:	e002      	b.n	8004194 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc ffae 	bl	80010f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	e002      	b.n	800419e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3730      	adds	r7, #48	@ 0x30
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80041e2:	f023 030c 	bic.w	r3, r3, #12
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a2c      	ldr	r2, [pc, #176]	@ (80042bc <UART_SetConfig+0x114>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d103      	bne.n	8004218 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004210:	f7fe fab8 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	e002      	b.n	800421e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004218:	f7fe faa0 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 800421c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009a      	lsls	r2, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	4a22      	ldr	r2, [pc, #136]	@ (80042c0 <UART_SetConfig+0x118>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	0119      	lsls	r1, r3, #4
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009a      	lsls	r2, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	fbb2 f2f3 	udiv	r2, r2, r3
 8004254:	4b1a      	ldr	r3, [pc, #104]	@ (80042c0 <UART_SetConfig+0x118>)
 8004256:	fba3 0302 	umull	r0, r3, r3, r2
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	2064      	movs	r0, #100	@ 0x64
 800425e:	fb00 f303 	mul.w	r3, r0, r3
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	3332      	adds	r3, #50	@ 0x32
 8004268:	4a15      	ldr	r2, [pc, #84]	@ (80042c0 <UART_SetConfig+0x118>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004274:	4419      	add	r1, r3
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009a      	lsls	r2, r3, #2
 8004280:	441a      	add	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	fbb2 f2f3 	udiv	r2, r2, r3
 800428c:	4b0c      	ldr	r3, [pc, #48]	@ (80042c0 <UART_SetConfig+0x118>)
 800428e:	fba3 0302 	umull	r0, r3, r3, r2
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2064      	movs	r0, #100	@ 0x64
 8004296:	fb00 f303 	mul.w	r3, r0, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	3332      	adds	r3, #50	@ 0x32
 80042a0:	4a07      	ldr	r2, [pc, #28]	@ (80042c0 <UART_SetConfig+0x118>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	f003 020f 	and.w	r2, r3, #15
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	440a      	add	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40013800 	.word	0x40013800
 80042c0:	51eb851f 	.word	0x51eb851f

080042c4 <__NVIC_SetPriority>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	6039      	str	r1, [r7, #0]
 80042ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	db0a      	blt.n	80042ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	490c      	ldr	r1, [pc, #48]	@ (8004310 <__NVIC_SetPriority+0x4c>)
 80042de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e2:	0112      	lsls	r2, r2, #4
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	440b      	add	r3, r1
 80042e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80042ec:	e00a      	b.n	8004304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4908      	ldr	r1, [pc, #32]	@ (8004314 <__NVIC_SetPriority+0x50>)
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	3b04      	subs	r3, #4
 80042fc:	0112      	lsls	r2, r2, #4
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	440b      	add	r3, r1
 8004302:	761a      	strb	r2, [r3, #24]
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	e000e100 	.word	0xe000e100
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800431c:	2100      	movs	r1, #0
 800431e:	f06f 0004 	mvn.w	r0, #4
 8004322:	f7ff ffcf 	bl	80042c4 <__NVIC_SetPriority>
#endif
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004332:	f3ef 8305 	mrs	r3, IPSR
 8004336:	603b      	str	r3, [r7, #0]
  return(result);
 8004338:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800433e:	f06f 0305 	mvn.w	r3, #5
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	e00c      	b.n	8004360 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004346:	4b09      	ldr	r3, [pc, #36]	@ (800436c <osKernelInitialize+0x40>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d105      	bne.n	800435a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800434e:	4b07      	ldr	r3, [pc, #28]	@ (800436c <osKernelInitialize+0x40>)
 8004350:	2201      	movs	r2, #1
 8004352:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004354:	2300      	movs	r3, #0
 8004356:	607b      	str	r3, [r7, #4]
 8004358:	e002      	b.n	8004360 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800435a:	f04f 33ff 	mov.w	r3, #4294967295
 800435e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004360:	687b      	ldr	r3, [r7, #4]
}
 8004362:	4618      	mov	r0, r3
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	200003dc 	.word	0x200003dc

08004370 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004376:	f3ef 8305 	mrs	r3, IPSR
 800437a:	603b      	str	r3, [r7, #0]
  return(result);
 800437c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004382:	f06f 0305 	mvn.w	r3, #5
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	e010      	b.n	80043ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800438a:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <osKernelStart+0x48>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d109      	bne.n	80043a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004392:	f7ff ffc1 	bl	8004318 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004396:	4b08      	ldr	r3, [pc, #32]	@ (80043b8 <osKernelStart+0x48>)
 8004398:	2202      	movs	r2, #2
 800439a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800439c:	f001 f88a 	bl	80054b4 <vTaskStartScheduler>
      stat = osOK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	607b      	str	r3, [r7, #4]
 80043a4:	e002      	b.n	80043ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295
 80043aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043ac:	687b      	ldr	r3, [r7, #4]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	200003dc 	.word	0x200003dc

080043bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08e      	sub	sp, #56	@ 0x38
 80043c0:	af04      	add	r7, sp, #16
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043cc:	f3ef 8305 	mrs	r3, IPSR
 80043d0:	617b      	str	r3, [r7, #20]
  return(result);
 80043d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d17e      	bne.n	80044d6 <osThreadNew+0x11a>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d07b      	beq.n	80044d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043de:	2380      	movs	r3, #128	@ 0x80
 80043e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80043e2:	2318      	movs	r3, #24
 80043e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80043ea:	f04f 33ff 	mov.w	r3, #4294967295
 80043ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d045      	beq.n	8004482 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <osThreadNew+0x48>
        name = attr->name;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <osThreadNew+0x6e>
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	2b38      	cmp	r3, #56	@ 0x38
 800441c:	d805      	bhi.n	800442a <osThreadNew+0x6e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <osThreadNew+0x72>
        return (NULL);
 800442a:	2300      	movs	r3, #0
 800442c:	e054      	b.n	80044d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	089b      	lsrs	r3, r3, #2
 800443c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00e      	beq.n	8004464 <osThreadNew+0xa8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2ba7      	cmp	r3, #167	@ 0xa7
 800444c:	d90a      	bls.n	8004464 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004452:	2b00      	cmp	r3, #0
 8004454:	d006      	beq.n	8004464 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <osThreadNew+0xa8>
        mem = 1;
 800445e:	2301      	movs	r3, #1
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	e010      	b.n	8004486 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10c      	bne.n	8004486 <osThreadNew+0xca>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d108      	bne.n	8004486 <osThreadNew+0xca>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d104      	bne.n	8004486 <osThreadNew+0xca>
          mem = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
 8004480:	e001      	b.n	8004486 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d110      	bne.n	80044ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004494:	9202      	str	r2, [sp, #8]
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	6a3a      	ldr	r2, [r7, #32]
 80044a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fe12 	bl	80050cc <xTaskCreateStatic>
 80044a8:	4603      	mov	r3, r0
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	e013      	b.n	80044d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d110      	bne.n	80044d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	f107 0310 	add.w	r3, r7, #16
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fe60 	bl	800518c <xTaskCreate>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d001      	beq.n	80044d6 <osThreadNew+0x11a>
            hTask = NULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044d6:	693b      	ldr	r3, [r7, #16]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3728      	adds	r7, #40	@ 0x28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e8:	f3ef 8305 	mrs	r3, IPSR
 80044ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80044ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <osDelay+0x1c>
    stat = osErrorISR;
 80044f4:	f06f 0305 	mvn.w	r3, #5
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e007      	b.n	800450c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 ff9e 	bl	8005448 <vTaskDelay>
    }
  }

  return (stat);
 800450c:	68fb      	ldr	r3, [r7, #12]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4a06      	ldr	r2, [pc, #24]	@ (8004540 <vApplicationGetIdleTaskMemory+0x28>)
 8004528:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	4a05      	ldr	r2, [pc, #20]	@ (8004544 <vApplicationGetIdleTaskMemory+0x2c>)
 800452e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2280      	movs	r2, #128	@ 0x80
 8004534:	601a      	str	r2, [r3, #0]
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	200003e0 	.word	0x200003e0
 8004544:	20000488 	.word	0x20000488

08004548 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a07      	ldr	r2, [pc, #28]	@ (8004574 <vApplicationGetTimerTaskMemory+0x2c>)
 8004558:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4a06      	ldr	r2, [pc, #24]	@ (8004578 <vApplicationGetTimerTaskMemory+0x30>)
 800455e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004566:	601a      	str	r2, [r3, #0]
}
 8004568:	bf00      	nop
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000688 	.word	0x20000688
 8004578:	20000730 	.word	0x20000730

0800457c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f103 0208 	add.w	r2, r3, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f04f 32ff 	mov.w	r2, #4294967295
 8004594:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f103 0208 	add.w	r2, r3, #8
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f103 0208 	add.w	r2, r3, #8
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr

080045ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr

080045d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	601a      	str	r2, [r3, #0]
}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr

08004618 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462e:	d103      	bne.n	8004638 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	e00c      	b.n	8004652 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3308      	adds	r3, #8
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e002      	b.n	8004646 <vListInsert+0x2e>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	429a      	cmp	r2, r3
 8004650:	d2f6      	bcs.n	8004640 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	601a      	str	r2, [r3, #0]
}
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6892      	ldr	r2, [r2, #8]
 800469e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6852      	ldr	r2, [r2, #4]
 80046a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d103      	bne.n	80046bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	1e5a      	subs	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr
	...

080046dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004702:	bf00      	nop
 8004704:	bf00      	nop
 8004706:	e7fd      	b.n	8004704 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004708:	f002 f860 	bl	80067cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004714:	68f9      	ldr	r1, [r7, #12]
 8004716:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	441a      	add	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004738:	3b01      	subs	r3, #1
 800473a:	68f9      	ldr	r1, [r7, #12]
 800473c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800473e:	fb01 f303 	mul.w	r3, r1, r3
 8004742:	441a      	add	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	22ff      	movs	r2, #255	@ 0xff
 800474c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	22ff      	movs	r2, #255	@ 0xff
 8004754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d114      	bne.n	8004788 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d01a      	beq.n	800479c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3310      	adds	r3, #16
 800476a:	4618      	mov	r0, r3
 800476c:	f001 f93c 	bl	80059e8 <xTaskRemoveFromEventList>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d012      	beq.n	800479c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004776:	4b0d      	ldr	r3, [pc, #52]	@ (80047ac <xQueueGenericReset+0xd0>)
 8004778:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	e009      	b.n	800479c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3310      	adds	r3, #16
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fef5 	bl	800457c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3324      	adds	r3, #36	@ 0x24
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fef0 	bl	800457c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800479c:	f002 f846 	bl	800682c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80047a0:	2301      	movs	r3, #1
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	e000ed04 	.word	0xe000ed04

080047b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08e      	sub	sp, #56	@ 0x38
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	e7fd      	b.n	80047f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <xQueueGenericCreateStatic+0x56>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <xQueueGenericCreateStatic+0x5a>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <xQueueGenericCreateStatic+0x5c>
 800480a:	2300      	movs	r3, #0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	623b      	str	r3, [r7, #32]
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	e7fd      	b.n	8004824 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <xQueueGenericCreateStatic+0x84>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <xQueueGenericCreateStatic+0x88>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <xQueueGenericCreateStatic+0x8a>
 8004838:	2300      	movs	r3, #0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	61fb      	str	r3, [r7, #28]
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	e7fd      	b.n	8004852 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004856:	2350      	movs	r3, #80	@ 0x50
 8004858:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b50      	cmp	r3, #80	@ 0x50
 800485e:	d00b      	beq.n	8004878 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	61bb      	str	r3, [r7, #24]
}
 8004872:	bf00      	nop
 8004874:	bf00      	nop
 8004876:	e7fd      	b.n	8004874 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004878:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800487e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00d      	beq.n	80048a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800488c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f805 	bl	80048aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3730      	adds	r7, #48	@ 0x30
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e002      	b.n	80048cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048d8:	2101      	movs	r1, #1
 80048da:	69b8      	ldr	r0, [r7, #24]
 80048dc:	f7ff fefe 	bl	80046dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08e      	sub	sp, #56	@ 0x38
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048fe:	2300      	movs	r3, #0
 8004900:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <xQueueGenericSend+0x34>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	e7fd      	b.n	8004920 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d103      	bne.n	8004932 <xQueueGenericSend+0x42>
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <xQueueGenericSend+0x46>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <xQueueGenericSend+0x48>
 8004936:	2300      	movs	r3, #0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <xQueueGenericSend+0x64>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800494e:	bf00      	nop
 8004950:	bf00      	nop
 8004952:	e7fd      	b.n	8004950 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d103      	bne.n	8004962 <xQueueGenericSend+0x72>
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <xQueueGenericSend+0x76>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <xQueueGenericSend+0x78>
 8004966:	2300      	movs	r3, #0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10b      	bne.n	8004984 <xQueueGenericSend+0x94>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	623b      	str	r3, [r7, #32]
}
 800497e:	bf00      	nop
 8004980:	bf00      	nop
 8004982:	e7fd      	b.n	8004980 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004984:	f001 f9f6 	bl	8005d74 <xTaskGetSchedulerState>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d102      	bne.n	8004994 <xQueueGenericSend+0xa4>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <xQueueGenericSend+0xa8>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <xQueueGenericSend+0xaa>
 8004998:	2300      	movs	r3, #0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10b      	bne.n	80049b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	61fb      	str	r3, [r7, #28]
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	e7fd      	b.n	80049b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049b6:	f001 ff09 	bl	80067cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d302      	bcc.n	80049cc <xQueueGenericSend+0xdc>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d129      	bne.n	8004a20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049d2:	f000 fa0f 	bl	8004df4 <prvCopyDataToQueue>
 80049d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d010      	beq.n	8004a02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e2:	3324      	adds	r3, #36	@ 0x24
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 ffff 	bl	80059e8 <xTaskRemoveFromEventList>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d013      	beq.n	8004a18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049f0:	4b3f      	ldr	r3, [pc, #252]	@ (8004af0 <xQueueGenericSend+0x200>)
 80049f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	e00a      	b.n	8004a18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a08:	4b39      	ldr	r3, [pc, #228]	@ (8004af0 <xQueueGenericSend+0x200>)
 8004a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a18:	f001 ff08 	bl	800682c <vPortExitCritical>
				return pdPASS;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e063      	b.n	8004ae8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d103      	bne.n	8004a2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a26:	f001 ff01 	bl	800682c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e05c      	b.n	8004ae8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d106      	bne.n	8004a42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a34:	f107 0314 	add.w	r3, r7, #20
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f001 f839 	bl	8005ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a42:	f001 fef3 	bl	800682c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a46:	f000 fda5 	bl	8005594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a4a:	f001 febf 	bl	80067cc <vPortEnterCritical>
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a54:	b25b      	sxtb	r3, r3
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5a:	d103      	bne.n	8004a64 <xQueueGenericSend+0x174>
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a6a:	b25b      	sxtb	r3, r3
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d103      	bne.n	8004a7a <xQueueGenericSend+0x18a>
 8004a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a7a:	f001 fed7 	bl	800682c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a7e:	1d3a      	adds	r2, r7, #4
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	4611      	mov	r1, r2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 f828 	bl	8005adc <xTaskCheckForTimeOut>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d124      	bne.n	8004adc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a94:	f000 faa6 	bl	8004fe4 <prvIsQueueFull>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d018      	beq.n	8004ad0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa0:	3310      	adds	r3, #16
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 ff4c 	bl	8005944 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004aac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aae:	f000 fa31 	bl	8004f14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ab2:	f000 fd7d 	bl	80055b0 <xTaskResumeAll>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f47f af7c 	bne.w	80049b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004abe:	4b0c      	ldr	r3, [pc, #48]	@ (8004af0 <xQueueGenericSend+0x200>)
 8004ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	e772      	b.n	80049b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ad2:	f000 fa1f 	bl	8004f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ad6:	f000 fd6b 	bl	80055b0 <xTaskResumeAll>
 8004ada:	e76c      	b.n	80049b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004adc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ade:	f000 fa19 	bl	8004f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ae2:	f000 fd65 	bl	80055b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ae6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3738      	adds	r7, #56	@ 0x38
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	e000ed04 	.word	0xe000ed04

08004af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b090      	sub	sp, #64	@ 0x40
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d103      	bne.n	8004b32 <xQueueGenericSendFromISR+0x3e>
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <xQueueGenericSendFromISR+0x42>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <xQueueGenericSendFromISR+0x44>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10b      	bne.n	8004b54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b4e:	bf00      	nop
 8004b50:	bf00      	nop
 8004b52:	e7fd      	b.n	8004b50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d103      	bne.n	8004b62 <xQueueGenericSendFromISR+0x6e>
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <xQueueGenericSendFromISR+0x72>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <xQueueGenericSendFromISR+0x74>
 8004b66:	2300      	movs	r3, #0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10b      	bne.n	8004b84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	623b      	str	r3, [r7, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	bf00      	nop
 8004b82:	e7fd      	b.n	8004b80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b84:	f001 fee4 	bl	8006950 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b88:	f3ef 8211 	mrs	r2, BASEPRI
 8004b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	61fa      	str	r2, [r7, #28]
 8004b9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ba2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d302      	bcc.n	8004bb6 <xQueueGenericSendFromISR+0xc2>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d12f      	bne.n	8004c16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004bcc:	f000 f912 	bl	8004df4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bd0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d112      	bne.n	8004c00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d016      	beq.n	8004c10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	3324      	adds	r3, #36	@ 0x24
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fefe 	bl	80059e8 <xTaskRemoveFromEventList>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00e      	beq.n	8004c10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00b      	beq.n	8004c10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e007      	b.n	8004c10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004c04:	3301      	adds	r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	b25a      	sxtb	r2, r3
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004c10:	2301      	movs	r3, #1
 8004c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004c14:	e001      	b.n	8004c1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3740      	adds	r7, #64	@ 0x40
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08c      	sub	sp, #48	@ 0x30
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <xQueueReceive+0x32>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	623b      	str	r3, [r7, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	e7fd      	b.n	8004c5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d103      	bne.n	8004c70 <xQueueReceive+0x40>
 8004c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <xQueueReceive+0x44>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <xQueueReceive+0x46>
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10b      	bne.n	8004c92 <xQueueReceive+0x62>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	61fb      	str	r3, [r7, #28]
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	e7fd      	b.n	8004c8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c92:	f001 f86f 	bl	8005d74 <xTaskGetSchedulerState>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d102      	bne.n	8004ca2 <xQueueReceive+0x72>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <xQueueReceive+0x76>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <xQueueReceive+0x78>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10b      	bne.n	8004cc4 <xQueueReceive+0x94>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	61bb      	str	r3, [r7, #24]
}
 8004cbe:	bf00      	nop
 8004cc0:	bf00      	nop
 8004cc2:	e7fd      	b.n	8004cc0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cc4:	f001 fd82 	bl	80067cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01f      	beq.n	8004d14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cd8:	f000 f8f6 	bl	8004ec8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cde:	1e5a      	subs	r2, r3, #1
 8004ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00f      	beq.n	8004d0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cee:	3310      	adds	r3, #16
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fe79 	bl	80059e8 <xTaskRemoveFromEventList>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8004df0 <xQueueReceive+0x1c0>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d0c:	f001 fd8e 	bl	800682c <vPortExitCritical>
				return pdPASS;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e069      	b.n	8004de8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d103      	bne.n	8004d22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d1a:	f001 fd87 	bl	800682c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e062      	b.n	8004de8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d28:	f107 0310 	add.w	r3, r7, #16
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 febf 	bl	8005ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d32:	2301      	movs	r3, #1
 8004d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d36:	f001 fd79 	bl	800682c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d3a:	f000 fc2b 	bl	8005594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d3e:	f001 fd45 	bl	80067cc <vPortEnterCritical>
 8004d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d48:	b25b      	sxtb	r3, r3
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d103      	bne.n	8004d58 <xQueueReceive+0x128>
 8004d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d5e:	b25b      	sxtb	r3, r3
 8004d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d64:	d103      	bne.n	8004d6e <xQueueReceive+0x13e>
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d6e:	f001 fd5d 	bl	800682c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d72:	1d3a      	adds	r2, r7, #4
 8004d74:	f107 0310 	add.w	r3, r7, #16
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 feae 	bl	8005adc <xTaskCheckForTimeOut>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d123      	bne.n	8004dce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d88:	f000 f916 	bl	8004fb8 <prvIsQueueEmpty>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d017      	beq.n	8004dc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d94:	3324      	adds	r3, #36	@ 0x24
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	4611      	mov	r1, r2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fdd2 	bl	8005944 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004da0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004da2:	f000 f8b7 	bl	8004f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004da6:	f000 fc03 	bl	80055b0 <xTaskResumeAll>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d189      	bne.n	8004cc4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004db0:	4b0f      	ldr	r3, [pc, #60]	@ (8004df0 <xQueueReceive+0x1c0>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	e780      	b.n	8004cc4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dc4:	f000 f8a6 	bl	8004f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dc8:	f000 fbf2 	bl	80055b0 <xTaskResumeAll>
 8004dcc:	e77a      	b.n	8004cc4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004dce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dd0:	f000 f8a0 	bl	8004f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dd4:	f000 fbec 	bl	80055b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dda:	f000 f8ed 	bl	8004fb8 <prvIsQueueEmpty>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f43f af6f 	beq.w	8004cc4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004de6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3730      	adds	r7, #48	@ 0x30
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	e000ed04 	.word	0xe000ed04

08004df4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10d      	bne.n	8004e2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d14d      	bne.n	8004eb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 ffc6 	bl	8005db0 <xTaskPriorityDisinherit>
 8004e24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	e043      	b.n	8004eb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d119      	bne.n	8004e68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6858      	ldr	r0, [r3, #4]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	f002 f83e 	bl	8006ec0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4c:	441a      	add	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d32b      	bcc.n	8004eb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	605a      	str	r2, [r3, #4]
 8004e66:	e026      	b.n	8004eb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68d8      	ldr	r0, [r3, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e70:	461a      	mov	r2, r3
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	f002 f824 	bl	8006ec0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	425b      	negs	r3, r3
 8004e82:	441a      	add	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d207      	bcs.n	8004ea4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	425b      	negs	r3, r3
 8004e9e:	441a      	add	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d105      	bne.n	8004eb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004ebe:	697b      	ldr	r3, [r7, #20]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d018      	beq.n	8004f0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	441a      	add	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d303      	bcc.n	8004efc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68d9      	ldr	r1, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f04:	461a      	mov	r2, r3
 8004f06:	6838      	ldr	r0, [r7, #0]
 8004f08:	f001 ffda 	bl	8006ec0 <memcpy>
	}
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f1c:	f001 fc56 	bl	80067cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f28:	e011      	b.n	8004f4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d012      	beq.n	8004f58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3324      	adds	r3, #36	@ 0x24
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fd56 	bl	80059e8 <xTaskRemoveFromEventList>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f42:	f000 fe2f 	bl	8005ba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	dce9      	bgt.n	8004f2a <prvUnlockQueue+0x16>
 8004f56:	e000      	b.n	8004f5a <prvUnlockQueue+0x46>
					break;
 8004f58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	22ff      	movs	r2, #255	@ 0xff
 8004f5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f62:	f001 fc63 	bl	800682c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f66:	f001 fc31 	bl	80067cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f72:	e011      	b.n	8004f98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d012      	beq.n	8004fa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3310      	adds	r3, #16
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fd31 	bl	80059e8 <xTaskRemoveFromEventList>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f8c:	f000 fe0a 	bl	8005ba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f90:	7bbb      	ldrb	r3, [r7, #14]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dce9      	bgt.n	8004f74 <prvUnlockQueue+0x60>
 8004fa0:	e000      	b.n	8004fa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	22ff      	movs	r2, #255	@ 0xff
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004fac:	f001 fc3e 	bl	800682c <vPortExitCritical>
}
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fc0:	f001 fc04 	bl	80067cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d102      	bne.n	8004fd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e001      	b.n	8004fd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fd6:	f001 fc29 	bl	800682c <vPortExitCritical>

	return xReturn;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fec:	f001 fbee 	bl	80067cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d102      	bne.n	8005002 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e001      	b.n	8005006 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005006:	f001 fc11 	bl	800682c <vPortExitCritical>

	return xReturn;
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e014      	b.n	800504e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005024:	4a0e      	ldr	r2, [pc, #56]	@ (8005060 <vQueueAddToRegistry+0x4c>)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10b      	bne.n	8005048 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005030:	490b      	ldr	r1, [pc, #44]	@ (8005060 <vQueueAddToRegistry+0x4c>)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800503a:	4a09      	ldr	r2, [pc, #36]	@ (8005060 <vQueueAddToRegistry+0x4c>)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005046:	e006      	b.n	8005056 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3301      	adds	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b07      	cmp	r3, #7
 8005052:	d9e7      	bls.n	8005024 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005054:	bf00      	nop
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr
 8005060:	20000b30 	.word	0x20000b30

08005064 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005074:	f001 fbaa 	bl	80067cc <vPortEnterCritical>
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800507e:	b25b      	sxtb	r3, r3
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d103      	bne.n	800508e <vQueueWaitForMessageRestricted+0x2a>
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005094:	b25b      	sxtb	r3, r3
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d103      	bne.n	80050a4 <vQueueWaitForMessageRestricted+0x40>
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050a4:	f001 fbc2 	bl	800682c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	3324      	adds	r3, #36	@ 0x24
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	68b9      	ldr	r1, [r7, #8]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fc69 	bl	8005990 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050be:	6978      	ldr	r0, [r7, #20]
 80050c0:	f7ff ff28 	bl	8004f14 <prvUnlockQueue>
	}
 80050c4:	bf00      	nop
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08e      	sub	sp, #56	@ 0x38
 80050d0:	af04      	add	r7, sp, #16
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10b      	bne.n	80050f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	623b      	str	r3, [r7, #32]
}
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10b      	bne.n	8005116 <xTaskCreateStatic+0x4a>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	61fb      	str	r3, [r7, #28]
}
 8005110:	bf00      	nop
 8005112:	bf00      	nop
 8005114:	e7fd      	b.n	8005112 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005116:	23a8      	movs	r3, #168	@ 0xa8
 8005118:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2ba8      	cmp	r3, #168	@ 0xa8
 800511e:	d00b      	beq.n	8005138 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	61bb      	str	r3, [r7, #24]
}
 8005132:	bf00      	nop
 8005134:	bf00      	nop
 8005136:	e7fd      	b.n	8005134 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005138:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01e      	beq.n	800517e <xTaskCreateStatic+0xb2>
 8005140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01b      	beq.n	800517e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005148:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800514e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	2202      	movs	r2, #2
 8005154:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005158:	2300      	movs	r3, #0
 800515a:	9303      	str	r3, [sp, #12]
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	9302      	str	r3, [sp, #8]
 8005160:	f107 0314 	add.w	r3, r7, #20
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f851 	bl	8005218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005176:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005178:	f000 f8f6 	bl	8005368 <prvAddNewTaskToReadyList>
 800517c:	e001      	b.n	8005182 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005182:	697b      	ldr	r3, [r7, #20]
	}
 8005184:	4618      	mov	r0, r3
 8005186:	3728      	adds	r7, #40	@ 0x28
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08c      	sub	sp, #48	@ 0x30
 8005190:	af04      	add	r7, sp, #16
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 fc15 	bl	80069d0 <pvPortMalloc>
 80051a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00e      	beq.n	80051cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051ae:	20a8      	movs	r0, #168	@ 0xa8
 80051b0:	f001 fc0e 	bl	80069d0 <pvPortMalloc>
 80051b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80051c2:	e005      	b.n	80051d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051c4:	6978      	ldr	r0, [r7, #20]
 80051c6:	f001 fcd1 	bl	8006b6c <vPortFree>
 80051ca:	e001      	b.n	80051d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d017      	beq.n	8005206 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051de:	88fa      	ldrh	r2, [r7, #6]
 80051e0:	2300      	movs	r3, #0
 80051e2:	9303      	str	r3, [sp, #12]
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	9302      	str	r3, [sp, #8]
 80051e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68b9      	ldr	r1, [r7, #8]
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f80f 	bl	8005218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051fa:	69f8      	ldr	r0, [r7, #28]
 80051fc:	f000 f8b4 	bl	8005368 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005200:	2301      	movs	r3, #1
 8005202:	61bb      	str	r3, [r7, #24]
 8005204:	e002      	b.n	800520c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800520c:	69bb      	ldr	r3, [r7, #24]
	}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005228:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	461a      	mov	r2, r3
 8005230:	21a5      	movs	r1, #165	@ 0xa5
 8005232:	f001 fdb9 	bl	8006da8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005240:	3b01      	subs	r3, #1
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f023 0307 	bic.w	r3, r3, #7
 800524e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00b      	beq.n	8005272 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	617b      	str	r3, [r7, #20]
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	e7fd      	b.n	800526e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01f      	beq.n	80052b8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005278:	2300      	movs	r3, #0
 800527a:	61fb      	str	r3, [r7, #28]
 800527c:	e012      	b.n	80052a4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	7819      	ldrb	r1, [r3, #0]
 8005286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	3334      	adds	r3, #52	@ 0x34
 800528e:	460a      	mov	r2, r1
 8005290:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d006      	beq.n	80052ac <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3301      	adds	r3, #1
 80052a2:	61fb      	str	r3, [r7, #28]
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	d9e9      	bls.n	800527e <prvInitialiseNewTask+0x66>
 80052aa:	e000      	b.n	80052ae <prvInitialiseNewTask+0x96>
			{
				break;
 80052ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052b6:	e003      	b.n	80052c0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c2:	2b37      	cmp	r3, #55	@ 0x37
 80052c4:	d901      	bls.n	80052ca <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052c6:	2337      	movs	r3, #55	@ 0x37
 80052c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d8:	2200      	movs	r2, #0
 80052da:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052de:	3304      	adds	r3, #4
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff f96a 	bl	80045ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	3318      	adds	r3, #24
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff f965 	bl	80045ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005304:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005308:	2200      	movs	r2, #0
 800530a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005310:	2200      	movs	r2, #0
 8005312:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005318:	3354      	adds	r3, #84	@ 0x54
 800531a:	224c      	movs	r2, #76	@ 0x4c
 800531c:	2100      	movs	r1, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f001 fd42 	bl	8006da8 <memset>
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	4a0d      	ldr	r2, [pc, #52]	@ (800535c <prvInitialiseNewTask+0x144>)
 8005328:	659a      	str	r2, [r3, #88]	@ 0x58
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	4a0c      	ldr	r2, [pc, #48]	@ (8005360 <prvInitialiseNewTask+0x148>)
 800532e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005332:	4a0c      	ldr	r2, [pc, #48]	@ (8005364 <prvInitialiseNewTask+0x14c>)
 8005334:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	68f9      	ldr	r1, [r7, #12]
 800533a:	69b8      	ldr	r0, [r7, #24]
 800533c:	f001 f954 	bl	80065e8 <pxPortInitialiseStack>
 8005340:	4602      	mov	r2, r0
 8005342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005344:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800534c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005352:	bf00      	nop
 8005354:	3720      	adds	r7, #32
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20001dc4 	.word	0x20001dc4
 8005360:	20001e2c 	.word	0x20001e2c
 8005364:	20001e94 	.word	0x20001e94

08005368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005370:	f001 fa2c 	bl	80067cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005374:	4b2d      	ldr	r3, [pc, #180]	@ (800542c <prvAddNewTaskToReadyList+0xc4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3301      	adds	r3, #1
 800537a:	4a2c      	ldr	r2, [pc, #176]	@ (800542c <prvAddNewTaskToReadyList+0xc4>)
 800537c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800537e:	4b2c      	ldr	r3, [pc, #176]	@ (8005430 <prvAddNewTaskToReadyList+0xc8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005386:	4a2a      	ldr	r2, [pc, #168]	@ (8005430 <prvAddNewTaskToReadyList+0xc8>)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800538c:	4b27      	ldr	r3, [pc, #156]	@ (800542c <prvAddNewTaskToReadyList+0xc4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d110      	bne.n	80053b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005394:	f000 fc2a 	bl	8005bec <prvInitialiseTaskLists>
 8005398:	e00d      	b.n	80053b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800539a:	4b26      	ldr	r3, [pc, #152]	@ (8005434 <prvAddNewTaskToReadyList+0xcc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053a2:	4b23      	ldr	r3, [pc, #140]	@ (8005430 <prvAddNewTaskToReadyList+0xc8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d802      	bhi.n	80053b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005430 <prvAddNewTaskToReadyList+0xc8>)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053b6:	4b20      	ldr	r3, [pc, #128]	@ (8005438 <prvAddNewTaskToReadyList+0xd0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3301      	adds	r3, #1
 80053bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005438 <prvAddNewTaskToReadyList+0xd0>)
 80053be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005438 <prvAddNewTaskToReadyList+0xd0>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053cc:	4b1b      	ldr	r3, [pc, #108]	@ (800543c <prvAddNewTaskToReadyList+0xd4>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d903      	bls.n	80053dc <prvAddNewTaskToReadyList+0x74>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d8:	4a18      	ldr	r2, [pc, #96]	@ (800543c <prvAddNewTaskToReadyList+0xd4>)
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4a15      	ldr	r2, [pc, #84]	@ (8005440 <prvAddNewTaskToReadyList+0xd8>)
 80053ea:	441a      	add	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f7ff f8ed 	bl	80045d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053f8:	f001 fa18 	bl	800682c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005434 <prvAddNewTaskToReadyList+0xcc>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00e      	beq.n	8005422 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005404:	4b0a      	ldr	r3, [pc, #40]	@ (8005430 <prvAddNewTaskToReadyList+0xc8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	429a      	cmp	r2, r3
 8005410:	d207      	bcs.n	8005422 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005412:	4b0c      	ldr	r3, [pc, #48]	@ (8005444 <prvAddNewTaskToReadyList+0xdc>)
 8005414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20001044 	.word	0x20001044
 8005430:	20000b70 	.word	0x20000b70
 8005434:	20001050 	.word	0x20001050
 8005438:	20001060 	.word	0x20001060
 800543c:	2000104c 	.word	0x2000104c
 8005440:	20000b74 	.word	0x20000b74
 8005444:	e000ed04 	.word	0xe000ed04

08005448 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d018      	beq.n	800548c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800545a:	4b14      	ldr	r3, [pc, #80]	@ (80054ac <vTaskDelay+0x64>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <vTaskDelay+0x32>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	60bb      	str	r3, [r7, #8]
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	e7fd      	b.n	8005476 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800547a:	f000 f88b 	bl	8005594 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800547e:	2100      	movs	r1, #0
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fd05 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005486:	f000 f893 	bl	80055b0 <xTaskResumeAll>
 800548a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d107      	bne.n	80054a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005492:	4b07      	ldr	r3, [pc, #28]	@ (80054b0 <vTaskDelay+0x68>)
 8005494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	2000106c 	.word	0x2000106c
 80054b0:	e000ed04 	.word	0xe000ed04

080054b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08a      	sub	sp, #40	@ 0x28
 80054b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054c2:	463a      	mov	r2, r7
 80054c4:	1d39      	adds	r1, r7, #4
 80054c6:	f107 0308 	add.w	r3, r7, #8
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff f824 	bl	8004518 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	9202      	str	r2, [sp, #8]
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	2300      	movs	r3, #0
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	2300      	movs	r3, #0
 80054e0:	460a      	mov	r2, r1
 80054e2:	4924      	ldr	r1, [pc, #144]	@ (8005574 <vTaskStartScheduler+0xc0>)
 80054e4:	4824      	ldr	r0, [pc, #144]	@ (8005578 <vTaskStartScheduler+0xc4>)
 80054e6:	f7ff fdf1 	bl	80050cc <xTaskCreateStatic>
 80054ea:	4603      	mov	r3, r0
 80054ec:	4a23      	ldr	r2, [pc, #140]	@ (800557c <vTaskStartScheduler+0xc8>)
 80054ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054f0:	4b22      	ldr	r3, [pc, #136]	@ (800557c <vTaskStartScheduler+0xc8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054f8:	2301      	movs	r3, #1
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e001      	b.n	8005502 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d102      	bne.n	800550e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005508:	f000 fd16 	bl	8005f38 <xTimerCreateTimerTask>
 800550c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d11b      	bne.n	800554c <vTaskStartScheduler+0x98>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	613b      	str	r3, [r7, #16]
}
 8005526:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005528:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <vTaskStartScheduler+0xcc>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3354      	adds	r3, #84	@ 0x54
 800552e:	4a15      	ldr	r2, [pc, #84]	@ (8005584 <vTaskStartScheduler+0xd0>)
 8005530:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005532:	4b15      	ldr	r3, [pc, #84]	@ (8005588 <vTaskStartScheduler+0xd4>)
 8005534:	f04f 32ff 	mov.w	r2, #4294967295
 8005538:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800553a:	4b14      	ldr	r3, [pc, #80]	@ (800558c <vTaskStartScheduler+0xd8>)
 800553c:	2201      	movs	r2, #1
 800553e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005540:	4b13      	ldr	r3, [pc, #76]	@ (8005590 <vTaskStartScheduler+0xdc>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005546:	f001 f8cf 	bl	80066e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800554a:	e00f      	b.n	800556c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005552:	d10b      	bne.n	800556c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	60fb      	str	r3, [r7, #12]
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	e7fd      	b.n	8005568 <vTaskStartScheduler+0xb4>
}
 800556c:	bf00      	nop
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	08006fcc 	.word	0x08006fcc
 8005578:	08005bbd 	.word	0x08005bbd
 800557c:	20001068 	.word	0x20001068
 8005580:	20000b70 	.word	0x20000b70
 8005584:	20000010 	.word	0x20000010
 8005588:	20001064 	.word	0x20001064
 800558c:	20001050 	.word	0x20001050
 8005590:	20001048 	.word	0x20001048

08005594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005598:	4b04      	ldr	r3, [pc, #16]	@ (80055ac <vTaskSuspendAll+0x18>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3301      	adds	r3, #1
 800559e:	4a03      	ldr	r2, [pc, #12]	@ (80055ac <vTaskSuspendAll+0x18>)
 80055a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055a2:	bf00      	nop
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	2000106c 	.word	0x2000106c

080055b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055be:	4b42      	ldr	r3, [pc, #264]	@ (80056c8 <xTaskResumeAll+0x118>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10b      	bne.n	80055de <xTaskResumeAll+0x2e>
	__asm volatile
 80055c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	603b      	str	r3, [r7, #0]
}
 80055d8:	bf00      	nop
 80055da:	bf00      	nop
 80055dc:	e7fd      	b.n	80055da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055de:	f001 f8f5 	bl	80067cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055e2:	4b39      	ldr	r3, [pc, #228]	@ (80056c8 <xTaskResumeAll+0x118>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	4a37      	ldr	r2, [pc, #220]	@ (80056c8 <xTaskResumeAll+0x118>)
 80055ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ec:	4b36      	ldr	r3, [pc, #216]	@ (80056c8 <xTaskResumeAll+0x118>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d162      	bne.n	80056ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055f4:	4b35      	ldr	r3, [pc, #212]	@ (80056cc <xTaskResumeAll+0x11c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d05e      	beq.n	80056ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055fc:	e02f      	b.n	800565e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055fe:	4b34      	ldr	r3, [pc, #208]	@ (80056d0 <xTaskResumeAll+0x120>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3318      	adds	r3, #24
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff f83c 	bl	8004688 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3304      	adds	r3, #4
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff f837 	bl	8004688 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561e:	4b2d      	ldr	r3, [pc, #180]	@ (80056d4 <xTaskResumeAll+0x124>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d903      	bls.n	800562e <xTaskResumeAll+0x7e>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562a:	4a2a      	ldr	r2, [pc, #168]	@ (80056d4 <xTaskResumeAll+0x124>)
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4a27      	ldr	r2, [pc, #156]	@ (80056d8 <xTaskResumeAll+0x128>)
 800563c:	441a      	add	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3304      	adds	r3, #4
 8005642:	4619      	mov	r1, r3
 8005644:	4610      	mov	r0, r2
 8005646:	f7fe ffc4 	bl	80045d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564e:	4b23      	ldr	r3, [pc, #140]	@ (80056dc <xTaskResumeAll+0x12c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	429a      	cmp	r2, r3
 8005656:	d302      	bcc.n	800565e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005658:	4b21      	ldr	r3, [pc, #132]	@ (80056e0 <xTaskResumeAll+0x130>)
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800565e:	4b1c      	ldr	r3, [pc, #112]	@ (80056d0 <xTaskResumeAll+0x120>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1cb      	bne.n	80055fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800566c:	f000 fb62 	bl	8005d34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005670:	4b1c      	ldr	r3, [pc, #112]	@ (80056e4 <xTaskResumeAll+0x134>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d010      	beq.n	800569e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800567c:	f000 f844 	bl	8005708 <xTaskIncrementTick>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005686:	4b16      	ldr	r3, [pc, #88]	@ (80056e0 <xTaskResumeAll+0x130>)
 8005688:	2201      	movs	r2, #1
 800568a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3b01      	subs	r3, #1
 8005690:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1f1      	bne.n	800567c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005698:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <xTaskResumeAll+0x134>)
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800569e:	4b10      	ldr	r3, [pc, #64]	@ (80056e0 <xTaskResumeAll+0x130>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056a6:	2301      	movs	r3, #1
 80056a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056aa:	4b0f      	ldr	r3, [pc, #60]	@ (80056e8 <xTaskResumeAll+0x138>)
 80056ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056ba:	f001 f8b7 	bl	800682c <vPortExitCritical>

	return xAlreadyYielded;
 80056be:	68bb      	ldr	r3, [r7, #8]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	2000106c 	.word	0x2000106c
 80056cc:	20001044 	.word	0x20001044
 80056d0:	20001004 	.word	0x20001004
 80056d4:	2000104c 	.word	0x2000104c
 80056d8:	20000b74 	.word	0x20000b74
 80056dc:	20000b70 	.word	0x20000b70
 80056e0:	20001058 	.word	0x20001058
 80056e4:	20001054 	.word	0x20001054
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056f2:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <xTaskGetTickCount+0x18>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056f8:	687b      	ldr	r3, [r7, #4]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	20001048 	.word	0x20001048

08005708 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005712:	4b4f      	ldr	r3, [pc, #316]	@ (8005850 <xTaskIncrementTick+0x148>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	f040 8090 	bne.w	800583c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800571c:	4b4d      	ldr	r3, [pc, #308]	@ (8005854 <xTaskIncrementTick+0x14c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005724:	4a4b      	ldr	r2, [pc, #300]	@ (8005854 <xTaskIncrementTick+0x14c>)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d121      	bne.n	8005774 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005730:	4b49      	ldr	r3, [pc, #292]	@ (8005858 <xTaskIncrementTick+0x150>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00b      	beq.n	8005752 <xTaskIncrementTick+0x4a>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	603b      	str	r3, [r7, #0]
}
 800574c:	bf00      	nop
 800574e:	bf00      	nop
 8005750:	e7fd      	b.n	800574e <xTaskIncrementTick+0x46>
 8005752:	4b41      	ldr	r3, [pc, #260]	@ (8005858 <xTaskIncrementTick+0x150>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	4b40      	ldr	r3, [pc, #256]	@ (800585c <xTaskIncrementTick+0x154>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a3e      	ldr	r2, [pc, #248]	@ (8005858 <xTaskIncrementTick+0x150>)
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	4a3e      	ldr	r2, [pc, #248]	@ (800585c <xTaskIncrementTick+0x154>)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	4b3e      	ldr	r3, [pc, #248]	@ (8005860 <xTaskIncrementTick+0x158>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3301      	adds	r3, #1
 800576c:	4a3c      	ldr	r2, [pc, #240]	@ (8005860 <xTaskIncrementTick+0x158>)
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	f000 fae0 	bl	8005d34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005774:	4b3b      	ldr	r3, [pc, #236]	@ (8005864 <xTaskIncrementTick+0x15c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	429a      	cmp	r2, r3
 800577c:	d349      	bcc.n	8005812 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800577e:	4b36      	ldr	r3, [pc, #216]	@ (8005858 <xTaskIncrementTick+0x150>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d104      	bne.n	8005792 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005788:	4b36      	ldr	r3, [pc, #216]	@ (8005864 <xTaskIncrementTick+0x15c>)
 800578a:	f04f 32ff 	mov.w	r2, #4294967295
 800578e:	601a      	str	r2, [r3, #0]
					break;
 8005790:	e03f      	b.n	8005812 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005792:	4b31      	ldr	r3, [pc, #196]	@ (8005858 <xTaskIncrementTick+0x150>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d203      	bcs.n	80057b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005864 <xTaskIncrementTick+0x15c>)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057b0:	e02f      	b.n	8005812 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	3304      	adds	r3, #4
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe ff66 	bl	8004688 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d004      	beq.n	80057ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	3318      	adds	r3, #24
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fe ff5d 	bl	8004688 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d2:	4b25      	ldr	r3, [pc, #148]	@ (8005868 <xTaskIncrementTick+0x160>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d903      	bls.n	80057e2 <xTaskIncrementTick+0xda>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057de:	4a22      	ldr	r2, [pc, #136]	@ (8005868 <xTaskIncrementTick+0x160>)
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4a1f      	ldr	r2, [pc, #124]	@ (800586c <xTaskIncrementTick+0x164>)
 80057f0:	441a      	add	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f7fe feea 	bl	80045d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005802:	4b1b      	ldr	r3, [pc, #108]	@ (8005870 <xTaskIncrementTick+0x168>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	429a      	cmp	r2, r3
 800580a:	d3b8      	bcc.n	800577e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800580c:	2301      	movs	r3, #1
 800580e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005810:	e7b5      	b.n	800577e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005812:	4b17      	ldr	r3, [pc, #92]	@ (8005870 <xTaskIncrementTick+0x168>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005818:	4914      	ldr	r1, [pc, #80]	@ (800586c <xTaskIncrementTick+0x164>)
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d901      	bls.n	800582e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800582a:	2301      	movs	r3, #1
 800582c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800582e:	4b11      	ldr	r3, [pc, #68]	@ (8005874 <xTaskIncrementTick+0x16c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005836:	2301      	movs	r3, #1
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	e004      	b.n	8005846 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800583c:	4b0e      	ldr	r3, [pc, #56]	@ (8005878 <xTaskIncrementTick+0x170>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3301      	adds	r3, #1
 8005842:	4a0d      	ldr	r2, [pc, #52]	@ (8005878 <xTaskIncrementTick+0x170>)
 8005844:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005846:	697b      	ldr	r3, [r7, #20]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	2000106c 	.word	0x2000106c
 8005854:	20001048 	.word	0x20001048
 8005858:	20000ffc 	.word	0x20000ffc
 800585c:	20001000 	.word	0x20001000
 8005860:	2000105c 	.word	0x2000105c
 8005864:	20001064 	.word	0x20001064
 8005868:	2000104c 	.word	0x2000104c
 800586c:	20000b74 	.word	0x20000b74
 8005870:	20000b70 	.word	0x20000b70
 8005874:	20001058 	.word	0x20001058
 8005878:	20001054 	.word	0x20001054

0800587c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005882:	4b2a      	ldr	r3, [pc, #168]	@ (800592c <vTaskSwitchContext+0xb0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800588a:	4b29      	ldr	r3, [pc, #164]	@ (8005930 <vTaskSwitchContext+0xb4>)
 800588c:	2201      	movs	r2, #1
 800588e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005890:	e047      	b.n	8005922 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005892:	4b27      	ldr	r3, [pc, #156]	@ (8005930 <vTaskSwitchContext+0xb4>)
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005898:	4b26      	ldr	r3, [pc, #152]	@ (8005934 <vTaskSwitchContext+0xb8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	e011      	b.n	80058c4 <vTaskSwitchContext+0x48>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <vTaskSwitchContext+0x42>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	607b      	str	r3, [r7, #4]
}
 80058b8:	bf00      	nop
 80058ba:	bf00      	nop
 80058bc:	e7fd      	b.n	80058ba <vTaskSwitchContext+0x3e>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	491c      	ldr	r1, [pc, #112]	@ (8005938 <vTaskSwitchContext+0xbc>)
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0e3      	beq.n	80058a0 <vTaskSwitchContext+0x24>
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4a15      	ldr	r2, [pc, #84]	@ (8005938 <vTaskSwitchContext+0xbc>)
 80058e4:	4413      	add	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	3308      	adds	r3, #8
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d104      	bne.n	8005908 <vTaskSwitchContext+0x8c>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	605a      	str	r2, [r3, #4]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	4a0b      	ldr	r2, [pc, #44]	@ (800593c <vTaskSwitchContext+0xc0>)
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	4a08      	ldr	r2, [pc, #32]	@ (8005934 <vTaskSwitchContext+0xb8>)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005918:	4b08      	ldr	r3, [pc, #32]	@ (800593c <vTaskSwitchContext+0xc0>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3354      	adds	r3, #84	@ 0x54
 800591e:	4a08      	ldr	r2, [pc, #32]	@ (8005940 <vTaskSwitchContext+0xc4>)
 8005920:	6013      	str	r3, [r2, #0]
}
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr
 800592c:	2000106c 	.word	0x2000106c
 8005930:	20001058 	.word	0x20001058
 8005934:	2000104c 	.word	0x2000104c
 8005938:	20000b74 	.word	0x20000b74
 800593c:	20000b70 	.word	0x20000b70
 8005940:	20000010 	.word	0x20000010

08005944 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10b      	bne.n	800596c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	60fb      	str	r3, [r7, #12]
}
 8005966:	bf00      	nop
 8005968:	bf00      	nop
 800596a:	e7fd      	b.n	8005968 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800596c:	4b07      	ldr	r3, [pc, #28]	@ (800598c <vTaskPlaceOnEventList+0x48>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3318      	adds	r3, #24
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7fe fe4f 	bl	8004618 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800597a:	2101      	movs	r1, #1
 800597c:	6838      	ldr	r0, [r7, #0]
 800597e:	f000 fa87 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000b70 	.word	0x20000b70

08005990 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	617b      	str	r3, [r7, #20]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059ba:	4b0a      	ldr	r3, [pc, #40]	@ (80059e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3318      	adds	r3, #24
 80059c0:	4619      	mov	r1, r3
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f7fe fe05 	bl	80045d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80059ce:	f04f 33ff 	mov.w	r3, #4294967295
 80059d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	68b8      	ldr	r0, [r7, #8]
 80059d8:	f000 fa5a 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
	}
 80059dc:	bf00      	nop
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20000b70 	.word	0x20000b70

080059e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10b      	bne.n	8005a16 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	60fb      	str	r3, [r7, #12]
}
 8005a10:	bf00      	nop
 8005a12:	bf00      	nop
 8005a14:	e7fd      	b.n	8005a12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	3318      	adds	r3, #24
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fe fe34 	bl	8004688 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a20:	4b1d      	ldr	r3, [pc, #116]	@ (8005a98 <xTaskRemoveFromEventList+0xb0>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d11d      	bne.n	8005a64 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe fe2b 	bl	8004688 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a36:	4b19      	ldr	r3, [pc, #100]	@ (8005a9c <xTaskRemoveFromEventList+0xb4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d903      	bls.n	8005a46 <xTaskRemoveFromEventList+0x5e>
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a42:	4a16      	ldr	r2, [pc, #88]	@ (8005a9c <xTaskRemoveFromEventList+0xb4>)
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4a13      	ldr	r2, [pc, #76]	@ (8005aa0 <xTaskRemoveFromEventList+0xb8>)
 8005a54:	441a      	add	r2, r3
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	f7fe fdb8 	bl	80045d2 <vListInsertEnd>
 8005a62:	e005      	b.n	8005a70 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	3318      	adds	r3, #24
 8005a68:	4619      	mov	r1, r3
 8005a6a:	480e      	ldr	r0, [pc, #56]	@ (8005aa4 <xTaskRemoveFromEventList+0xbc>)
 8005a6c:	f7fe fdb1 	bl	80045d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a74:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa8 <xTaskRemoveFromEventList+0xc0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d905      	bls.n	8005a8a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a82:	4b0a      	ldr	r3, [pc, #40]	@ (8005aac <xTaskRemoveFromEventList+0xc4>)
 8005a84:	2201      	movs	r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e001      	b.n	8005a8e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a8e:	697b      	ldr	r3, [r7, #20]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	2000106c 	.word	0x2000106c
 8005a9c:	2000104c 	.word	0x2000104c
 8005aa0:	20000b74 	.word	0x20000b74
 8005aa4:	20001004 	.word	0x20001004
 8005aa8:	20000b70 	.word	0x20000b70
 8005aac:	20001058 	.word	0x20001058

08005ab0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ab8:	4b06      	ldr	r3, [pc, #24]	@ (8005ad4 <vTaskInternalSetTimeOutState+0x24>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ac0:	4b05      	ldr	r3, [pc, #20]	@ (8005ad8 <vTaskInternalSetTimeOutState+0x28>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	605a      	str	r2, [r3, #4]
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	2000105c 	.word	0x2000105c
 8005ad8:	20001048 	.word	0x20001048

08005adc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10b      	bne.n	8005b04 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	613b      	str	r3, [r7, #16]
}
 8005afe:	bf00      	nop
 8005b00:	bf00      	nop
 8005b02:	e7fd      	b.n	8005b00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10b      	bne.n	8005b22 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	60fb      	str	r3, [r7, #12]
}
 8005b1c:	bf00      	nop
 8005b1e:	bf00      	nop
 8005b20:	e7fd      	b.n	8005b1e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005b22:	f000 fe53 	bl	80067cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b26:	4b1d      	ldr	r3, [pc, #116]	@ (8005b9c <xTaskCheckForTimeOut+0xc0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3e:	d102      	bne.n	8005b46 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	e023      	b.n	8005b8e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4b15      	ldr	r3, [pc, #84]	@ (8005ba0 <xTaskCheckForTimeOut+0xc4>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d007      	beq.n	8005b62 <xTaskCheckForTimeOut+0x86>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d302      	bcc.n	8005b62 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	e015      	b.n	8005b8e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d20b      	bcs.n	8005b84 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	1ad2      	subs	r2, r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff ff99 	bl	8005ab0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	61fb      	str	r3, [r7, #28]
 8005b82:	e004      	b.n	8005b8e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b8e:	f000 fe4d 	bl	800682c <vPortExitCritical>

	return xReturn;
 8005b92:	69fb      	ldr	r3, [r7, #28]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3720      	adds	r7, #32
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20001048 	.word	0x20001048
 8005ba0:	2000105c 	.word	0x2000105c

08005ba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ba8:	4b03      	ldr	r3, [pc, #12]	@ (8005bb8 <vTaskMissedYield+0x14>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	601a      	str	r2, [r3, #0]
}
 8005bae:	bf00      	nop
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	20001058 	.word	0x20001058

08005bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bc4:	f000 f852 	bl	8005c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bc8:	4b06      	ldr	r3, [pc, #24]	@ (8005be4 <prvIdleTask+0x28>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d9f9      	bls.n	8005bc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bd0:	4b05      	ldr	r3, [pc, #20]	@ (8005be8 <prvIdleTask+0x2c>)
 8005bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005be0:	e7f0      	b.n	8005bc4 <prvIdleTask+0x8>
 8005be2:	bf00      	nop
 8005be4:	20000b74 	.word	0x20000b74
 8005be8:	e000ed04 	.word	0xe000ed04

08005bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	607b      	str	r3, [r7, #4]
 8005bf6:	e00c      	b.n	8005c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4a12      	ldr	r2, [pc, #72]	@ (8005c4c <prvInitialiseTaskLists+0x60>)
 8005c04:	4413      	add	r3, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fcb8 	bl	800457c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	607b      	str	r3, [r7, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b37      	cmp	r3, #55	@ 0x37
 8005c16:	d9ef      	bls.n	8005bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c18:	480d      	ldr	r0, [pc, #52]	@ (8005c50 <prvInitialiseTaskLists+0x64>)
 8005c1a:	f7fe fcaf 	bl	800457c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c1e:	480d      	ldr	r0, [pc, #52]	@ (8005c54 <prvInitialiseTaskLists+0x68>)
 8005c20:	f7fe fcac 	bl	800457c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c24:	480c      	ldr	r0, [pc, #48]	@ (8005c58 <prvInitialiseTaskLists+0x6c>)
 8005c26:	f7fe fca9 	bl	800457c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c2a:	480c      	ldr	r0, [pc, #48]	@ (8005c5c <prvInitialiseTaskLists+0x70>)
 8005c2c:	f7fe fca6 	bl	800457c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c30:	480b      	ldr	r0, [pc, #44]	@ (8005c60 <prvInitialiseTaskLists+0x74>)
 8005c32:	f7fe fca3 	bl	800457c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c36:	4b0b      	ldr	r3, [pc, #44]	@ (8005c64 <prvInitialiseTaskLists+0x78>)
 8005c38:	4a05      	ldr	r2, [pc, #20]	@ (8005c50 <prvInitialiseTaskLists+0x64>)
 8005c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c68 <prvInitialiseTaskLists+0x7c>)
 8005c3e:	4a05      	ldr	r2, [pc, #20]	@ (8005c54 <prvInitialiseTaskLists+0x68>)
 8005c40:	601a      	str	r2, [r3, #0]
}
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000b74 	.word	0x20000b74
 8005c50:	20000fd4 	.word	0x20000fd4
 8005c54:	20000fe8 	.word	0x20000fe8
 8005c58:	20001004 	.word	0x20001004
 8005c5c:	20001018 	.word	0x20001018
 8005c60:	20001030 	.word	0x20001030
 8005c64:	20000ffc 	.word	0x20000ffc
 8005c68:	20001000 	.word	0x20001000

08005c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c72:	e019      	b.n	8005ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c74:	f000 fdaa 	bl	80067cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c78:	4b10      	ldr	r3, [pc, #64]	@ (8005cbc <prvCheckTasksWaitingTermination+0x50>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3304      	adds	r3, #4
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fe fcff 	bl	8004688 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc0 <prvCheckTasksWaitingTermination+0x54>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	4a0b      	ldr	r2, [pc, #44]	@ (8005cc0 <prvCheckTasksWaitingTermination+0x54>)
 8005c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c94:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc4 <prvCheckTasksWaitingTermination+0x58>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005cc4 <prvCheckTasksWaitingTermination+0x58>)
 8005c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c9e:	f000 fdc5 	bl	800682c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f810 	bl	8005cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ca8:	4b06      	ldr	r3, [pc, #24]	@ (8005cc4 <prvCheckTasksWaitingTermination+0x58>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e1      	bne.n	8005c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20001018 	.word	0x20001018
 8005cc0:	20001044 	.word	0x20001044
 8005cc4:	2000102c 	.word	0x2000102c

08005cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3354      	adds	r3, #84	@ 0x54
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f001 f86f 	bl	8006db8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d108      	bne.n	8005cf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 ff3f 	bl	8006b6c <vPortFree>
				vPortFree( pxTCB );
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 ff3c 	bl	8006b6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cf4:	e019      	b.n	8005d2a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d103      	bne.n	8005d08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 ff33 	bl	8006b6c <vPortFree>
	}
 8005d06:	e010      	b.n	8005d2a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d00b      	beq.n	8005d2a <prvDeleteTCB+0x62>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	60fb      	str	r3, [r7, #12]
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop
 8005d28:	e7fd      	b.n	8005d26 <prvDeleteTCB+0x5e>
	}
 8005d2a:	bf00      	nop
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d6c <prvResetNextTaskUnblockTime+0x38>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d104      	bne.n	8005d4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d44:	4b0a      	ldr	r3, [pc, #40]	@ (8005d70 <prvResetNextTaskUnblockTime+0x3c>)
 8005d46:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d4c:	e008      	b.n	8005d60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d4e:	4b07      	ldr	r3, [pc, #28]	@ (8005d6c <prvResetNextTaskUnblockTime+0x38>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4a04      	ldr	r2, [pc, #16]	@ (8005d70 <prvResetNextTaskUnblockTime+0x3c>)
 8005d5e:	6013      	str	r3, [r2, #0]
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bc80      	pop	{r7}
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000ffc 	.word	0x20000ffc
 8005d70:	20001064 	.word	0x20001064

08005d74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005da8 <xTaskGetSchedulerState+0x34>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d82:	2301      	movs	r3, #1
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	e008      	b.n	8005d9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d88:	4b08      	ldr	r3, [pc, #32]	@ (8005dac <xTaskGetSchedulerState+0x38>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d102      	bne.n	8005d96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d90:	2302      	movs	r3, #2
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	e001      	b.n	8005d9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d96:	2300      	movs	r3, #0
 8005d98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d9a:	687b      	ldr	r3, [r7, #4]
	}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	20001050 	.word	0x20001050
 8005dac:	2000106c 	.word	0x2000106c

08005db0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d058      	beq.n	8005e78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8005e84 <xTaskPriorityDisinherit+0xd4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d00b      	beq.n	8005de8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	60fb      	str	r3, [r7, #12]
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	e7fd      	b.n	8005de4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	60bb      	str	r3, [r7, #8]
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e0c:	1e5a      	subs	r2, r3, #1
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d02c      	beq.n	8005e78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d128      	bne.n	8005e78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	3304      	adds	r3, #4
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe fc2c 	bl	8004688 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e48:	4b0f      	ldr	r3, [pc, #60]	@ (8005e88 <xTaskPriorityDisinherit+0xd8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d903      	bls.n	8005e58 <xTaskPriorityDisinherit+0xa8>
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	4a0c      	ldr	r2, [pc, #48]	@ (8005e88 <xTaskPriorityDisinherit+0xd8>)
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4a09      	ldr	r2, [pc, #36]	@ (8005e8c <xTaskPriorityDisinherit+0xdc>)
 8005e66:	441a      	add	r2, r3
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f7fe fbaf 	bl	80045d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e78:	697b      	ldr	r3, [r7, #20]
	}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000b70 	.word	0x20000b70
 8005e88:	2000104c 	.word	0x2000104c
 8005e8c:	20000b74 	.word	0x20000b74

08005e90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e9a:	4b21      	ldr	r3, [pc, #132]	@ (8005f20 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ea0:	4b20      	ldr	r3, [pc, #128]	@ (8005f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fbee 	bl	8004688 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb2:	d10a      	bne.n	8005eca <prvAddCurrentTaskToDelayedList+0x3a>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d007      	beq.n	8005eca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eba:	4b1a      	ldr	r3, [pc, #104]	@ (8005f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4819      	ldr	r0, [pc, #100]	@ (8005f28 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ec4:	f7fe fb85 	bl	80045d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ec8:	e026      	b.n	8005f18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4413      	add	r3, r2
 8005ed0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ed2:	4b14      	ldr	r3, [pc, #80]	@ (8005f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d209      	bcs.n	8005ef6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ee2:	4b12      	ldr	r3, [pc, #72]	@ (8005f2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f7fe fb92 	bl	8004618 <vListInsert>
}
 8005ef4:	e010      	b.n	8005f18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8005f30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	4b0a      	ldr	r3, [pc, #40]	@ (8005f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f7fe fb88 	bl	8004618 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f08:	4b0a      	ldr	r3, [pc, #40]	@ (8005f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d202      	bcs.n	8005f18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f12:	4a08      	ldr	r2, [pc, #32]	@ (8005f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6013      	str	r3, [r2, #0]
}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20001048 	.word	0x20001048
 8005f24:	20000b70 	.word	0x20000b70
 8005f28:	20001030 	.word	0x20001030
 8005f2c:	20001000 	.word	0x20001000
 8005f30:	20000ffc 	.word	0x20000ffc
 8005f34:	20001064 	.word	0x20001064

08005f38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08a      	sub	sp, #40	@ 0x28
 8005f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f42:	f000 fb11 	bl	8006568 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f46:	4b1d      	ldr	r3, [pc, #116]	@ (8005fbc <xTimerCreateTimerTask+0x84>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d021      	beq.n	8005f92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f56:	1d3a      	adds	r2, r7, #4
 8005f58:	f107 0108 	add.w	r1, r7, #8
 8005f5c:	f107 030c 	add.w	r3, r7, #12
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe faf1 	bl	8004548 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	9202      	str	r2, [sp, #8]
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	2302      	movs	r3, #2
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2300      	movs	r3, #0
 8005f76:	460a      	mov	r2, r1
 8005f78:	4911      	ldr	r1, [pc, #68]	@ (8005fc0 <xTimerCreateTimerTask+0x88>)
 8005f7a:	4812      	ldr	r0, [pc, #72]	@ (8005fc4 <xTimerCreateTimerTask+0x8c>)
 8005f7c:	f7ff f8a6 	bl	80050cc <xTaskCreateStatic>
 8005f80:	4603      	mov	r3, r0
 8005f82:	4a11      	ldr	r2, [pc, #68]	@ (8005fc8 <xTimerCreateTimerTask+0x90>)
 8005f84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f86:	4b10      	ldr	r3, [pc, #64]	@ (8005fc8 <xTimerCreateTimerTask+0x90>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10b      	bne.n	8005fb0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	613b      	str	r3, [r7, #16]
}
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
 8005fae:	e7fd      	b.n	8005fac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005fb0:	697b      	ldr	r3, [r7, #20]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200010a0 	.word	0x200010a0
 8005fc0:	08006fd4 	.word	0x08006fd4
 8005fc4:	08006105 	.word	0x08006105
 8005fc8:	200010a4 	.word	0x200010a4

08005fcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	@ 0x28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10b      	bne.n	8005ffc <xTimerGenericCommand+0x30>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	623b      	str	r3, [r7, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	bf00      	nop
 8005ffa:	e7fd      	b.n	8005ff8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ffc:	4b19      	ldr	r3, [pc, #100]	@ (8006064 <xTimerGenericCommand+0x98>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d02a      	beq.n	800605a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b05      	cmp	r3, #5
 8006014:	dc18      	bgt.n	8006048 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006016:	f7ff fead 	bl	8005d74 <xTaskGetSchedulerState>
 800601a:	4603      	mov	r3, r0
 800601c:	2b02      	cmp	r3, #2
 800601e:	d109      	bne.n	8006034 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006020:	4b10      	ldr	r3, [pc, #64]	@ (8006064 <xTimerGenericCommand+0x98>)
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	f107 0110 	add.w	r1, r7, #16
 8006028:	2300      	movs	r3, #0
 800602a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800602c:	f7fe fc60 	bl	80048f0 <xQueueGenericSend>
 8006030:	6278      	str	r0, [r7, #36]	@ 0x24
 8006032:	e012      	b.n	800605a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006034:	4b0b      	ldr	r3, [pc, #44]	@ (8006064 <xTimerGenericCommand+0x98>)
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	f107 0110 	add.w	r1, r7, #16
 800603c:	2300      	movs	r3, #0
 800603e:	2200      	movs	r2, #0
 8006040:	f7fe fc56 	bl	80048f0 <xQueueGenericSend>
 8006044:	6278      	str	r0, [r7, #36]	@ 0x24
 8006046:	e008      	b.n	800605a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006048:	4b06      	ldr	r3, [pc, #24]	@ (8006064 <xTimerGenericCommand+0x98>)
 800604a:	6818      	ldr	r0, [r3, #0]
 800604c:	f107 0110 	add.w	r1, r7, #16
 8006050:	2300      	movs	r3, #0
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	f7fe fd4e 	bl	8004af4 <xQueueGenericSendFromISR>
 8006058:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800605c:	4618      	mov	r0, r3
 800605e:	3728      	adds	r7, #40	@ 0x28
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	200010a0 	.word	0x200010a0

08006068 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af02      	add	r7, sp, #8
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006072:	4b23      	ldr	r3, [pc, #140]	@ (8006100 <prvProcessExpiredTimer+0x98>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	3304      	adds	r3, #4
 8006080:	4618      	mov	r0, r3
 8006082:	f7fe fb01 	bl	8004688 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d023      	beq.n	80060dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	699a      	ldr	r2, [r3, #24]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	18d1      	adds	r1, r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	6978      	ldr	r0, [r7, #20]
 80060a2:	f000 f8d3 	bl	800624c <prvInsertTimerInActiveList>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d020      	beq.n	80060ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060ac:	2300      	movs	r3, #0
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	2300      	movs	r3, #0
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	2100      	movs	r1, #0
 80060b6:	6978      	ldr	r0, [r7, #20]
 80060b8:	f7ff ff88 	bl	8005fcc <xTimerGenericCommand>
 80060bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d114      	bne.n	80060ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	60fb      	str	r3, [r7, #12]
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060e2:	f023 0301 	bic.w	r3, r3, #1
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	6978      	ldr	r0, [r7, #20]
 80060f4:	4798      	blx	r3
}
 80060f6:	bf00      	nop
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20001098 	.word	0x20001098

08006104 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800610c:	f107 0308 	add.w	r3, r7, #8
 8006110:	4618      	mov	r0, r3
 8006112:	f000 f859 	bl	80061c8 <prvGetNextExpireTime>
 8006116:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4619      	mov	r1, r3
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f805 	bl	800612c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006122:	f000 f8d5 	bl	80062d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006126:	bf00      	nop
 8006128:	e7f0      	b.n	800610c <prvTimerTask+0x8>
	...

0800612c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006136:	f7ff fa2d 	bl	8005594 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	4618      	mov	r0, r3
 8006140:	f000 f864 	bl	800620c <prvSampleTimeNow>
 8006144:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d130      	bne.n	80061ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10a      	bne.n	8006168 <prvProcessTimerOrBlockTask+0x3c>
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	429a      	cmp	r2, r3
 8006158:	d806      	bhi.n	8006168 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800615a:	f7ff fa29 	bl	80055b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff ff81 	bl	8006068 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006166:	e024      	b.n	80061b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d008      	beq.n	8006180 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800616e:	4b13      	ldr	r3, [pc, #76]	@ (80061bc <prvProcessTimerOrBlockTask+0x90>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <prvProcessTimerOrBlockTask+0x50>
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <prvProcessTimerOrBlockTask+0x52>
 800617c:	2300      	movs	r3, #0
 800617e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006180:	4b0f      	ldr	r3, [pc, #60]	@ (80061c0 <prvProcessTimerOrBlockTask+0x94>)
 8006182:	6818      	ldr	r0, [r3, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	4619      	mov	r1, r3
 800618e:	f7fe ff69 	bl	8005064 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006192:	f7ff fa0d 	bl	80055b0 <xTaskResumeAll>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800619c:	4b09      	ldr	r3, [pc, #36]	@ (80061c4 <prvProcessTimerOrBlockTask+0x98>)
 800619e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	f3bf 8f6f 	isb	sy
}
 80061ac:	e001      	b.n	80061b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061ae:	f7ff f9ff 	bl	80055b0 <xTaskResumeAll>
}
 80061b2:	bf00      	nop
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	2000109c 	.word	0x2000109c
 80061c0:	200010a0 	.word	0x200010a0
 80061c4:	e000ed04 	.word	0xe000ed04

080061c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006208 <prvGetNextExpireTime+0x40>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <prvGetNextExpireTime+0x16>
 80061da:	2201      	movs	r2, #1
 80061dc:	e000      	b.n	80061e0 <prvGetNextExpireTime+0x18>
 80061de:	2200      	movs	r2, #0
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d105      	bne.n	80061f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061ec:	4b06      	ldr	r3, [pc, #24]	@ (8006208 <prvGetNextExpireTime+0x40>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	e001      	b.n	80061fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061fc:	68fb      	ldr	r3, [r7, #12]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr
 8006208:	20001098 	.word	0x20001098

0800620c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006214:	f7ff fa6a 	bl	80056ec <xTaskGetTickCount>
 8006218:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800621a:	4b0b      	ldr	r3, [pc, #44]	@ (8006248 <prvSampleTimeNow+0x3c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	429a      	cmp	r2, r3
 8006222:	d205      	bcs.n	8006230 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006224:	f000 f93a 	bl	800649c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e002      	b.n	8006236 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006236:	4a04      	ldr	r2, [pc, #16]	@ (8006248 <prvSampleTimeNow+0x3c>)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800623c:	68fb      	ldr	r3, [r7, #12]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	200010a8 	.word	0x200010a8

0800624c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	429a      	cmp	r2, r3
 8006270:	d812      	bhi.n	8006298 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	1ad2      	subs	r2, r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	429a      	cmp	r2, r3
 800627e:	d302      	bcc.n	8006286 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006280:	2301      	movs	r3, #1
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e01b      	b.n	80062be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006286:	4b10      	ldr	r3, [pc, #64]	@ (80062c8 <prvInsertTimerInActiveList+0x7c>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3304      	adds	r3, #4
 800628e:	4619      	mov	r1, r3
 8006290:	4610      	mov	r0, r2
 8006292:	f7fe f9c1 	bl	8004618 <vListInsert>
 8006296:	e012      	b.n	80062be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d206      	bcs.n	80062ae <prvInsertTimerInActiveList+0x62>
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d302      	bcc.n	80062ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062a8:	2301      	movs	r3, #1
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	e007      	b.n	80062be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062ae:	4b07      	ldr	r3, [pc, #28]	@ (80062cc <prvInsertTimerInActiveList+0x80>)
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f7fe f9ad 	bl	8004618 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062be:	697b      	ldr	r3, [r7, #20]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	2000109c 	.word	0x2000109c
 80062cc:	20001098 	.word	0x20001098

080062d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08e      	sub	sp, #56	@ 0x38
 80062d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062d6:	e0ce      	b.n	8006476 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	da19      	bge.n	8006312 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062de:	1d3b      	adds	r3, r7, #4
 80062e0:	3304      	adds	r3, #4
 80062e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10b      	bne.n	8006302 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	61fb      	str	r3, [r7, #28]
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	e7fd      	b.n	80062fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006308:	6850      	ldr	r0, [r2, #4]
 800630a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800630c:	6892      	ldr	r2, [r2, #8]
 800630e:	4611      	mov	r1, r2
 8006310:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	f2c0 80ae 	blt.w	8006476 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800631e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d004      	beq.n	8006330 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006328:	3304      	adds	r3, #4
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe f9ac 	bl	8004688 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006330:	463b      	mov	r3, r7
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff ff6a 	bl	800620c <prvSampleTimeNow>
 8006338:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b09      	cmp	r3, #9
 800633e:	f200 8097 	bhi.w	8006470 <prvProcessReceivedCommands+0x1a0>
 8006342:	a201      	add	r2, pc, #4	@ (adr r2, 8006348 <prvProcessReceivedCommands+0x78>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	08006371 	.word	0x08006371
 800634c:	08006371 	.word	0x08006371
 8006350:	08006371 	.word	0x08006371
 8006354:	080063e7 	.word	0x080063e7
 8006358:	080063fb 	.word	0x080063fb
 800635c:	08006447 	.word	0x08006447
 8006360:	08006371 	.word	0x08006371
 8006364:	08006371 	.word	0x08006371
 8006368:	080063e7 	.word	0x080063e7
 800636c:	080063fb 	.word	0x080063fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006372:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	b2da      	uxtb	r2, r3
 800637c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	18d1      	adds	r1, r2, r3
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800638e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006390:	f7ff ff5c 	bl	800624c <prvInsertTimerInActiveList>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d06c      	beq.n	8006474 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800639a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d061      	beq.n	8006474 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	441a      	add	r2, r3
 80063b8:	2300      	movs	r3, #0
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	2300      	movs	r3, #0
 80063be:	2100      	movs	r1, #0
 80063c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063c2:	f7ff fe03 	bl	8005fcc <xTimerGenericCommand>
 80063c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d152      	bne.n	8006474 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	61bb      	str	r3, [r7, #24]
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	e7fd      	b.n	80063e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063f8:	e03d      	b.n	8006476 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006400:	f043 0301 	orr.w	r3, r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006408:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006410:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10b      	bne.n	8006432 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	617b      	str	r3, [r7, #20]
}
 800642c:	bf00      	nop
 800642e:	bf00      	nop
 8006430:	e7fd      	b.n	800642e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	18d1      	adds	r1, r2, r3
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800643e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006440:	f7ff ff04 	bl	800624c <prvInsertTimerInActiveList>
					break;
 8006444:	e017      	b.n	8006476 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d103      	bne.n	800645c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006456:	f000 fb89 	bl	8006b6c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800645a:	e00c      	b.n	8006476 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800645c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006462:	f023 0301 	bic.w	r3, r3, #1
 8006466:	b2da      	uxtb	r2, r3
 8006468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800646e:	e002      	b.n	8006476 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006470:	bf00      	nop
 8006472:	e000      	b.n	8006476 <prvProcessReceivedCommands+0x1a6>
					break;
 8006474:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006476:	4b08      	ldr	r3, [pc, #32]	@ (8006498 <prvProcessReceivedCommands+0x1c8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	1d39      	adds	r1, r7, #4
 800647c:	2200      	movs	r2, #0
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe fbd6 	bl	8004c30 <xQueueReceive>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	f47f af26 	bne.w	80062d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800648c:	bf00      	nop
 800648e:	bf00      	nop
 8006490:	3730      	adds	r7, #48	@ 0x30
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	200010a0 	.word	0x200010a0

0800649c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064a2:	e049      	b.n	8006538 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064a4:	4b2e      	ldr	r3, [pc, #184]	@ (8006560 <prvSwitchTimerLists+0xc4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006560 <prvSwitchTimerLists+0xc4>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe f8e3 	bl	8004688 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d02f      	beq.n	8006538 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d90e      	bls.n	8006508 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006560 <prvSwitchTimerLists+0xc4>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3304      	adds	r3, #4
 80064fe:	4619      	mov	r1, r3
 8006500:	4610      	mov	r0, r2
 8006502:	f7fe f889 	bl	8004618 <vListInsert>
 8006506:	e017      	b.n	8006538 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006508:	2300      	movs	r3, #0
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	2300      	movs	r3, #0
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	2100      	movs	r1, #0
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f7ff fd5a 	bl	8005fcc <xTimerGenericCommand>
 8006518:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10b      	bne.n	8006538 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	603b      	str	r3, [r7, #0]
}
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006538:	4b09      	ldr	r3, [pc, #36]	@ (8006560 <prvSwitchTimerLists+0xc4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1b0      	bne.n	80064a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006542:	4b07      	ldr	r3, [pc, #28]	@ (8006560 <prvSwitchTimerLists+0xc4>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006548:	4b06      	ldr	r3, [pc, #24]	@ (8006564 <prvSwitchTimerLists+0xc8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a04      	ldr	r2, [pc, #16]	@ (8006560 <prvSwitchTimerLists+0xc4>)
 800654e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006550:	4a04      	ldr	r2, [pc, #16]	@ (8006564 <prvSwitchTimerLists+0xc8>)
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	6013      	str	r3, [r2, #0]
}
 8006556:	bf00      	nop
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20001098 	.word	0x20001098
 8006564:	2000109c 	.word	0x2000109c

08006568 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800656e:	f000 f92d 	bl	80067cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006572:	4b15      	ldr	r3, [pc, #84]	@ (80065c8 <prvCheckForValidListAndQueue+0x60>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d120      	bne.n	80065bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800657a:	4814      	ldr	r0, [pc, #80]	@ (80065cc <prvCheckForValidListAndQueue+0x64>)
 800657c:	f7fd fffe 	bl	800457c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006580:	4813      	ldr	r0, [pc, #76]	@ (80065d0 <prvCheckForValidListAndQueue+0x68>)
 8006582:	f7fd fffb 	bl	800457c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006586:	4b13      	ldr	r3, [pc, #76]	@ (80065d4 <prvCheckForValidListAndQueue+0x6c>)
 8006588:	4a10      	ldr	r2, [pc, #64]	@ (80065cc <prvCheckForValidListAndQueue+0x64>)
 800658a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800658c:	4b12      	ldr	r3, [pc, #72]	@ (80065d8 <prvCheckForValidListAndQueue+0x70>)
 800658e:	4a10      	ldr	r2, [pc, #64]	@ (80065d0 <prvCheckForValidListAndQueue+0x68>)
 8006590:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006592:	2300      	movs	r3, #0
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	4b11      	ldr	r3, [pc, #68]	@ (80065dc <prvCheckForValidListAndQueue+0x74>)
 8006598:	4a11      	ldr	r2, [pc, #68]	@ (80065e0 <prvCheckForValidListAndQueue+0x78>)
 800659a:	2110      	movs	r1, #16
 800659c:	200a      	movs	r0, #10
 800659e:	f7fe f907 	bl	80047b0 <xQueueGenericCreateStatic>
 80065a2:	4603      	mov	r3, r0
 80065a4:	4a08      	ldr	r2, [pc, #32]	@ (80065c8 <prvCheckForValidListAndQueue+0x60>)
 80065a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065a8:	4b07      	ldr	r3, [pc, #28]	@ (80065c8 <prvCheckForValidListAndQueue+0x60>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065b0:	4b05      	ldr	r3, [pc, #20]	@ (80065c8 <prvCheckForValidListAndQueue+0x60>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	490b      	ldr	r1, [pc, #44]	@ (80065e4 <prvCheckForValidListAndQueue+0x7c>)
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe fd2c 	bl	8005014 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065bc:	f000 f936 	bl	800682c <vPortExitCritical>
}
 80065c0:	bf00      	nop
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	200010a0 	.word	0x200010a0
 80065cc:	20001070 	.word	0x20001070
 80065d0:	20001084 	.word	0x20001084
 80065d4:	20001098 	.word	0x20001098
 80065d8:	2000109c 	.word	0x2000109c
 80065dc:	2000114c 	.word	0x2000114c
 80065e0:	200010ac 	.word	0x200010ac
 80065e4:	08006fdc 	.word	0x08006fdc

080065e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3b04      	subs	r3, #4
 80065f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3b04      	subs	r3, #4
 8006606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f023 0201 	bic.w	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3b04      	subs	r3, #4
 8006616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006618:	4a08      	ldr	r2, [pc, #32]	@ (800663c <pxPortInitialiseStack+0x54>)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3b14      	subs	r3, #20
 8006622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3b20      	subs	r3, #32
 800662e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006630:	68fb      	ldr	r3, [r7, #12]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr
 800663c:	08006641 	.word	0x08006641

08006640 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006646:	2300      	movs	r3, #0
 8006648:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800664a:	4b12      	ldr	r3, [pc, #72]	@ (8006694 <prvTaskExitError+0x54>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006652:	d00b      	beq.n	800666c <prvTaskExitError+0x2c>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	60fb      	str	r3, [r7, #12]
}
 8006666:	bf00      	nop
 8006668:	bf00      	nop
 800666a:	e7fd      	b.n	8006668 <prvTaskExitError+0x28>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	60bb      	str	r3, [r7, #8]
}
 800667e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006680:	bf00      	nop
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0fc      	beq.n	8006682 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006688:	bf00      	nop
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	bc80      	pop	{r7}
 8006692:	4770      	bx	lr
 8006694:	2000000c 	.word	0x2000000c
	...

080066a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066a0:	4b07      	ldr	r3, [pc, #28]	@ (80066c0 <pxCurrentTCBConst2>)
 80066a2:	6819      	ldr	r1, [r3, #0]
 80066a4:	6808      	ldr	r0, [r1, #0]
 80066a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066aa:	f380 8809 	msr	PSP, r0
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f380 8811 	msr	BASEPRI, r0
 80066ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80066be:	4770      	bx	lr

080066c0 <pxCurrentTCBConst2>:
 80066c0:	20000b70 	.word	0x20000b70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop

080066c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80066c8:	4806      	ldr	r0, [pc, #24]	@ (80066e4 <prvPortStartFirstTask+0x1c>)
 80066ca:	6800      	ldr	r0, [r0, #0]
 80066cc:	6800      	ldr	r0, [r0, #0]
 80066ce:	f380 8808 	msr	MSP, r0
 80066d2:	b662      	cpsie	i
 80066d4:	b661      	cpsie	f
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	df00      	svc	0
 80066e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066e2:	bf00      	nop
 80066e4:	e000ed08 	.word	0xe000ed08

080066e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066ee:	4b32      	ldr	r3, [pc, #200]	@ (80067b8 <xPortStartScheduler+0xd0>)
 80066f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	22ff      	movs	r2, #255	@ 0xff
 80066fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	b2db      	uxtb	r3, r3
 8006706:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	b2db      	uxtb	r3, r3
 800670c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006710:	b2da      	uxtb	r2, r3
 8006712:	4b2a      	ldr	r3, [pc, #168]	@ (80067bc <xPortStartScheduler+0xd4>)
 8006714:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006716:	4b2a      	ldr	r3, [pc, #168]	@ (80067c0 <xPortStartScheduler+0xd8>)
 8006718:	2207      	movs	r2, #7
 800671a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800671c:	e009      	b.n	8006732 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800671e:	4b28      	ldr	r3, [pc, #160]	@ (80067c0 <xPortStartScheduler+0xd8>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3b01      	subs	r3, #1
 8006724:	4a26      	ldr	r2, [pc, #152]	@ (80067c0 <xPortStartScheduler+0xd8>)
 8006726:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	b2db      	uxtb	r3, r3
 8006730:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673a:	2b80      	cmp	r3, #128	@ 0x80
 800673c:	d0ef      	beq.n	800671e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800673e:	4b20      	ldr	r3, [pc, #128]	@ (80067c0 <xPortStartScheduler+0xd8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f1c3 0307 	rsb	r3, r3, #7
 8006746:	2b04      	cmp	r3, #4
 8006748:	d00b      	beq.n	8006762 <xPortStartScheduler+0x7a>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	60bb      	str	r3, [r7, #8]
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	e7fd      	b.n	800675e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006762:	4b17      	ldr	r3, [pc, #92]	@ (80067c0 <xPortStartScheduler+0xd8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	4a15      	ldr	r2, [pc, #84]	@ (80067c0 <xPortStartScheduler+0xd8>)
 800676a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800676c:	4b14      	ldr	r3, [pc, #80]	@ (80067c0 <xPortStartScheduler+0xd8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006774:	4a12      	ldr	r2, [pc, #72]	@ (80067c0 <xPortStartScheduler+0xd8>)
 8006776:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	b2da      	uxtb	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006780:	4b10      	ldr	r3, [pc, #64]	@ (80067c4 <xPortStartScheduler+0xdc>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a0f      	ldr	r2, [pc, #60]	@ (80067c4 <xPortStartScheduler+0xdc>)
 8006786:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800678a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800678c:	4b0d      	ldr	r3, [pc, #52]	@ (80067c4 <xPortStartScheduler+0xdc>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a0c      	ldr	r2, [pc, #48]	@ (80067c4 <xPortStartScheduler+0xdc>)
 8006792:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006796:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006798:	f000 f8b8 	bl	800690c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800679c:	4b0a      	ldr	r3, [pc, #40]	@ (80067c8 <xPortStartScheduler+0xe0>)
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067a2:	f7ff ff91 	bl	80066c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067a6:	f7ff f869 	bl	800587c <vTaskSwitchContext>
	prvTaskExitError();
 80067aa:	f7ff ff49 	bl	8006640 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	e000e400 	.word	0xe000e400
 80067bc:	2000119c 	.word	0x2000119c
 80067c0:	200011a0 	.word	0x200011a0
 80067c4:	e000ed20 	.word	0xe000ed20
 80067c8:	2000000c 	.word	0x2000000c

080067cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	607b      	str	r3, [r7, #4]
}
 80067e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006824 <vPortEnterCritical+0x58>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3301      	adds	r3, #1
 80067ec:	4a0d      	ldr	r2, [pc, #52]	@ (8006824 <vPortEnterCritical+0x58>)
 80067ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006824 <vPortEnterCritical+0x58>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d110      	bne.n	800681a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006828 <vPortEnterCritical+0x5c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00b      	beq.n	800681a <vPortEnterCritical+0x4e>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	603b      	str	r3, [r7, #0]
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop
 8006818:	e7fd      	b.n	8006816 <vPortEnterCritical+0x4a>
	}
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr
 8006824:	2000000c 	.word	0x2000000c
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006832:	4b12      	ldr	r3, [pc, #72]	@ (800687c <vPortExitCritical+0x50>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10b      	bne.n	8006852 <vPortExitCritical+0x26>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	607b      	str	r3, [r7, #4]
}
 800684c:	bf00      	nop
 800684e:	bf00      	nop
 8006850:	e7fd      	b.n	800684e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006852:	4b0a      	ldr	r3, [pc, #40]	@ (800687c <vPortExitCritical+0x50>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3b01      	subs	r3, #1
 8006858:	4a08      	ldr	r2, [pc, #32]	@ (800687c <vPortExitCritical+0x50>)
 800685a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800685c:	4b07      	ldr	r3, [pc, #28]	@ (800687c <vPortExitCritical+0x50>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d105      	bne.n	8006870 <vPortExitCritical+0x44>
 8006864:	2300      	movs	r3, #0
 8006866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	f383 8811 	msr	BASEPRI, r3
}
 800686e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	2000000c 	.word	0x2000000c

08006880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006880:	f3ef 8009 	mrs	r0, PSP
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	4b0d      	ldr	r3, [pc, #52]	@ (80068c0 <pxCurrentTCBConst>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006890:	6010      	str	r0, [r2, #0]
 8006892:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006896:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800689a:	f380 8811 	msr	BASEPRI, r0
 800689e:	f7fe ffed 	bl	800587c <vTaskSwitchContext>
 80068a2:	f04f 0000 	mov.w	r0, #0
 80068a6:	f380 8811 	msr	BASEPRI, r0
 80068aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80068ae:	6819      	ldr	r1, [r3, #0]
 80068b0:	6808      	ldr	r0, [r1, #0]
 80068b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068b6:	f380 8809 	msr	PSP, r0
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	4770      	bx	lr

080068c0 <pxCurrentTCBConst>:
 80068c0:	20000b70 	.word	0x20000b70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop

080068c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	607b      	str	r3, [r7, #4]
}
 80068e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068e2:	f7fe ff11 	bl	8005708 <xTaskIncrementTick>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068ec:	4b06      	ldr	r3, [pc, #24]	@ (8006908 <xPortSysTickHandler+0x40>)
 80068ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	2300      	movs	r3, #0
 80068f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	f383 8811 	msr	BASEPRI, r3
}
 80068fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006900:	bf00      	nop
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006910:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <vPortSetupTimerInterrupt+0x30>)
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006916:	4b0a      	ldr	r3, [pc, #40]	@ (8006940 <vPortSetupTimerInterrupt+0x34>)
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800691c:	4b09      	ldr	r3, [pc, #36]	@ (8006944 <vPortSetupTimerInterrupt+0x38>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a09      	ldr	r2, [pc, #36]	@ (8006948 <vPortSetupTimerInterrupt+0x3c>)
 8006922:	fba2 2303 	umull	r2, r3, r2, r3
 8006926:	099b      	lsrs	r3, r3, #6
 8006928:	4a08      	ldr	r2, [pc, #32]	@ (800694c <vPortSetupTimerInterrupt+0x40>)
 800692a:	3b01      	subs	r3, #1
 800692c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800692e:	4b03      	ldr	r3, [pc, #12]	@ (800693c <vPortSetupTimerInterrupt+0x30>)
 8006930:	2207      	movs	r2, #7
 8006932:	601a      	str	r2, [r3, #0]
}
 8006934:	bf00      	nop
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr
 800693c:	e000e010 	.word	0xe000e010
 8006940:	e000e018 	.word	0xe000e018
 8006944:	20000000 	.word	0x20000000
 8006948:	10624dd3 	.word	0x10624dd3
 800694c:	e000e014 	.word	0xe000e014

08006950 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006956:	f3ef 8305 	mrs	r3, IPSR
 800695a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b0f      	cmp	r3, #15
 8006960:	d915      	bls.n	800698e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006962:	4a17      	ldr	r2, [pc, #92]	@ (80069c0 <vPortValidateInterruptPriority+0x70>)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800696c:	4b15      	ldr	r3, [pc, #84]	@ (80069c4 <vPortValidateInterruptPriority+0x74>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	7afa      	ldrb	r2, [r7, #11]
 8006972:	429a      	cmp	r2, r3
 8006974:	d20b      	bcs.n	800698e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	607b      	str	r3, [r7, #4]
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800698e:	4b0e      	ldr	r3, [pc, #56]	@ (80069c8 <vPortValidateInterruptPriority+0x78>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006996:	4b0d      	ldr	r3, [pc, #52]	@ (80069cc <vPortValidateInterruptPriority+0x7c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d90b      	bls.n	80069b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	603b      	str	r3, [r7, #0]
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	e7fd      	b.n	80069b2 <vPortValidateInterruptPriority+0x62>
	}
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bc80      	pop	{r7}
 80069be:	4770      	bx	lr
 80069c0:	e000e3f0 	.word	0xe000e3f0
 80069c4:	2000119c 	.word	0x2000119c
 80069c8:	e000ed0c 	.word	0xe000ed0c
 80069cc:	200011a0 	.word	0x200011a0

080069d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	@ 0x28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069d8:	2300      	movs	r3, #0
 80069da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069dc:	f7fe fdda 	bl	8005594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069e0:	4b5c      	ldr	r3, [pc, #368]	@ (8006b54 <pvPortMalloc+0x184>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069e8:	f000 f924 	bl	8006c34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069ec:	4b5a      	ldr	r3, [pc, #360]	@ (8006b58 <pvPortMalloc+0x188>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f040 8095 	bne.w	8006b24 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01e      	beq.n	8006a3e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006a00:	2208      	movs	r2, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4413      	add	r3, r2
 8006a06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d015      	beq.n	8006a3e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f023 0307 	bic.w	r3, r3, #7
 8006a18:	3308      	adds	r3, #8
 8006a1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00b      	beq.n	8006a3e <pvPortMalloc+0x6e>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	617b      	str	r3, [r7, #20]
}
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	e7fd      	b.n	8006a3a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d06f      	beq.n	8006b24 <pvPortMalloc+0x154>
 8006a44:	4b45      	ldr	r3, [pc, #276]	@ (8006b5c <pvPortMalloc+0x18c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d86a      	bhi.n	8006b24 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a4e:	4b44      	ldr	r3, [pc, #272]	@ (8006b60 <pvPortMalloc+0x190>)
 8006a50:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a52:	4b43      	ldr	r3, [pc, #268]	@ (8006b60 <pvPortMalloc+0x190>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a58:	e004      	b.n	8006a64 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d903      	bls.n	8006a76 <pvPortMalloc+0xa6>
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f1      	bne.n	8006a5a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a76:	4b37      	ldr	r3, [pc, #220]	@ (8006b54 <pvPortMalloc+0x184>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d051      	beq.n	8006b24 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2208      	movs	r2, #8
 8006a86:	4413      	add	r3, r2
 8006a88:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	1ad2      	subs	r2, r2, r3
 8006a9a:	2308      	movs	r3, #8
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d920      	bls.n	8006ae4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <pvPortMalloc+0xfc>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	613b      	str	r3, [r7, #16]
}
 8006ac6:	bf00      	nop
 8006ac8:	bf00      	nop
 8006aca:	e7fd      	b.n	8006ac8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	1ad2      	subs	r2, r2, r3
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ade:	69b8      	ldr	r0, [r7, #24]
 8006ae0:	f000 f90a 	bl	8006cf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8006b5c <pvPortMalloc+0x18c>)
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	4a1b      	ldr	r2, [pc, #108]	@ (8006b5c <pvPortMalloc+0x18c>)
 8006af0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006af2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b5c <pvPortMalloc+0x18c>)
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b64 <pvPortMalloc+0x194>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d203      	bcs.n	8006b06 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006afe:	4b17      	ldr	r3, [pc, #92]	@ (8006b5c <pvPortMalloc+0x18c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a18      	ldr	r2, [pc, #96]	@ (8006b64 <pvPortMalloc+0x194>)
 8006b04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	4b13      	ldr	r3, [pc, #76]	@ (8006b58 <pvPortMalloc+0x188>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b1a:	4b13      	ldr	r3, [pc, #76]	@ (8006b68 <pvPortMalloc+0x198>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	4a11      	ldr	r2, [pc, #68]	@ (8006b68 <pvPortMalloc+0x198>)
 8006b22:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b24:	f7fe fd44 	bl	80055b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <pvPortMalloc+0x17a>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	60fb      	str	r3, [r7, #12]
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop
 8006b48:	e7fd      	b.n	8006b46 <pvPortMalloc+0x176>
	return pvReturn;
 8006b4a:	69fb      	ldr	r3, [r7, #28]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3728      	adds	r7, #40	@ 0x28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	20001dac 	.word	0x20001dac
 8006b58:	20001dc0 	.word	0x20001dc0
 8006b5c:	20001db0 	.word	0x20001db0
 8006b60:	20001da4 	.word	0x20001da4
 8006b64:	20001db4 	.word	0x20001db4
 8006b68:	20001db8 	.word	0x20001db8

08006b6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d04f      	beq.n	8006c1e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b7e:	2308      	movs	r3, #8
 8006b80:	425b      	negs	r3, r3
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4413      	add	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	4b25      	ldr	r3, [pc, #148]	@ (8006c28 <vPortFree+0xbc>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4013      	ands	r3, r2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <vPortFree+0x46>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	60fb      	str	r3, [r7, #12]
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	e7fd      	b.n	8006bae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <vPortFree+0x66>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	60bb      	str	r3, [r7, #8]
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	e7fd      	b.n	8006bce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	4b14      	ldr	r3, [pc, #80]	@ (8006c28 <vPortFree+0xbc>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01e      	beq.n	8006c1e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d11a      	bne.n	8006c1e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	4b0e      	ldr	r3, [pc, #56]	@ (8006c28 <vPortFree+0xbc>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	401a      	ands	r2, r3
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bf8:	f7fe fccc 	bl	8005594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	4b0a      	ldr	r3, [pc, #40]	@ (8006c2c <vPortFree+0xc0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4413      	add	r3, r2
 8006c06:	4a09      	ldr	r2, [pc, #36]	@ (8006c2c <vPortFree+0xc0>)
 8006c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c0a:	6938      	ldr	r0, [r7, #16]
 8006c0c:	f000 f874 	bl	8006cf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c10:	4b07      	ldr	r3, [pc, #28]	@ (8006c30 <vPortFree+0xc4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	4a06      	ldr	r2, [pc, #24]	@ (8006c30 <vPortFree+0xc4>)
 8006c18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c1a:	f7fe fcc9 	bl	80055b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c1e:	bf00      	nop
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20001dc0 	.word	0x20001dc0
 8006c2c:	20001db0 	.word	0x20001db0
 8006c30:	20001dbc 	.word	0x20001dbc

08006c34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c3a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006c3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c40:	4b27      	ldr	r3, [pc, #156]	@ (8006ce0 <prvHeapInit+0xac>)
 8006c42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00c      	beq.n	8006c68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3307      	adds	r3, #7
 8006c52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0307 	bic.w	r3, r3, #7
 8006c5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce0 <prvHeapInit+0xac>)
 8006c64:	4413      	add	r3, r2
 8006c66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce4 <prvHeapInit+0xb0>)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c72:	4b1c      	ldr	r3, [pc, #112]	@ (8006ce4 <prvHeapInit+0xb0>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c80:	2208      	movs	r2, #8
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	1a9b      	subs	r3, r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0307 	bic.w	r3, r3, #7
 8006c8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a15      	ldr	r2, [pc, #84]	@ (8006ce8 <prvHeapInit+0xb4>)
 8006c94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c96:	4b14      	ldr	r3, [pc, #80]	@ (8006ce8 <prvHeapInit+0xb4>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c9e:	4b12      	ldr	r3, [pc, #72]	@ (8006ce8 <prvHeapInit+0xb4>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	1ad2      	subs	r2, r2, r3
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce8 <prvHeapInit+0xb4>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8006cec <prvHeapInit+0xb8>)
 8006cc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4a09      	ldr	r2, [pc, #36]	@ (8006cf0 <prvHeapInit+0xbc>)
 8006cca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ccc:	4b09      	ldr	r3, [pc, #36]	@ (8006cf4 <prvHeapInit+0xc0>)
 8006cce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006cd2:	601a      	str	r2, [r3, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bc80      	pop	{r7}
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	200011a4 	.word	0x200011a4
 8006ce4:	20001da4 	.word	0x20001da4
 8006ce8:	20001dac 	.word	0x20001dac
 8006cec:	20001db4 	.word	0x20001db4
 8006cf0:	20001db0 	.word	0x20001db0
 8006cf4:	20001dc0 	.word	0x20001dc0

08006cf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d00:	4b27      	ldr	r3, [pc, #156]	@ (8006da0 <prvInsertBlockIntoFreeList+0xa8>)
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	e002      	b.n	8006d0c <prvInsertBlockIntoFreeList+0x14>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d8f7      	bhi.n	8006d06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	4413      	add	r3, r2
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d108      	bne.n	8006d3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	441a      	add	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	441a      	add	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d118      	bne.n	8006d80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b14      	ldr	r3, [pc, #80]	@ (8006da4 <prvInsertBlockIntoFreeList+0xac>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d00d      	beq.n	8006d76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	441a      	add	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e008      	b.n	8006d88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d76:	4b0b      	ldr	r3, [pc, #44]	@ (8006da4 <prvInsertBlockIntoFreeList+0xac>)
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e003      	b.n	8006d88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d002      	beq.n	8006d96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d96:	bf00      	nop
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bc80      	pop	{r7}
 8006d9e:	4770      	bx	lr
 8006da0:	20001da4 	.word	0x20001da4
 8006da4:	20001dac 	.word	0x20001dac

08006da8 <memset>:
 8006da8:	4603      	mov	r3, r0
 8006daa:	4402      	add	r2, r0
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d100      	bne.n	8006db2 <memset+0xa>
 8006db0:	4770      	bx	lr
 8006db2:	f803 1b01 	strb.w	r1, [r3], #1
 8006db6:	e7f9      	b.n	8006dac <memset+0x4>

08006db8 <_reclaim_reent>:
 8006db8:	4b2d      	ldr	r3, [pc, #180]	@ (8006e70 <_reclaim_reent+0xb8>)
 8006dba:	b570      	push	{r4, r5, r6, lr}
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4283      	cmp	r3, r0
 8006dc2:	d053      	beq.n	8006e6c <_reclaim_reent+0xb4>
 8006dc4:	69c3      	ldr	r3, [r0, #28]
 8006dc6:	b31b      	cbz	r3, 8006e10 <_reclaim_reent+0x58>
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	b163      	cbz	r3, 8006de6 <_reclaim_reent+0x2e>
 8006dcc:	2500      	movs	r5, #0
 8006dce:	69e3      	ldr	r3, [r4, #28]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	5959      	ldr	r1, [r3, r5]
 8006dd4:	b9b1      	cbnz	r1, 8006e04 <_reclaim_reent+0x4c>
 8006dd6:	3504      	adds	r5, #4
 8006dd8:	2d80      	cmp	r5, #128	@ 0x80
 8006dda:	d1f8      	bne.n	8006dce <_reclaim_reent+0x16>
 8006ddc:	69e3      	ldr	r3, [r4, #28]
 8006dde:	4620      	mov	r0, r4
 8006de0:	68d9      	ldr	r1, [r3, #12]
 8006de2:	f000 f87b 	bl	8006edc <_free_r>
 8006de6:	69e3      	ldr	r3, [r4, #28]
 8006de8:	6819      	ldr	r1, [r3, #0]
 8006dea:	b111      	cbz	r1, 8006df2 <_reclaim_reent+0x3a>
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 f875 	bl	8006edc <_free_r>
 8006df2:	69e3      	ldr	r3, [r4, #28]
 8006df4:	689d      	ldr	r5, [r3, #8]
 8006df6:	b15d      	cbz	r5, 8006e10 <_reclaim_reent+0x58>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	682d      	ldr	r5, [r5, #0]
 8006dfe:	f000 f86d 	bl	8006edc <_free_r>
 8006e02:	e7f8      	b.n	8006df6 <_reclaim_reent+0x3e>
 8006e04:	680e      	ldr	r6, [r1, #0]
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 f868 	bl	8006edc <_free_r>
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	e7e1      	b.n	8006dd4 <_reclaim_reent+0x1c>
 8006e10:	6961      	ldr	r1, [r4, #20]
 8006e12:	b111      	cbz	r1, 8006e1a <_reclaim_reent+0x62>
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 f861 	bl	8006edc <_free_r>
 8006e1a:	69e1      	ldr	r1, [r4, #28]
 8006e1c:	b111      	cbz	r1, 8006e24 <_reclaim_reent+0x6c>
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 f85c 	bl	8006edc <_free_r>
 8006e24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006e26:	b111      	cbz	r1, 8006e2e <_reclaim_reent+0x76>
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 f857 	bl	8006edc <_free_r>
 8006e2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e30:	b111      	cbz	r1, 8006e38 <_reclaim_reent+0x80>
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 f852 	bl	8006edc <_free_r>
 8006e38:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006e3a:	b111      	cbz	r1, 8006e42 <_reclaim_reent+0x8a>
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f000 f84d 	bl	8006edc <_free_r>
 8006e42:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006e44:	b111      	cbz	r1, 8006e4c <_reclaim_reent+0x94>
 8006e46:	4620      	mov	r0, r4
 8006e48:	f000 f848 	bl	8006edc <_free_r>
 8006e4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006e4e:	b111      	cbz	r1, 8006e56 <_reclaim_reent+0x9e>
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 f843 	bl	8006edc <_free_r>
 8006e56:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006e58:	b111      	cbz	r1, 8006e60 <_reclaim_reent+0xa8>
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 f83e 	bl	8006edc <_free_r>
 8006e60:	6a23      	ldr	r3, [r4, #32]
 8006e62:	b11b      	cbz	r3, 8006e6c <_reclaim_reent+0xb4>
 8006e64:	4620      	mov	r0, r4
 8006e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e6a:	4718      	bx	r3
 8006e6c:	bd70      	pop	{r4, r5, r6, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000010 	.word	0x20000010

08006e74 <__libc_init_array>:
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	2600      	movs	r6, #0
 8006e78:	4d0c      	ldr	r5, [pc, #48]	@ (8006eac <__libc_init_array+0x38>)
 8006e7a:	4c0d      	ldr	r4, [pc, #52]	@ (8006eb0 <__libc_init_array+0x3c>)
 8006e7c:	1b64      	subs	r4, r4, r5
 8006e7e:	10a4      	asrs	r4, r4, #2
 8006e80:	42a6      	cmp	r6, r4
 8006e82:	d109      	bne.n	8006e98 <__libc_init_array+0x24>
 8006e84:	f000 f87e 	bl	8006f84 <_init>
 8006e88:	2600      	movs	r6, #0
 8006e8a:	4d0a      	ldr	r5, [pc, #40]	@ (8006eb4 <__libc_init_array+0x40>)
 8006e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8006eb8 <__libc_init_array+0x44>)
 8006e8e:	1b64      	subs	r4, r4, r5
 8006e90:	10a4      	asrs	r4, r4, #2
 8006e92:	42a6      	cmp	r6, r4
 8006e94:	d105      	bne.n	8006ea2 <__libc_init_array+0x2e>
 8006e96:	bd70      	pop	{r4, r5, r6, pc}
 8006e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9c:	4798      	blx	r3
 8006e9e:	3601      	adds	r6, #1
 8006ea0:	e7ee      	b.n	8006e80 <__libc_init_array+0xc>
 8006ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea6:	4798      	blx	r3
 8006ea8:	3601      	adds	r6, #1
 8006eaa:	e7f2      	b.n	8006e92 <__libc_init_array+0x1e>
 8006eac:	080070a0 	.word	0x080070a0
 8006eb0:	080070a0 	.word	0x080070a0
 8006eb4:	080070a0 	.word	0x080070a0
 8006eb8:	080070a4 	.word	0x080070a4

08006ebc <__retarget_lock_acquire_recursive>:
 8006ebc:	4770      	bx	lr

08006ebe <__retarget_lock_release_recursive>:
 8006ebe:	4770      	bx	lr

08006ec0 <memcpy>:
 8006ec0:	440a      	add	r2, r1
 8006ec2:	4291      	cmp	r1, r2
 8006ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ec8:	d100      	bne.n	8006ecc <memcpy+0xc>
 8006eca:	4770      	bx	lr
 8006ecc:	b510      	push	{r4, lr}
 8006ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ed2:	4291      	cmp	r1, r2
 8006ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ed8:	d1f9      	bne.n	8006ece <memcpy+0xe>
 8006eda:	bd10      	pop	{r4, pc}

08006edc <_free_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4605      	mov	r5, r0
 8006ee0:	2900      	cmp	r1, #0
 8006ee2:	d040      	beq.n	8006f66 <_free_r+0x8a>
 8006ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ee8:	1f0c      	subs	r4, r1, #4
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	bfb8      	it	lt
 8006eee:	18e4      	addlt	r4, r4, r3
 8006ef0:	f000 f83c 	bl	8006f6c <__malloc_lock>
 8006ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f68 <_free_r+0x8c>)
 8006ef6:	6813      	ldr	r3, [r2, #0]
 8006ef8:	b933      	cbnz	r3, 8006f08 <_free_r+0x2c>
 8006efa:	6063      	str	r3, [r4, #4]
 8006efc:	6014      	str	r4, [r2, #0]
 8006efe:	4628      	mov	r0, r5
 8006f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f04:	f000 b838 	b.w	8006f78 <__malloc_unlock>
 8006f08:	42a3      	cmp	r3, r4
 8006f0a:	d908      	bls.n	8006f1e <_free_r+0x42>
 8006f0c:	6820      	ldr	r0, [r4, #0]
 8006f0e:	1821      	adds	r1, r4, r0
 8006f10:	428b      	cmp	r3, r1
 8006f12:	bf01      	itttt	eq
 8006f14:	6819      	ldreq	r1, [r3, #0]
 8006f16:	685b      	ldreq	r3, [r3, #4]
 8006f18:	1809      	addeq	r1, r1, r0
 8006f1a:	6021      	streq	r1, [r4, #0]
 8006f1c:	e7ed      	b.n	8006efa <_free_r+0x1e>
 8006f1e:	461a      	mov	r2, r3
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	b10b      	cbz	r3, 8006f28 <_free_r+0x4c>
 8006f24:	42a3      	cmp	r3, r4
 8006f26:	d9fa      	bls.n	8006f1e <_free_r+0x42>
 8006f28:	6811      	ldr	r1, [r2, #0]
 8006f2a:	1850      	adds	r0, r2, r1
 8006f2c:	42a0      	cmp	r0, r4
 8006f2e:	d10b      	bne.n	8006f48 <_free_r+0x6c>
 8006f30:	6820      	ldr	r0, [r4, #0]
 8006f32:	4401      	add	r1, r0
 8006f34:	1850      	adds	r0, r2, r1
 8006f36:	4283      	cmp	r3, r0
 8006f38:	6011      	str	r1, [r2, #0]
 8006f3a:	d1e0      	bne.n	8006efe <_free_r+0x22>
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	4408      	add	r0, r1
 8006f42:	6010      	str	r0, [r2, #0]
 8006f44:	6053      	str	r3, [r2, #4]
 8006f46:	e7da      	b.n	8006efe <_free_r+0x22>
 8006f48:	d902      	bls.n	8006f50 <_free_r+0x74>
 8006f4a:	230c      	movs	r3, #12
 8006f4c:	602b      	str	r3, [r5, #0]
 8006f4e:	e7d6      	b.n	8006efe <_free_r+0x22>
 8006f50:	6820      	ldr	r0, [r4, #0]
 8006f52:	1821      	adds	r1, r4, r0
 8006f54:	428b      	cmp	r3, r1
 8006f56:	bf01      	itttt	eq
 8006f58:	6819      	ldreq	r1, [r3, #0]
 8006f5a:	685b      	ldreq	r3, [r3, #4]
 8006f5c:	1809      	addeq	r1, r1, r0
 8006f5e:	6021      	streq	r1, [r4, #0]
 8006f60:	6063      	str	r3, [r4, #4]
 8006f62:	6054      	str	r4, [r2, #4]
 8006f64:	e7cb      	b.n	8006efe <_free_r+0x22>
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	20001f00 	.word	0x20001f00

08006f6c <__malloc_lock>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	@ (8006f74 <__malloc_lock+0x8>)
 8006f6e:	f7ff bfa5 	b.w	8006ebc <__retarget_lock_acquire_recursive>
 8006f72:	bf00      	nop
 8006f74:	20001efc 	.word	0x20001efc

08006f78 <__malloc_unlock>:
 8006f78:	4801      	ldr	r0, [pc, #4]	@ (8006f80 <__malloc_unlock+0x8>)
 8006f7a:	f7ff bfa0 	b.w	8006ebe <__retarget_lock_release_recursive>
 8006f7e:	bf00      	nop
 8006f80:	20001efc 	.word	0x20001efc

08006f84 <_init>:
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	bf00      	nop
 8006f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8a:	bc08      	pop	{r3}
 8006f8c:	469e      	mov	lr, r3
 8006f8e:	4770      	bx	lr

08006f90 <_fini>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	bf00      	nop
 8006f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f96:	bc08      	pop	{r3}
 8006f98:	469e      	mov	lr, r3
 8006f9a:	4770      	bx	lr
